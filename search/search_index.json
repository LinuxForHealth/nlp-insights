{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"NLP Insights A Rest service for updating bundles of FHIR resources with discovered insights. The service is implemented as a Flask API within a docker container. Purpose The primary purpose of the discover insights API is to accept a bundle of FHIR resources and to return an updated bundle that includes discovered insights. Resources in the bundle may have been enriched by adding additional codes. For example an AllergyIntolerance resource for a peanut allergy might have UMLS code C0559470 or SNOMED-CT code 91935009 added to it. New resources may have been derived from unstructured text (such as clinical notes) contained within the bundle's resources. For example a DiagnosticReport that says the patient had a myocardial infarction might result in a derived Condition resource being added to the bundle. Supported NLP Engines The nlp-insights service requires an NLP engine service to perform NLP related tasks. We support two NLP services. IBM's Annotator for Clinical Data (ACD) and Open-source QuickUMLS Quick Start Our tutorials describe how to setup and configure nlp-insights with a supported NLP service. They also provide extensive description of how resources are derived and enriched: Tutorial for using the nlp-insights service with QuickUMLS Tutorial for using the nlp-insights service with ACD Running the service locally A local instance of the service can be started either by: Pulling a container image from our repository. Cloning our GitHub repo and building an image from the source code. The directions for both approaches can be found here . Although discouraged, it is possible to run the service outside of a docker container . Kubernetes The nlp-insights service is designed to be part of a larger health-patterns ingestion and enrichment pipeline. Helm charts are included so that the service can be deployed to kubernetes. The deployed service can then be integrated into a pipeline. More details on deployment and configuration in a k8s environment are discussed here HTTP Endpoints The HTTP APIs for the service are described here . These APIs allow you to: Define the connection to the NLP engine service(s), Select the default NLP engine that will be used for insight discovery Discover insights Override the default engine and use a different NLP engine for one or more resource types Build We use gradle for all build and test related tasks. The important features are documented here . Continuous Integration and documentation publishing is done with GitHub Actions, which is documented here . Contributing We welcome contributions! Please look at our contributing guide for details on how to begin. License","title":"Home"},{"location":"#nlp-insights","text":"A Rest service for updating bundles of FHIR resources with discovered insights. The service is implemented as a Flask API within a docker container.","title":"NLP Insights"},{"location":"#purpose","text":"The primary purpose of the discover insights API is to accept a bundle of FHIR resources and to return an updated bundle that includes discovered insights. Resources in the bundle may have been enriched by adding additional codes. For example an AllergyIntolerance resource for a peanut allergy might have UMLS code C0559470 or SNOMED-CT code 91935009 added to it. New resources may have been derived from unstructured text (such as clinical notes) contained within the bundle's resources. For example a DiagnosticReport that says the patient had a myocardial infarction might result in a derived Condition resource being added to the bundle.","title":"Purpose"},{"location":"#supported-nlp-engines","text":"The nlp-insights service requires an NLP engine service to perform NLP related tasks. We support two NLP services. IBM's Annotator for Clinical Data (ACD) and Open-source QuickUMLS","title":"Supported NLP Engines"},{"location":"#quick-start","text":"Our tutorials describe how to setup and configure nlp-insights with a supported NLP service. They also provide extensive description of how resources are derived and enriched: Tutorial for using the nlp-insights service with QuickUMLS Tutorial for using the nlp-insights service with ACD","title":"Quick Start"},{"location":"#running-the-service-locally","text":"A local instance of the service can be started either by: Pulling a container image from our repository. Cloning our GitHub repo and building an image from the source code. The directions for both approaches can be found here . Although discouraged, it is possible to run the service outside of a docker container .","title":"Running the service locally"},{"location":"#kubernetes","text":"The nlp-insights service is designed to be part of a larger health-patterns ingestion and enrichment pipeline. Helm charts are included so that the service can be deployed to kubernetes. The deployed service can then be integrated into a pipeline. More details on deployment and configuration in a k8s environment are discussed here","title":"Kubernetes"},{"location":"#http-endpoints","text":"The HTTP APIs for the service are described here . These APIs allow you to: Define the connection to the NLP engine service(s), Select the default NLP engine that will be used for insight discovery Discover insights Override the default engine and use a different NLP engine for one or more resource types","title":"HTTP Endpoints"},{"location":"#build","text":"We use gradle for all build and test related tasks. The important features are documented here . Continuous Integration and documentation publishing is done with GitHub Actions, which is documented here .","title":"Build"},{"location":"#contributing","text":"We welcome contributions! Please look at our contributing guide for details on how to begin.","title":"Contributing"},{"location":"#license","text":"","title":"License"},{"location":"developer/CI/","text":"Continuous Integration This project uses Github actions to perform continuous integration tasks. The ultimate goal of the CI pipeline is to ensure that when code is merged into the main branch: The code being merged is of high quality (tests pass) A release is created in git. There is a container image in a registry (currently quay.io ) that was built using the release, the image tag matches the release. All commits in the merge satisfy the DCO requirements. The documentation has valid page links, and is built to the gh-pages branch. The branch is published to gh-pages. This makes it easy to find the latest release, the associated container image, and the latest documentation. Actions run at multiple points in the development lifecycle. Push new commits to a user branch Pull request Push commits to main (The result of merging a pull request) Push new commits to a user branch When new commits are pushed to a user branch, the nlp-insights-push-validation.yml workflow is invoked. The purpose of this workflow is to provide fast validation of the code that was pushed. It performs the following high level tasks. Unit test Static Code Analysis Docker Lint A coverage report from the unit tests is included in the build artifacts. The unit test and static code analysis can be run locally with ./gradlew checkSource (Linux) or ./gradlew.bat checkSource (windows) Pull request A new (candidate) release is created each time a pull request is made. A candidate release means that the docker image is built, and charts in the branch are updated to point at that image as part of the build. The tag for the release is created later, when the pull is merged, and the release tag will be consistent with the tag of the docker image. A pull request must be made from a branch, a pull request from a fork is not supported. The workaround is to first merge your changes into a branch of the target repo, and then make the pull request from the branch. If documentation changes have been made, the documentation for the release is built for validation, but is NOT published to the gh-pages branch until the pull request is merged. The prepare release workflow has TWO workflow files associated with it. prepare-release.yml defines a flow that runs when any non-documentation part changes. This builds the docker image and pushes it to the container repo. prepare-doc-release.yml defines a flow that runs when any documentation part changes. This validates the markdown used in documentation. These flows define the same \"Prepare release\" job name. The job name is registered as a required check that must pass before merging a pull request. There are two jobs because if a pull request includes only documentation, we don't want to build a new container. They have the same name because of the problem described in the github documentation . It is possible that one or both of these actions may run on a pull request. The prepare-release.yml workflow file includes the logic to build and tag the container image. This includes the following actions. Determine the release version number Update repository files with version number and location of the docker image Quality Verification (tests) Build & Push Docker Image Commit repository changes to Git The prepare-doc-release.yml is much simpler. It builds the documentation with the strict option. This workflow is simple validation, the documentation is not pushed anywhere. Configuration prepare-release.yml depends on several configuration settings. The environment of the workflow file indicates the server, org, and repo where the image will be stored. Changing these requires making a pull request that includes a new version of the workflow with updated values (which will create an image at the new location). jobs: prepare-release: name: Prepare release runs-on: ubuntu-latest env: docker_server: quay.io docker_org: alvearie docker_repo: nlp-insights The username and password that are used to log into the docker server are stored as Github secrets. An admin can set these by navigating to the settings tab, and choosing Secrets -> Actions from the left hand panel. The username and password are stored in the DOCKER_USERNAME and DOCKER_PASSWORD repository secrets. Determine release version A release version has the format major . minor . patch , where major, minor, and patch are integers A unique version number is determined by incrementing the most recent release version (including pre-releases) of the Git repo. If an image exists in the container repository with the same tag as the release, the version's patch level is incremented until a unused release version is found. A label can be added to the pull request to indicate that the pull should create a Major, Minor, or Patch release. If no label is added, patch is the default. Valid labels are: release-major , release-minor , and release-patch Update Repository files Several files in the branch need to be updated with the URL for the image's org, repo and tag for the docker image. These files are: values.yaml chart.yaml The helm charts are then packaged into a *.tgz file and stored in the docs/charts directory. This makes them accessible from github.io after the branch is merged into main. Once packaged, a repo index is performed on docs/charts to create an index.yaml for all charts that exist in the directory. The version in gradle.properties is updated to the release version. This version is used when building the docker image. It is also used when merging the pull to determine what release number should be created for the merge. The changes are not committed until the end of the build. Quality verification The build will run unit tests and perform linting and static code analysis. Build and Push Docker image The docker image is built and pushed to the container registry Commit release updates to Git The prior changes to the branch are committed to Git. Making a pull request results in an additional commit from within an action, a developer will have to do a fetch and rebase to see the latest changes for these files. Push commits to main (Merge the pull request) Merging the pull request results in pushing the commits in the pull to the main branch. Create release tag When a commit is pushed to main, the release.yml workflow will create a release tag for the commit. The value of the release tag is determined from the version in the gradle.properties file. Build and publish documentation When a commit is pushed to main, the build-docs.yml workflow will run MkDocs to build the documentation and push the site to the gh-pages branch (root folder). The push to the gh-pages branch will trigger the \"pages build and deployment\" github action. MkDocs creates the branch with a .nojekyll file so that github will deploy only, rather than build. The documentation is then available via github pages. The gh-pages branch should not be changed directly as changes will be lost on the next deploy. Testing/viewing documentation changes Because the gh-pages build happens after documentation is merged into main, you will need to build the documentation locally to test and view the documentation build. install MkDocs locally, mkdocs serve will start a service that you can connect a browser to for viewing documentation. The documenation is rebuilt when files change, so you can view changes as you make them. GitHub Repo Settings for gh-pages In order for the documentation process to work the repo needs to be configured for gh-pages. Under Settings -> Pages, the site should be built from gh-pages / (root) It may be necessary to do an initial deploy to create the branch if it does not already exist. If there is already a deployment, you might have to first change the source to none, and after the gh-pages branch is created set the pages source to the gh-pages branch.","title":"Continuous Integration"},{"location":"developer/CI/#continuous-integration","text":"This project uses Github actions to perform continuous integration tasks. The ultimate goal of the CI pipeline is to ensure that when code is merged into the main branch: The code being merged is of high quality (tests pass) A release is created in git. There is a container image in a registry (currently quay.io ) that was built using the release, the image tag matches the release. All commits in the merge satisfy the DCO requirements. The documentation has valid page links, and is built to the gh-pages branch. The branch is published to gh-pages. This makes it easy to find the latest release, the associated container image, and the latest documentation. Actions run at multiple points in the development lifecycle. Push new commits to a user branch Pull request Push commits to main (The result of merging a pull request)","title":"Continuous Integration"},{"location":"developer/CI/#push-new-commits-to-a-user-branch","text":"When new commits are pushed to a user branch, the nlp-insights-push-validation.yml workflow is invoked. The purpose of this workflow is to provide fast validation of the code that was pushed. It performs the following high level tasks. Unit test Static Code Analysis Docker Lint A coverage report from the unit tests is included in the build artifacts. The unit test and static code analysis can be run locally with ./gradlew checkSource (Linux) or ./gradlew.bat checkSource (windows)","title":"Push new commits to a user branch"},{"location":"developer/CI/#pull-request","text":"A new (candidate) release is created each time a pull request is made. A candidate release means that the docker image is built, and charts in the branch are updated to point at that image as part of the build. The tag for the release is created later, when the pull is merged, and the release tag will be consistent with the tag of the docker image. A pull request must be made from a branch, a pull request from a fork is not supported. The workaround is to first merge your changes into a branch of the target repo, and then make the pull request from the branch. If documentation changes have been made, the documentation for the release is built for validation, but is NOT published to the gh-pages branch until the pull request is merged. The prepare release workflow has TWO workflow files associated with it. prepare-release.yml defines a flow that runs when any non-documentation part changes. This builds the docker image and pushes it to the container repo. prepare-doc-release.yml defines a flow that runs when any documentation part changes. This validates the markdown used in documentation. These flows define the same \"Prepare release\" job name. The job name is registered as a required check that must pass before merging a pull request. There are two jobs because if a pull request includes only documentation, we don't want to build a new container. They have the same name because of the problem described in the github documentation . It is possible that one or both of these actions may run on a pull request. The prepare-release.yml workflow file includes the logic to build and tag the container image. This includes the following actions. Determine the release version number Update repository files with version number and location of the docker image Quality Verification (tests) Build & Push Docker Image Commit repository changes to Git The prepare-doc-release.yml is much simpler. It builds the documentation with the strict option. This workflow is simple validation, the documentation is not pushed anywhere.","title":"Pull request"},{"location":"developer/CI/#configuration","text":"prepare-release.yml depends on several configuration settings. The environment of the workflow file indicates the server, org, and repo where the image will be stored. Changing these requires making a pull request that includes a new version of the workflow with updated values (which will create an image at the new location). jobs: prepare-release: name: Prepare release runs-on: ubuntu-latest env: docker_server: quay.io docker_org: alvearie docker_repo: nlp-insights The username and password that are used to log into the docker server are stored as Github secrets. An admin can set these by navigating to the settings tab, and choosing Secrets -> Actions from the left hand panel. The username and password are stored in the DOCKER_USERNAME and DOCKER_PASSWORD repository secrets.","title":"Configuration"},{"location":"developer/CI/#determine-release-version","text":"A release version has the format major . minor . patch , where major, minor, and patch are integers A unique version number is determined by incrementing the most recent release version (including pre-releases) of the Git repo. If an image exists in the container repository with the same tag as the release, the version's patch level is incremented until a unused release version is found. A label can be added to the pull request to indicate that the pull should create a Major, Minor, or Patch release. If no label is added, patch is the default. Valid labels are: release-major , release-minor , and release-patch","title":"Determine release version"},{"location":"developer/CI/#update-repository-files","text":"Several files in the branch need to be updated with the URL for the image's org, repo and tag for the docker image. These files are: values.yaml chart.yaml The helm charts are then packaged into a *.tgz file and stored in the docs/charts directory. This makes them accessible from github.io after the branch is merged into main. Once packaged, a repo index is performed on docs/charts to create an index.yaml for all charts that exist in the directory. The version in gradle.properties is updated to the release version. This version is used when building the docker image. It is also used when merging the pull to determine what release number should be created for the merge. The changes are not committed until the end of the build.","title":"Update Repository files"},{"location":"developer/CI/#quality-verification","text":"The build will run unit tests and perform linting and static code analysis.","title":"Quality verification"},{"location":"developer/CI/#build-and-push-docker-image","text":"The docker image is built and pushed to the container registry","title":"Build and Push Docker image"},{"location":"developer/CI/#commit-release-updates-to-git","text":"The prior changes to the branch are committed to Git. Making a pull request results in an additional commit from within an action, a developer will have to do a fetch and rebase to see the latest changes for these files.","title":"Commit release updates to Git"},{"location":"developer/CI/#push-commits-to-main-merge-the-pull-request","text":"Merging the pull request results in pushing the commits in the pull to the main branch.","title":"Push commits to main (Merge the pull request)"},{"location":"developer/CI/#create-release-tag","text":"When a commit is pushed to main, the release.yml workflow will create a release tag for the commit. The value of the release tag is determined from the version in the gradle.properties file.","title":"Create release tag"},{"location":"developer/CI/#build-and-publish-documentation","text":"When a commit is pushed to main, the build-docs.yml workflow will run MkDocs to build the documentation and push the site to the gh-pages branch (root folder). The push to the gh-pages branch will trigger the \"pages build and deployment\" github action. MkDocs creates the branch with a .nojekyll file so that github will deploy only, rather than build. The documentation is then available via github pages. The gh-pages branch should not be changed directly as changes will be lost on the next deploy. Testing/viewing documentation changes Because the gh-pages build happens after documentation is merged into main, you will need to build the documentation locally to test and view the documentation build. install MkDocs locally, mkdocs serve will start a service that you can connect a browser to for viewing documentation. The documenation is rebuilt when files change, so you can view changes as you make them. GitHub Repo Settings for gh-pages In order for the documentation process to work the repo needs to be configured for gh-pages. Under Settings -> Pages, the site should be built from gh-pages / (root) It may be necessary to do an initial deploy to create the branch if it does not already exist. If there is already a deployment, you might have to first change the source to none, and after the gh-pages branch is created set the pages source to the gh-pages branch.","title":"Build and publish documentation"},{"location":"developer/CONTRIBUTING/","text":"Contributing In General Our project welcomes external contributions. If you have an itch, please feel free to scratch it. To contribute code or documentation, please submit a pull request . A good way to familiarize yourself with the codebase and contribution process is to look for and tackle low-hanging fruit in the issue tracker . Before embarking on a more ambitious contribution, please communicate with us. We appreciate your effort, and want to avoid a situation where a contribution requires extensive rework (by you or by us), sits in backlog for a long time, or cannot be accepted at all! Proposing new features If you would like to implement a new feature, please raise an issue before sending a pull request so the feature can be discussed. This is to avoid you wasting your valuable time working on a feature that the project developers are not interested in accepting into the code base. Fixing bugs If you would like to fix a bug, please raise an issue before sending a pull request so it can be tracked. Merge approval The project maintainers use LGTM (Looks Good To Me) in comments on the code review to indicate acceptance. A change requires LGTMs from two of the maintainers of each component affected. Legal Each source file must include a license header for the Apache Software License 2.0. We have tried to make it as easy as possible to make contributions. This applies to how we handle the legal aspects of contribution. We use the same approach - the Developer's Certificate of Origin 1.1 (DCO) - that the Linux\u00ae Kernel community uses to manage code contributions. We simply ask that when submitting a patch for review, the developer must include a sign-off statement in the commit message. Here is an example Signed-off-by line, which indicates that the submitter accepts the DCO: Signed-off-by: John Doe <john.doe@example.com> You can include this automatically when you commit a change to your local git repository using the following command: git commit -s Communication Connect with us by opening an issue . Coding style guidelines This project makes use of several coding conventions and tools. Formatting The project is formatted using Black . New code should continue to follow this formatter. The formatter is able to automatically format an entire source tree, however we do not have that feature included in the build. Please format before a pull request. Static code checking The project uses a combination of flake8, pylint, and mypy to detect static code problems. The configuration is defined in setup.cfg . These checks can be run as a build task (this will also run unit tests). ./gradlew checkSource When making a pull request, all warnings and errors should be resolved. When a warning can be safely ignored, a 'disabling' comment should be added to the line of code that causes the problem. (This will prevent the warning from being reported by checkSource). An alternative is to modify setup.cfg so that a warning is not generated. An example of this would be to add an additional 'good-name' so that non-standard variable names are not flagged. Unit tests Unit tests and Doc tests are run as part of the build process. New function should include additional tests. The existing tests have great examples of how to test the NLP function. The guideline is described here Tests can be executed with the build command ./gradlew test Documentation When significant new function is added, the documentation should also be updated. Our documentation is built using mkdocs. The gh-pages environment is disabled for the repo A github action (build-docs.yml) builds the documentation and deploys to the gh-pages branch. This happens (on-demand), or after a push to the main branch, where files have changed under docs. Because helm charts are deployed using the docs infrastructure, pushes to main will (usually) rebuild documentation. Repo should be configured so that pages is loaded from gh-pages (root directory). On initial creation of the repo, you might need to have pages disabled, release, and then set pages to use gh-pages as a source. (The .nojekyll prevents problems with the default github build) Testing documentation locally can be accomplished by: pip install --upgrade pip && pip install mkdocs mkdocs-gen-files pymdown-extensions mkdocs serve The service will watch for markdown files and automatically rebuild The file mkdocs.yml in the root directory of the project contains config for theme, plugins, and nav bar. The theme that we use supports only two levels of nesting in the nav bar. Your pull request will be denied if any local links in the documentation are invalid. Continuous Integration This project uses GitHub actions to build and push the docker image as part of a pull request. You must pull from a branch, a pull request from a fork is not supported. The workaround is to first merge your changes into a branch of the target repo, and then make the pull request from the branch. The CI pipeline will take care of building and pushing the docker image, and managing releases.","title":"Contributing"},{"location":"developer/CONTRIBUTING/#contributing-in-general","text":"Our project welcomes external contributions. If you have an itch, please feel free to scratch it. To contribute code or documentation, please submit a pull request . A good way to familiarize yourself with the codebase and contribution process is to look for and tackle low-hanging fruit in the issue tracker . Before embarking on a more ambitious contribution, please communicate with us. We appreciate your effort, and want to avoid a situation where a contribution requires extensive rework (by you or by us), sits in backlog for a long time, or cannot be accepted at all!","title":"Contributing In General"},{"location":"developer/CONTRIBUTING/#proposing-new-features","text":"If you would like to implement a new feature, please raise an issue before sending a pull request so the feature can be discussed. This is to avoid you wasting your valuable time working on a feature that the project developers are not interested in accepting into the code base.","title":"Proposing new features"},{"location":"developer/CONTRIBUTING/#fixing-bugs","text":"If you would like to fix a bug, please raise an issue before sending a pull request so it can be tracked.","title":"Fixing bugs"},{"location":"developer/CONTRIBUTING/#merge-approval","text":"The project maintainers use LGTM (Looks Good To Me) in comments on the code review to indicate acceptance. A change requires LGTMs from two of the maintainers of each component affected.","title":"Merge approval"},{"location":"developer/CONTRIBUTING/#legal","text":"Each source file must include a license header for the Apache Software License 2.0. We have tried to make it as easy as possible to make contributions. This applies to how we handle the legal aspects of contribution. We use the same approach - the Developer's Certificate of Origin 1.1 (DCO) - that the Linux\u00ae Kernel community uses to manage code contributions. We simply ask that when submitting a patch for review, the developer must include a sign-off statement in the commit message. Here is an example Signed-off-by line, which indicates that the submitter accepts the DCO: Signed-off-by: John Doe <john.doe@example.com> You can include this automatically when you commit a change to your local git repository using the following command: git commit -s","title":"Legal"},{"location":"developer/CONTRIBUTING/#communication","text":"Connect with us by opening an issue .","title":"Communication"},{"location":"developer/CONTRIBUTING/#coding-style-guidelines","text":"This project makes use of several coding conventions and tools.","title":"Coding style guidelines"},{"location":"developer/CONTRIBUTING/#formatting","text":"The project is formatted using Black . New code should continue to follow this formatter. The formatter is able to automatically format an entire source tree, however we do not have that feature included in the build. Please format before a pull request.","title":"Formatting"},{"location":"developer/CONTRIBUTING/#static-code-checking","text":"The project uses a combination of flake8, pylint, and mypy to detect static code problems. The configuration is defined in setup.cfg . These checks can be run as a build task (this will also run unit tests). ./gradlew checkSource When making a pull request, all warnings and errors should be resolved. When a warning can be safely ignored, a 'disabling' comment should be added to the line of code that causes the problem. (This will prevent the warning from being reported by checkSource). An alternative is to modify setup.cfg so that a warning is not generated. An example of this would be to add an additional 'good-name' so that non-standard variable names are not flagged.","title":"Static code checking"},{"location":"developer/CONTRIBUTING/#unit-tests","text":"Unit tests and Doc tests are run as part of the build process. New function should include additional tests. The existing tests have great examples of how to test the NLP function. The guideline is described here Tests can be executed with the build command ./gradlew test","title":"Unit tests"},{"location":"developer/CONTRIBUTING/#documentation","text":"When significant new function is added, the documentation should also be updated. Our documentation is built using mkdocs. The gh-pages environment is disabled for the repo A github action (build-docs.yml) builds the documentation and deploys to the gh-pages branch. This happens (on-demand), or after a push to the main branch, where files have changed under docs. Because helm charts are deployed using the docs infrastructure, pushes to main will (usually) rebuild documentation. Repo should be configured so that pages is loaded from gh-pages (root directory). On initial creation of the repo, you might need to have pages disabled, release, and then set pages to use gh-pages as a source. (The .nojekyll prevents problems with the default github build) Testing documentation locally can be accomplished by: pip install --upgrade pip && pip install mkdocs mkdocs-gen-files pymdown-extensions mkdocs serve The service will watch for markdown files and automatically rebuild The file mkdocs.yml in the root directory of the project contains config for theme, plugins, and nav bar. The theme that we use supports only two levels of nesting in the nav bar. Your pull request will be denied if any local links in the documentation are invalid.","title":"Documentation"},{"location":"developer/CONTRIBUTING/#continuous-integration","text":"This project uses GitHub actions to build and push the docker image as part of a pull request. You must pull from a branch, a pull request from a fork is not supported. The workaround is to first merge your changes into a branch of the target repo, and then make the pull request from the branch. The CI pipeline will take care of building and pushing the docker image, and managing releases.","title":"Continuous Integration"},{"location":"developer/Unit_Tests/","text":"Unit tests New contributions should include unit tests that test the behavior of the new function. Types of unit tests This project uses two industry standard test frameworks. Examples contained within Python docstrings are written and tested using Doctest . Behaviors of nlp-insights are tested using pytest . Running tests The Gradle build for the project will run unit tests before creating the docker image, or tests can be run directly by executing ./gradlew test (Linux) or /gradlew.bat test (Windows). IDE Test Runners All Python IDEs support running unit tests, and most allow the developer to choose which test runner to use. For example, you can setup Eclipse to use the Py.test runner. This runner is equivalent to the pytest tool that Gradle uses, and allows tests to be run under debug, which can be very valuable. The Py.test runner will not run doc tests. If you want to run doctests from within Eclipse, you can configure a launcher to run the \"test_documentation\" test using the pyDev runner. The test_documentation.py module exists in the package src/test/py/test_nlp_insights . The testcase will run doctests as unit tests ONLY when using a unittest like (not py.test) runner. The Pytest runner does not understand the mechanism that is used to load/create doctests as a unit test, and will not use this testcase. The Gradle build executes doctest directly, and does not use the test_documentation module. Coverage When the Gradle build runs unit tests, a coverage report is output to ./build/reports/coverage/index.html. This report is also supplied as a build artifact when pushes are made to any branch (other than main) of the git repo. The coverage report provides insight into areas of source code that are covered by unit tests. It does not include the coverage of doc tests. The report should be used during code reviews to assess the test coverage of new function. The build does not require a specific percent of coverage to be considered a successful build. Adding tests for NLP function Being able to quickly test NLP related function is very important for rapid/agile development. The test pattern used by our tests enables fast development by: Mocking an NLP Serivce (Such as ACD or QuickUMLS) Using a Flask test_client to submit (mock) REST requests to the nlp-insights service and retrieve a response. Asserting that the response from the nlp-insights service matches the expected response. Mocking an NLP Service The pattern is to replace (in the global application) the built-in class for the NLP service that we want to mock with a class derived from the built-in. Instead of making a REST request to the NLP service, the derived class will load the NLP responses from a JSON file. The class replacement happens in the setUp method of the test. After the NLP service class is replaced by the test setup, tests can issue (mock) REST requests to nlp-insights to configure the NLP service, followed by discovery of insights. The mock NLP service will be used in place of the built-in. Because the mock service is derived from the built-in, the code flow is as close to identical as possible. Mock NLP service response file When a mock NLP service is constructed, a path to a json file is supplied. The keys of the json file are unstructured text strings that would ordinally be sent to the 'real' NLP service. The values associated with those keys are json objects that will be the response of the mock NLP service. For example the following file instructs the mock service to return an empty object when it is sent \"amoxicillin allergy\" or \"peanut allergy\" for processing. In practice we need to use the JSON object returned by ACD for those strings, rather than empty dictionary. { \"amoxicillin allergy\": {}, \"peanut allergy\" : {} } The keys in the mock file must exactly match the text sent to the mock NLP service. (case sensitive, and including any adjustment text). Assert that the response matches the expected output Responses from the mock service are compared to the expected result using the test_nlp_insights.util.compare_actual_to_expected method. The method takes the expected_path and actual_resource as parameters. The expected path is usually computed using expected_output_path() which will return a value of test/resources/expected_results/<class-name>/<test-name>.json . If the expected result file does not exist, then compare_acutal_to_expected will create the file from the actual results and the test will pass. You can test your code quickly by writing a new unit test; the test will create the expected result file on its first run using the actual results. Once the result file has been verified to be correct, it can be checked into Git with the test. All future test runs will then assert that the test continues to produce the expected result. If an intended code change impacts one or more expected results, simply delete the impacted result files and re-run the unit tests. The expected results will be recreated with the new behavior. Once verified as correct, the updated expected result files can be checked into Git along with the code changes. Example test case It is usually simple to add a new test method to an existing test class, however this an example of how to build such a class from scratch. import importlib from fhir.resources.bundle import Bundle from nlp_insights import app # (1) from test_nlp_insights.util import unstructured_text # (2) from test_nlp_insights.util.compare import compare_actual_to_expected from test_nlp_insights.util.fhir import ( # (3) make_docref_report, make_attachment, make_bundle, make_patient_reference, ) from test_nlp_insights.util.mock_service import ( # (4) make_mock_acd_service_class, configure_acd, make_mock_quick_umls_service_class, configure_quick_umls, ) from test_nlp_insights.util.resources import UnitTestUsingExternalResource class TestClassWithMockACD(UnitTestUsingExternalResource): # (5) \"\"\"Example class that mocks ACD service by loading responses from ResponseFile.json\"\"\" def setUp(self) -> None: # The application (app) is defined globally in the module, \"reload\" # is a (dubious) way of reseting the application state between # test cases. It should work \"well-enough\" in most cases. importlib.reload(app) # This method call replaces the built in handler for the \"acd\" # nlpServiceType with a mock instance that instead of making a # REST request to an ACD service, loads ACD responses from json. app.config.set_mock_nlp_service_class( \"acd\", make_mock_acd_service_class( self.resource_path + \"/acd/TestReportResponses.json\" ), ) def test_when_something_then_expected_result(self): # First build a Bundle resource that we will send to nlp-insights # The text defined in TEXT_FOR_MULTIPLE_CONDITIONS must be a key # in {self.resource_path}/acd/TestReportResponses.json, # with the value of that key being the expected ACD response. bundle = make_bundle( [ make_docref_report( subject=make_patient_reference(), attachments=[ make_attachment( unstructured_text.TEXT_FOR_MULTIPLE_CONDITIONS ) ], ) ] ) with app.app.test_client() as service: # (6) # configure_acd is a helper method to: # Create config definition for ACD (7) # Set default NLP to ACD (8) configure_acd(service) # This is the call to discoverInsights that needs to be # tested. insight_resp = service.post(\"/discoverInsights\", data=bundle.json()) self.assertEqual(200, insight_resp.status_code) # Validate the results are as expected actual_bundle = Bundle.parse_obj(insight_resp.get_json()) # (9) # This compare is json aware. The order of keys does not # matter. If the expected results file does not exist, # The results from the service are written to file and # the test will pass. The result file should be verified # as part of the review process. cmp = compare_actual_to_expected( expected_path=self.expected_output_path(), # (10) actual_resource=actual_bundle, ) self.assertFalse(cmp, cmp.pretty()) The root application is nlp_insights.app.app ( app is in the app package), The application is a global singleton, we don't use Flask blueprints. The app package contains functions for working with that global app. test_nlp_insights.util.unstructured_text defines constants for text that will be used for source text in reports. Functions in test_nlp_insights.util.fhir make it easier to construct a bundle of FHIR resources to send to nlp-insights. Functions for creating mock ACD and QuickUmls services are in the test_nlp_insights.util.mock_service package. The UnitTestUsingExternalResource parent class defines the directory where resource files exist. It also defines where the expected output files for tests are stored and what their names are. (The name is computed from the testcase method). with app.app.test_client() as service makes serive a test_client that we can send mock REST requests to. Creating a config definition for ACD is implemented as: rsp = service.post(\"/config/definition\", json={ \"name\": \"acdconfig1\", \"nlpServiceType\": \"acd\", \"config\": { \"apikey\": \"**un-needed**\", \"endpoint\": \"https://none.org\", \"flow\": \"not_used\", }, }, ) if rsp.status_code not in (200, 204): raise RuntimeError() Setting the default NLP to ACD is implemented as: rsp = service.post(f\"/config/setDefault?name=acdconfig1\") if rsp.status_code not in (200, 204): raise RuntimeError() Parsing the response from nlp-insights has found errors in the past. For example the service could construct a condition without a subject. This would fail even the very limited FHIR validation that happens with the parse that is used here. The expected path is calculated from the testcase name and class name. e.g. test/resources/expected_results/TestClassWithMockACD/test_when_something_then_expected_result.json Error reporting If a compare fails, an explanation of what the difference was appears in the message. The information includes the path from the root of the json document to the difference, and the changed values. values_changed at path root['entry'][1]['resource']['code']['coding'][0]['code'] EXPECTED=C0027051 ACTUAL =<something-else>","title":"Unit Tests"},{"location":"developer/Unit_Tests/#unit-tests","text":"New contributions should include unit tests that test the behavior of the new function.","title":"Unit tests"},{"location":"developer/Unit_Tests/#types-of-unit-tests","text":"This project uses two industry standard test frameworks. Examples contained within Python docstrings are written and tested using Doctest . Behaviors of nlp-insights are tested using pytest .","title":"Types of unit tests"},{"location":"developer/Unit_Tests/#running-tests","text":"The Gradle build for the project will run unit tests before creating the docker image, or tests can be run directly by executing ./gradlew test (Linux) or /gradlew.bat test (Windows).","title":"Running tests"},{"location":"developer/Unit_Tests/#ide-test-runners","text":"All Python IDEs support running unit tests, and most allow the developer to choose which test runner to use. For example, you can setup Eclipse to use the Py.test runner. This runner is equivalent to the pytest tool that Gradle uses, and allows tests to be run under debug, which can be very valuable. The Py.test runner will not run doc tests. If you want to run doctests from within Eclipse, you can configure a launcher to run the \"test_documentation\" test using the pyDev runner. The test_documentation.py module exists in the package src/test/py/test_nlp_insights . The testcase will run doctests as unit tests ONLY when using a unittest like (not py.test) runner. The Pytest runner does not understand the mechanism that is used to load/create doctests as a unit test, and will not use this testcase. The Gradle build executes doctest directly, and does not use the test_documentation module.","title":"IDE Test Runners"},{"location":"developer/Unit_Tests/#coverage","text":"When the Gradle build runs unit tests, a coverage report is output to ./build/reports/coverage/index.html. This report is also supplied as a build artifact when pushes are made to any branch (other than main) of the git repo. The coverage report provides insight into areas of source code that are covered by unit tests. It does not include the coverage of doc tests. The report should be used during code reviews to assess the test coverage of new function. The build does not require a specific percent of coverage to be considered a successful build.","title":"Coverage"},{"location":"developer/Unit_Tests/#adding-tests-for-nlp-function","text":"Being able to quickly test NLP related function is very important for rapid/agile development. The test pattern used by our tests enables fast development by: Mocking an NLP Serivce (Such as ACD or QuickUMLS) Using a Flask test_client to submit (mock) REST requests to the nlp-insights service and retrieve a response. Asserting that the response from the nlp-insights service matches the expected response.","title":"Adding tests for NLP function"},{"location":"developer/Unit_Tests/#mocking-an-nlp-service","text":"The pattern is to replace (in the global application) the built-in class for the NLP service that we want to mock with a class derived from the built-in. Instead of making a REST request to the NLP service, the derived class will load the NLP responses from a JSON file. The class replacement happens in the setUp method of the test. After the NLP service class is replaced by the test setup, tests can issue (mock) REST requests to nlp-insights to configure the NLP service, followed by discovery of insights. The mock NLP service will be used in place of the built-in. Because the mock service is derived from the built-in, the code flow is as close to identical as possible.","title":"Mocking an NLP Service"},{"location":"developer/Unit_Tests/#mock-nlp-service-response-file","text":"When a mock NLP service is constructed, a path to a json file is supplied. The keys of the json file are unstructured text strings that would ordinally be sent to the 'real' NLP service. The values associated with those keys are json objects that will be the response of the mock NLP service. For example the following file instructs the mock service to return an empty object when it is sent \"amoxicillin allergy\" or \"peanut allergy\" for processing. In practice we need to use the JSON object returned by ACD for those strings, rather than empty dictionary. { \"amoxicillin allergy\": {}, \"peanut allergy\" : {} } The keys in the mock file must exactly match the text sent to the mock NLP service. (case sensitive, and including any adjustment text).","title":"Mock NLP service response file"},{"location":"developer/Unit_Tests/#assert-that-the-response-matches-the-expected-output","text":"Responses from the mock service are compared to the expected result using the test_nlp_insights.util.compare_actual_to_expected method. The method takes the expected_path and actual_resource as parameters. The expected path is usually computed using expected_output_path() which will return a value of test/resources/expected_results/<class-name>/<test-name>.json . If the expected result file does not exist, then compare_acutal_to_expected will create the file from the actual results and the test will pass. You can test your code quickly by writing a new unit test; the test will create the expected result file on its first run using the actual results. Once the result file has been verified to be correct, it can be checked into Git with the test. All future test runs will then assert that the test continues to produce the expected result. If an intended code change impacts one or more expected results, simply delete the impacted result files and re-run the unit tests. The expected results will be recreated with the new behavior. Once verified as correct, the updated expected result files can be checked into Git along with the code changes.","title":"Assert that the response matches the expected output"},{"location":"developer/Unit_Tests/#example-test-case","text":"It is usually simple to add a new test method to an existing test class, however this an example of how to build such a class from scratch. import importlib from fhir.resources.bundle import Bundle from nlp_insights import app # (1) from test_nlp_insights.util import unstructured_text # (2) from test_nlp_insights.util.compare import compare_actual_to_expected from test_nlp_insights.util.fhir import ( # (3) make_docref_report, make_attachment, make_bundle, make_patient_reference, ) from test_nlp_insights.util.mock_service import ( # (4) make_mock_acd_service_class, configure_acd, make_mock_quick_umls_service_class, configure_quick_umls, ) from test_nlp_insights.util.resources import UnitTestUsingExternalResource class TestClassWithMockACD(UnitTestUsingExternalResource): # (5) \"\"\"Example class that mocks ACD service by loading responses from ResponseFile.json\"\"\" def setUp(self) -> None: # The application (app) is defined globally in the module, \"reload\" # is a (dubious) way of reseting the application state between # test cases. It should work \"well-enough\" in most cases. importlib.reload(app) # This method call replaces the built in handler for the \"acd\" # nlpServiceType with a mock instance that instead of making a # REST request to an ACD service, loads ACD responses from json. app.config.set_mock_nlp_service_class( \"acd\", make_mock_acd_service_class( self.resource_path + \"/acd/TestReportResponses.json\" ), ) def test_when_something_then_expected_result(self): # First build a Bundle resource that we will send to nlp-insights # The text defined in TEXT_FOR_MULTIPLE_CONDITIONS must be a key # in {self.resource_path}/acd/TestReportResponses.json, # with the value of that key being the expected ACD response. bundle = make_bundle( [ make_docref_report( subject=make_patient_reference(), attachments=[ make_attachment( unstructured_text.TEXT_FOR_MULTIPLE_CONDITIONS ) ], ) ] ) with app.app.test_client() as service: # (6) # configure_acd is a helper method to: # Create config definition for ACD (7) # Set default NLP to ACD (8) configure_acd(service) # This is the call to discoverInsights that needs to be # tested. insight_resp = service.post(\"/discoverInsights\", data=bundle.json()) self.assertEqual(200, insight_resp.status_code) # Validate the results are as expected actual_bundle = Bundle.parse_obj(insight_resp.get_json()) # (9) # This compare is json aware. The order of keys does not # matter. If the expected results file does not exist, # The results from the service are written to file and # the test will pass. The result file should be verified # as part of the review process. cmp = compare_actual_to_expected( expected_path=self.expected_output_path(), # (10) actual_resource=actual_bundle, ) self.assertFalse(cmp, cmp.pretty()) The root application is nlp_insights.app.app ( app is in the app package), The application is a global singleton, we don't use Flask blueprints. The app package contains functions for working with that global app. test_nlp_insights.util.unstructured_text defines constants for text that will be used for source text in reports. Functions in test_nlp_insights.util.fhir make it easier to construct a bundle of FHIR resources to send to nlp-insights. Functions for creating mock ACD and QuickUmls services are in the test_nlp_insights.util.mock_service package. The UnitTestUsingExternalResource parent class defines the directory where resource files exist. It also defines where the expected output files for tests are stored and what their names are. (The name is computed from the testcase method). with app.app.test_client() as service makes serive a test_client that we can send mock REST requests to. Creating a config definition for ACD is implemented as: rsp = service.post(\"/config/definition\", json={ \"name\": \"acdconfig1\", \"nlpServiceType\": \"acd\", \"config\": { \"apikey\": \"**un-needed**\", \"endpoint\": \"https://none.org\", \"flow\": \"not_used\", }, }, ) if rsp.status_code not in (200, 204): raise RuntimeError() Setting the default NLP to ACD is implemented as: rsp = service.post(f\"/config/setDefault?name=acdconfig1\") if rsp.status_code not in (200, 204): raise RuntimeError() Parsing the response from nlp-insights has found errors in the past. For example the service could construct a condition without a subject. This would fail even the very limited FHIR validation that happens with the parse that is used here. The expected path is calculated from the testcase name and class name. e.g. test/resources/expected_results/TestClassWithMockACD/test_when_something_then_expected_result.json","title":"Example test case"},{"location":"developer/Unit_Tests/#error-reporting","text":"If a compare fails, an explanation of what the difference was appears in the message. The information includes the path from the root of the json document to the difference, and the changed values. values_changed at path root['entry'][1]['resource']['code']['coding'][0]['code'] EXPECTED=C0027051 ACTUAL =<something-else>","title":"Error reporting"},{"location":"developer/gradle_tasks/","text":"Gradle Tasks In the root directory of the project repo, there are two wrapper commands for executing gradle tasks. gradlew (linux) gradlew.bat (windows) These commands will download (if necessary) the correct version of gradle for you and use it for task execution. Tasks always run dependent tasks, so for example a 'test' task will also build the python wheel before running unit tests on the wheel. A dockerRun task will first execute the docker task to build the docker image, unless the image is current. A summary of the most useful tasks is included here. Type Task Description General tasks list tasks and include descriptions Build clean deletes build artifacts install builds a python wheel and installs it to the build's virtual environment. Docker docker builds a docker image dockerRun starts a docker container for the nlp-insights service dockerPush pushes the docker image to a container repository dockerStop stops the container if it is running dockerRemoveContainer removes the container from the registery Quality checkSource runs unit tests, doc tests and linters test runs unit tests and doc tests The gradle.properties file defines default build properties. Most of these will not need to change, however the version number will be updated and is used for: * Component of the docker image tag. (The tag corresponds to the version used for the helm charts in values.yaml ) * Version of the python wheel (Currently the wheel is not published anywhere)","title":"Gradle Tasks"},{"location":"developer/gradle_tasks/#gradle-tasks","text":"In the root directory of the project repo, there are two wrapper commands for executing gradle tasks. gradlew (linux) gradlew.bat (windows) These commands will download (if necessary) the correct version of gradle for you and use it for task execution. Tasks always run dependent tasks, so for example a 'test' task will also build the python wheel before running unit tests on the wheel. A dockerRun task will first execute the docker task to build the docker image, unless the image is current. A summary of the most useful tasks is included here. Type Task Description General tasks list tasks and include descriptions Build clean deletes build artifacts install builds a python wheel and installs it to the build's virtual environment. Docker docker builds a docker image dockerRun starts a docker container for the nlp-insights service dockerPush pushes the docker image to a container repository dockerStop stops the container if it is running dockerRemoveContainer removes the container from the registery Quality checkSource runs unit tests, doc tests and linters test runs unit tests and doc tests The gradle.properties file defines default build properties. Most of these will not need to change, however the version number will be updated and is used for: * Component of the docker image tag. (The tag corresponds to the version used for the helm charts in values.yaml ) * Version of the python wheel (Currently the wheel is not published anywhere)","title":"Gradle Tasks"},{"location":"developer/run_service_no_docker/","text":"Running the service outside of a docker container It is recommended that the service be deployed as a docker container, following the instructions here . However you can run it outside of docker if you need to. Build and install nlp-insights to a virtual environment ./gradlew install Switch to the virtual env where nlp-insights is installed source ./build/venv/bin/activate Set the FLASK_APP environment variable to the installed package export FLASK_APP=nlp_insights.app Start the service (5000 is the default port, however this value can be changed to suit your needs) python -m flask run --port=5000","title":"Run service without docker"},{"location":"developer/run_service_no_docker/#running-the-service-outside-of-a-docker-container","text":"It is recommended that the service be deployed as a docker container, following the instructions here . However you can run it outside of docker if you need to. Build and install nlp-insights to a virtual environment ./gradlew install Switch to the virtual env where nlp-insights is installed source ./build/venv/bin/activate Set the FLASK_APP environment variable to the installed package export FLASK_APP=nlp_insights.app Start the service (5000 is the default port, however this value can be changed to suit your needs) python -m flask run --port=5000","title":"Running the service outside of a docker container"},{"location":"examples/acd/acd_tutorial/","text":"Using nlp-insights with IBM Watson Annotator for Clinical Data The IBM Watson Annotator for Clinical Data (ACD) service is a medical domain NLP service featuring a variety of annotators. More information is available here . The nlp-insights service has been designed to leverage ACD capabilities NLP when deriving new FHIR resources, or enriching an existing resource. Prereqs You must have access to an ACD service to complete this tutorial. You can view plans (including a free trial plan) here . Start the nlp-insights service If the nlp-insights service has not been started, start the service in a local container by following the instructions here . Configure nlp-insights to use ACD for NLP The nlp-insights service must be configured to use ACD prior to using the service to obtain insights. The steps to configure the service are described here . Enrich FHIR resources with additional codings The nlp-insights service can use ACD to derive additional coding values in FHIR resources. Learn how here Derive new FHIR resources from unstructured content The nlp-insights service can use ACD to derive new FHIR resources from clinical notes embedded in other FHIR resources. Learn how here Context awareness When nlp-insights is configured to use ACD, the nlp-insights service will take advantage of ACD attributes to determine the context of concepts. This avoids creating resources for the patient that are not correct. See the details here FHIR Integration The nlp-insights service is designed to enrich a bundle prior to posting that bundle to a FHIR server. Learn how to to work with derived data that is stored in a FHIR server here You will need a viewer for jupyter-notebooks to view the tutorial.","title":"Overview"},{"location":"examples/acd/acd_tutorial/#using-nlp-insights-with-ibm-watson-annotator-for-clinical-data","text":"The IBM Watson Annotator for Clinical Data (ACD) service is a medical domain NLP service featuring a variety of annotators. More information is available here . The nlp-insights service has been designed to leverage ACD capabilities NLP when deriving new FHIR resources, or enriching an existing resource.","title":"Using nlp-insights with IBM Watson Annotator for Clinical Data"},{"location":"examples/acd/acd_tutorial/#prereqs","text":"You must have access to an ACD service to complete this tutorial. You can view plans (including a free trial plan) here .","title":"Prereqs"},{"location":"examples/acd/acd_tutorial/#start-the-nlp-insights-service","text":"If the nlp-insights service has not been started, start the service in a local container by following the instructions here .","title":"Start the nlp-insights service"},{"location":"examples/acd/acd_tutorial/#configure-nlp-insights-to-use-acd-for-nlp","text":"The nlp-insights service must be configured to use ACD prior to using the service to obtain insights. The steps to configure the service are described here .","title":"Configure nlp-insights to use ACD for NLP"},{"location":"examples/acd/acd_tutorial/#enrich-fhir-resources-with-additional-codings","text":"The nlp-insights service can use ACD to derive additional coding values in FHIR resources. Learn how here","title":"Enrich FHIR resources with additional codings"},{"location":"examples/acd/acd_tutorial/#derive-new-fhir-resources-from-unstructured-content","text":"The nlp-insights service can use ACD to derive new FHIR resources from clinical notes embedded in other FHIR resources. Learn how here","title":"Derive new FHIR resources from unstructured content"},{"location":"examples/acd/acd_tutorial/#context-awareness","text":"When nlp-insights is configured to use ACD, the nlp-insights service will take advantage of ACD attributes to determine the context of concepts. This avoids creating resources for the patient that are not correct. See the details here","title":"Context awareness"},{"location":"examples/acd/acd_tutorial/#fhir-integration","text":"The nlp-insights service is designed to enrich a bundle prior to posting that bundle to a FHIR server. Learn how to to work with derived data that is stored in a FHIR server here You will need a viewer for jupyter-notebooks to view the tutorial.","title":"FHIR Integration"},{"location":"examples/acd/adverse_event/","text":"Adverse Events When the nlp-insights service is configured to use ACD for NLP processing, the service will discover AdverseEvent FHIR resources . Within the FHIR standard, an adverse event is the result of an intervention that caused unintentional harm to a specific subject or group of subjects. The nlp-insights service will detect adverse events that are medication related, such as a drug interaction. The FHIR standard states that an AdverseEvent resource should not be used when a more specific resource exists . This means that the adverse event should not be discovered for an allergic reaction to a medication, since FHIR defines an AllergyIntolerance resource that is more specific. The differentiation of an adverse event from other FHIR concepts such as allergies requires an advanced NLP engine such as ACD, since more language awareness is required than simple pattern matching can provide. Adverse events are characterized by the need to capture cause and effect, in addition to actuality, severity and outcome. The nlp-insights service currently limits discovery to the detection of medication related adverse events. There is no support for creating cause/effect/outcome relationships with other resources that represent characteristics of the event. Standard codes such as SNOMED CT and MedDRA are NOT included in the created AdverseEvent FHIR resource. While detection is a significant step forward, further contributions to this feature will be needed when more ACD support becomes available. The capabilities of the nlp-insights service are best explained using an example. Before using the nlp-insights service, it must be started and configured for ACD. If the nlp-insights service has not been started and configured to use ACD, follow the steps here . Derive insights from a diagnostic report that describes an adverse event Adverse Events are very challenging for NLP to recognize because they involve multiple concepts, temporal relationships and causality. This example is typical; There is no single concept or span of text that indicates an Adverse Event happened. B64_REPORT_TEXT=$(echo \"\\ The patient's course was also complicated by mental status \\ changes secondary to a combination of his narcotics and Neurontin, \\ which had been given for his trigeminal neuralgia and chronic pain. \\ The Neurontin was stopped and he received hemodialysis on consecutive days.\\ \" | base64 -w 0) The diagnostic report is built and sent to the nlp-insights service for insight discovery. The returned resources are stored in a json file for future analysis. (The report text has alredy been converted to base64 encoding, so that it can be attached to a diagnostic report). curl -w \"\\n%{http_code}\\n\" -s -o /tmp/output.json -XPOST localhost:5000/discoverInsights -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"resourceType\": \"Bundle\", \"id\": \"abc\", \"type\": \"transaction\", \"entry\": [ { \"resource\": { \"id\": \"abcefg-1234567890\", \"status\": \"final\", \"code\": { \"text\": \"Chief complaint Narrative - Reported\" }, \"presentedForm\": [ { \"contentType\": \"text\", \"language\": \"en\", \"data\": \"$B64_REPORT_TEXT\", \"title\": \"ER VISIT\", \"creation\": \"2020-08-02T12:44:55+08:00\" } ], \"resourceType\": \"DiagnosticReport\" }, \"request\": { \"method\": \"POST\", \"url\": \"DiagnosticReport\" } } ] } EOF Adverse Event Resources In addition to two conditions and a medication statement, the nlp-insights service has discovered adverse events associated with \"narcotics\" and \"neurontin\". Resource Type Description DiagnosticReport Chief complaint Narrative - Reported Condition trigeminal neuralgia Condition chronic pain MedicationStatement Neurontin AdverseEvent narcotics AdverseEvent neurontin The complete json for the two Adverse Events are included here, with the highlights being discussed in the next sections. Adverse Event resource for \"narcotics\" { \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"a129d489aea84c37b7377201e70cd416fe2b26ce3dc1d29f250fdfa1\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"AdverseEvent\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:7fbcf71d-44fe-466e-b8d1-bc51cedf000b\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"DiagnosticReport.presentedForm[0].data\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"eyJhdHRyaWJ1dGVWYWx1ZXMiOiBbeyJiZWdpbiI6IDEwNCwgImVuZCI6IDExMywgImNvdmVyZWRUZXh0IjogIm5hcmNvdGljcyIsICJuZWdhdGVkIjogZmFsc2UsICJwcmVmZXJyZWROYW1lIjogIm5hcmNvdGljcyIsICJ2YWx1ZXMiOiBbeyJ2YWx1ZSI6ICJuYXJjb3RpY3MifV0sICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBBdHRyaWJ1dGVzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJjb25jZXB0IjogeyJ1aWQiOiA4fSwgIm5hbWUiOiAiTWVkaWNhdGlvbkFkdmVyc2VFdmVudCIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIlZBTElEIn0sICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJtZWRpY2F0aW9uIjogeyJ1c2FnZSI6IHsidGFrZW5TY29yZSI6IDEuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMCwgImxhYk1lYXN1cmVtZW50U2NvcmUiOiAwLjB9LCAic3RhcnRlZEV2ZW50IjogeyJzY29yZSI6IDAuOTgyLCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAxLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgImRvc2VDaGFuZ2VkRXZlbnQiOiB7InNjb3JlIjogMC4wMDEsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19LCAic3RvcHBlZEV2ZW50IjogeyJzY29yZSI6IDAuMDAxLCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgImFkdmVyc2VFdmVudCI6IHsic2NvcmUiOiAwLjk5OSwgImFsbGVyZ3lTY29yZSI6IDAuMCwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDEuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX19fX0sIHsiYmVnaW4iOiAxMTgsICJlbmQiOiAxMjcsICJjb3ZlcmVkVGV4dCI6ICJOZXVyb250aW4iLCAibmVnYXRlZCI6IGZhbHNlLCAicHJlZmVycmVkTmFtZSI6ICJuZXVyb250aW4iLCAidmFsdWVzIjogW3sidmFsdWUiOiAibmV1cm9udGluIn1dLCAic291cmNlIjogIkNsaW5pY2FsIEluc2lnaHRzIC0gQXR0cmlidXRlcyIsICJzb3VyY2VWZXJzaW9uIjogInYxLjAiLCAiY29uY2VwdCI6IHsidWlkIjogOX0sICJuYW1lIjogIk1lZGljYXRpb25BZHZlcnNlRXZlbnQiLCAicnhOb3JtSWQiOiAiMTk2NDk4IiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgImluc2lnaHRNb2RlbERhdGEiOiB7Im1lZGljYXRpb24iOiB7InVzYWdlIjogeyJ0YWtlblNjb3JlIjogMS4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wLCAibGFiTWVhc3VyZW1lbnRTY29yZSI6IDAuMH0sICJzdGFydGVkRXZlbnQiOiB7InNjb3JlIjogMC45OTgsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDEuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19LCAiZG9zZUNoYW5nZWRFdmVudCI6IHsic2NvcmUiOiAwLjAwMiwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX0sICJzdG9wcGVkRXZlbnQiOiB7InNjb3JlIjogMC4wLCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgImFkdmVyc2VFdmVudCI6IHsic2NvcmUiOiAwLjg5MSwgImFsbGVyZ3lTY29yZSI6IDAuMCwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuNjc4LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fX19fSwgeyJiZWdpbiI6IDE2NSwgImVuZCI6IDE4NSwgImNvdmVyZWRUZXh0IjogInRyaWdlbWluYWwgbmV1cmFsZ2lhIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgInByZWZlcnJlZE5hbWUiOiAidHJpZ2VtaW5hbCBuZXVyYWxnaWEiLCAidmFsdWVzIjogW3sidmFsdWUiOiAidHJpZ2VtaW5hbCBuZXVyYWxnaWEifV0sICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBBdHRyaWJ1dGVzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJjb25jZXB0IjogeyJ1aWQiOiAxMH0sICJuYW1lIjogIkRpYWdub3NpcyIsICJpY2Q5Q29kZSI6ICIzNTAuMSIsICJpY2QxMENvZGUiOiAiRzUwLjAiLCAic25vbWVkQ29uY2VwdElkIjogIjMxNjgxMDA1IiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgImluc2lnaHRNb2RlbERhdGEiOiB7ImRpYWdub3NpcyI6IHsidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAxLjAsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfSwgInN1c3BlY3RlZFNjb3JlIjogMC4wLCAic3ltcHRvbVNjb3JlIjogMC4wLCAidHJhdW1hU2NvcmUiOiAwLjAsICJmYW1pbHlIaXN0b3J5U2NvcmUiOiAwLjAwM319LCAiY2NzQ29kZSI6ICI5NSJ9LCB7ImJlZ2luIjogMTkwLCAiZW5kIjogMjAyLCAiY292ZXJlZFRleHQiOiAiY2hyb25pYyBwYWluIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgInByZWZlcnJlZE5hbWUiOiAiY2hyb25pYyBwYWluIiwgInZhbHVlcyI6IFt7InZhbHVlIjogImNocm9uaWMgcGFpbiJ9XSwgInNvdXJjZSI6ICJDbGluaWNhbCBJbnNpZ2h0cyAtIEF0dHJpYnV0ZXMiLCAic291cmNlVmVyc2lvbiI6ICJ2MS4wIiwgImNvbmNlcHQiOiB7InVpZCI6IDExfSwgIm5hbWUiOiAiRGlhZ25vc2lzIiwgImljZDlDb2RlIjogIjMzOC4yOSIsICJpY2QxMENvZGUiOiAiUjUyLjIsUjUyIiwgInNub21lZENvbmNlcHRJZCI6ICI4MjQyMzAwMSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIlZBTElEIn0sICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMS4wLCAicGF0aWVudFJlcG9ydGVkU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMCwgInN5bXB0b21TY29yZSI6IDAuMDIxLCAidHJhdW1hU2NvcmUiOiAwLjAsICJmYW1pbHlIaXN0b3J5U2NvcmUiOiAwLjB9fSwgImNjc0NvZGUiOiAiMjU5In1dLCAiY29uY2VwdHMiOiBbeyJ0eXBlIjogInVtbHMuTWVudGFsT3JCZWhhdmlvcmFsRHlzZnVuY3Rpb24iLCAiYmVnaW4iOiA1MiwgImVuZCI6IDczLCAiY292ZXJlZFRleHQiOiAibWVudGFsIHN0YXR1cyBjaGFuZ2VzIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDg1NjA1NCIsICJwcmVmZXJyZWROYW1lIjogIk1lbnRhbCBTdGF0dXMgQ2hhbmdlIiwgInNlbWFudGljVHlwZSI6ICJtb2JkIiwgInNvdXJjZSI6ICJ1bWxzIiwgInNvdXJjZVZlcnNpb24iOiAiMjAyMEFBIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiTk9fREVDSVNJT04ifSwgIm5jaUNvZGUiOiAiQzE1NzQzNSIsICJsb2luY0lkIjogIkxBNzQ1NS00IiwgInZvY2FicyI6ICJDSFYsTE5DLE5DSSxOQ0lfQ1BUQUMsTVRISUNEOSJ9LCB7InR5cGUiOiAidW1scy5GaW5kaW5nIiwgImJlZ2luIjogODksICJlbmQiOiAxMDAsICJjb3ZlcmVkVGV4dCI6ICJjb21iaW5hdGlvbiIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzM4MTE5MTAiLCAicHJlZmVycmVkTmFtZSI6ICJjb21iaW5hdGlvbiAtIGFuc3dlciB0byBxdWVzdGlvbiIsICJzZW1hbnRpY1R5cGUiOiAiZm5kZyIsICJzb3VyY2UiOiAidW1scyIsICJzb3VyY2VWZXJzaW9uIjogIjIwMjBBQSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIk5PX0RFQ0lTSU9OIn0sICJsb2luY0lkIjogIkxBMTI3MDEtMSIsICJ2b2NhYnMiOiAiTVRILExOQyJ9LCB7InR5cGUiOiAidW1scy5IYXphcmRvdXNPclBvaXNvbm91c1N1YnN0YW5jZSIsICJiZWdpbiI6IDEwNCwgImVuZCI6IDExMywgImNvdmVyZWRUZXh0IjogIm5hcmNvdGljcyIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzAwMjc0MTUiLCAicHJlZmVycmVkTmFtZSI6ICJOYXJjb3RpY3MiLCAic2VtYW50aWNUeXBlIjogImhvcHMiLCAic291cmNlIjogInVtbHMiLCAic291cmNlVmVyc2lvbiI6ICIyMDIwQUEiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJOT19ERUNJU0lPTiJ9LCAibmNpQ29kZSI6ICJDMTUwNiIsICJtZXNoSWQiOiAiTTAwMTQ0ODEiLCAibG9pbmNJZCI6ICJNVEhVMDAzNDcwLExQMTgxNDktMiIsICJ2b2NhYnMiOiAiTENILExOQyxNVEgsQ0hWLENTUCxNU0gsTUVETElORVBMVVMsTENIX05XLE5DSSxOQ0lfTkNJLUdMT1NTIn0sIHsidHlwZSI6ICJ1bWxzLlBoYXJtYWNvbG9naWNTdWJzdGFuY2UiLCAidWlkIjogMiwgImJlZ2luIjogMTA0LCAiZW5kIjogMTEzLCAiY292ZXJlZFRleHQiOiAibmFyY290aWNzIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDAyNzQxNSIsICJwcmVmZXJyZWROYW1lIjogIk5hcmNvdGljcyIsICJzZW1hbnRpY1R5cGUiOiAicGhzdSIsICJzb3VyY2UiOiAidW1scyIsICJzb3VyY2VWZXJzaW9uIjogIjIwMjBBQSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIk5PX0RFQ0lTSU9OIn0sICJuY2lDb2RlIjogIkMxNTA2IiwgIm1lc2hJZCI6ICJNMDAxNDQ4MSIsICJsb2luY0lkIjogIk1USFUwMDM0NzAsTFAxODE0OS0yIiwgInZvY2FicyI6ICJMQ0gsTE5DLE1USCxDSFYsQ1NQLE1TSCxNRURMSU5FUExVUyxMQ0hfTlcsTkNJLE5DSV9OQ0ktR0xPU1MiLCAiaW5zaWdodE1vZGVsRGF0YSI6IHsibWVkaWNhdGlvbiI6IHsidXNhZ2UiOiB7InRha2VuU2NvcmUiOiAxLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjAsICJsYWJNZWFzdXJlbWVudFNjb3JlIjogMC4wfSwgInN0YXJ0ZWRFdmVudCI6IHsic2NvcmUiOiAwLjk4MiwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMS4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX0sICJkb3NlQ2hhbmdlZEV2ZW50IjogeyJzY29yZSI6IDAuMDAxLCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgInN0b3BwZWRFdmVudCI6IHsic2NvcmUiOiAwLjAwMSwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX0sICJhZHZlcnNlRXZlbnQiOiB7InNjb3JlIjogMC45OTksICJhbGxlcmd5U2NvcmUiOiAwLjAsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAxLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19fX19LCB7InR5cGUiOiAidW1scy5PcmdhbmljQ2hlbWljYWwiLCAidWlkIjogNiwgImJlZ2luIjogMTE4LCAiZW5kIjogMTI3LCAiY292ZXJlZFRleHQiOiAiTmV1cm9udGluIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDY3ODE3NiIsICJwcmVmZXJyZWROYW1lIjogIk5ldXJvbnRpbiIsICJzZW1hbnRpY1R5cGUiOiAib3JjaCIsICJzb3VyY2UiOiAidW1scyIsICJzb3VyY2VWZXJzaW9uIjogIjIwMjBBQSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIk5PX0RFQ0lTSU9OIn0sICJuY2lDb2RlIjogIkMxMTA4IiwgIm1lc2hJZCI6ICJNMDExOTQyMCIsICJyeE5vcm1JZCI6ICIxOTY0OTgiLCAidm9jYWJzIjogIkNIVixNU0gsTkNJLFJYTk9STSxQRFEifSwgeyJ0eXBlIjogInVtbHMuUGhhcm1hY29sb2dpY1N1YnN0YW5jZSIsICJ1aWQiOiAzLCAiYmVnaW4iOiAxMTgsICJlbmQiOiAxMjcsICJjb3ZlcmVkVGV4dCI6ICJOZXVyb250aW4iLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwNjc4MTc2IiwgInByZWZlcnJlZE5hbWUiOiAiTmV1cm9udGluIiwgInNlbWFudGljVHlwZSI6ICJwaHN1IiwgInNvdXJjZSI6ICJ1bWxzIiwgInNvdXJjZVZlcnNpb24iOiAiMjAyMEFBIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiTk9fREVDSVNJT04ifSwgIm5jaUNvZGUiOiAiQzExMDgiLCAibWVzaElkIjogIk0wMTE5NDIwIiwgInJ4Tm9ybUlkIjogIjE5NjQ5OCIsICJ2b2NhYnMiOiAiQ0hWLE1TSCxOQ0ksUlhOT1JNLFBEUSIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJtZWRpY2F0aW9uIjogeyJ1c2FnZSI6IHsidGFrZW5TY29yZSI6IDEuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMCwgImxhYk1lYXN1cmVtZW50U2NvcmUiOiAwLjB9LCAic3RhcnRlZEV2ZW50IjogeyJzY29yZSI6IDAuOTk4LCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAxLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgImRvc2VDaGFuZ2VkRXZlbnQiOiB7InNjb3JlIjogMC4wMDIsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19LCAic3RvcHBlZEV2ZW50IjogeyJzY29yZSI6IDAuMCwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX0sICJhZHZlcnNlRXZlbnQiOiB7InNjb3JlIjogMC44OTEsICJhbGxlcmd5U2NvcmUiOiAwLjAsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjY3OCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX19fX0sIHsidHlwZSI6ICJ1bWxzLkhlYWx0aENhcmVBY3Rpdml0eSIsICJiZWdpbiI6IDE0NiwgImVuZCI6IDE1NiwgImNvdmVyZWRUZXh0IjogInBlcnNjcmliZWQiLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwMjc4MzI5IiwgInByZWZlcnJlZE5hbWUiOiAiUHJlc2NyaWJlZCIsICJzZW1hbnRpY1R5cGUiOiAiaGxjYSIsICJzb3VyY2UiOiAidW1scyIsICJzb3VyY2VWZXJzaW9uIjogIjIwMjBBQSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIk5PX0RFQ0lTSU9OIn0sICJ2b2NhYnMiOiAiTVRILENIVixMQ0gifSwgeyJ0eXBlIjogInVtbHMuRGlzZWFzZU9yU3luZHJvbWUiLCAidWlkIjogNCwgImJlZ2luIjogMTY1LCAiZW5kIjogMTg1LCAiY292ZXJlZFRleHQiOiAidHJpZ2VtaW5hbCBuZXVyYWxnaWEiLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwMDQwOTk3IiwgInByZWZlcnJlZE5hbWUiOiAiVHJpZ2VtaW5hbCBOZXVyYWxnaWEiLCAic2VtYW50aWNUeXBlIjogImRzeW4iLCAic291cmNlIjogInVtbHMiLCAic291cmNlVmVyc2lvbiI6ICIyMDIwQUEiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJOT19ERUNJU0lPTiJ9LCAiaWNkMTBDb2RlIjogIkIwMi4yLEc1MC4wLEc1My4wIiwgInNub21lZENvbmNlcHRJZCI6ICIzMTY4MTAwNSIsICJtZXNoSWQiOiAiTTAwMjE5NjYiLCAidm9jYWJzIjogIk1USCxDU1AsTVNILENTVCxIUE8sT01JTSxDT1NUQVIsSUNQQyxDSFYsTUVETElORVBMVVMsTENIX05XLFFNUixJQ0Q5Q00sU05PTUVEQ1RfVVMsRFhQLE1USElDRDkiLCAiaW5zaWdodE1vZGVsRGF0YSI6IHsiZGlhZ25vc2lzIjogeyJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDEuMCwgInBhdGllbnRSZXBvcnRlZFNjb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9LCAic3VzcGVjdGVkU2NvcmUiOiAwLjAsICJzeW1wdG9tU2NvcmUiOiAwLjAsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX19LCB7InR5cGUiOiAidW1scy5TaWduT3JTeW1wdG9tIiwgInVpZCI6IDUsICJiZWdpbiI6IDE5MCwgImVuZCI6IDIwMiwgImNvdmVyZWRUZXh0IjogImNocm9uaWMgcGFpbiIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzAxNTAwNTUiLCAicHJlZmVycmVkTmFtZSI6ICJDaHJvbmljIHBhaW4iLCAic2VtYW50aWNUeXBlIjogInNvc3kiLCAic291cmNlIjogInVtbHMiLCAic291cmNlVmVyc2lvbiI6ICIyMDIwQUEiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJOT19ERUNJU0lPTiJ9LCAiaWNkOUNvZGUiOiAiMzM4LjI5IiwgImljZDEwQ29kZSI6ICJSNTIsUjUyLjIiLCAibmNpQ29kZSI6ICJDMjY5NDAiLCAic25vbWVkQ29uY2VwdElkIjogIjgyNDIzMDAxIiwgIm1lc2hJZCI6ICJNMDU0OTgzNyIsICJsb2luY0lkIjogIk1USFUwMTMzODIsTEEyMjA5My0xIiwgInZvY2FicyI6ICJMTkMsTVRILE5DSV9OSUNIRCxDU1AsTVNILEhQTyxPTUlNLE5DSV9OQ0ktR0xPU1MsQ0hWLE1FRExJTkVQTFVTLExDSF9OVyxOQ0ksSUNEOUNNLFNOT01FRENUX1VTIiwgImluc2lnaHRNb2RlbERhdGEiOiB7ImRpYWdub3NpcyI6IHsidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAxLjAsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfSwgInN1c3BlY3RlZFNjb3JlIjogMC4wLCAic3ltcHRvbVNjb3JlIjogMC4wMjEsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMH19fSwgeyJ0eXBlIjogIklDTWVkaWNhdGlvbiIsICJiZWdpbiI6IDEwNCwgImVuZCI6IDExMywgImNvdmVyZWRUZXh0IjogIm5hcmNvdGljcyIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzAwMjc0MTUiLCAicHJlZmVycmVkTmFtZSI6ICJOYXJjb3RpY3MiLCAic291cmNlIjogIkNsaW5pY2FsIEluc2lnaHRzIC0gRGVyaXZlZCBDb25jZXB0cyIsICJzb3VyY2VWZXJzaW9uIjogInYxLjAiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJWQUxJRCJ9LCAibmNpQ29kZSI6ICJDMTUwNiIsICJtZXNoSWQiOiAiTTAwMTQ0ODEiLCAibG9pbmNJZCI6ICJNVEhVMDAzNDcwLExQMTgxNDktMiIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJtZWRpY2F0aW9uIjogeyJ1c2FnZSI6IHsidGFrZW5TY29yZSI6IDEuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMCwgImxhYk1lYXN1cmVtZW50U2NvcmUiOiAwLjB9LCAic3RhcnRlZEV2ZW50IjogeyJzY29yZSI6IDAuOTgyLCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAxLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgImRvc2VDaGFuZ2VkRXZlbnQiOiB7InNjb3JlIjogMC4wMDEsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19LCAic3RvcHBlZEV2ZW50IjogeyJzY29yZSI6IDAuMDAxLCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgImFkdmVyc2VFdmVudCI6IHsic2NvcmUiOiAwLjk5OSwgImFsbGVyZ3lTY29yZSI6IDAuMCwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDEuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX19fSwgInJ1bGVJZCI6ICI3ODYxYzAyNC1hZDFjLTQ3ZTYtYjQwZS1jOTBjYjdiMTllMjYiLCAiZGVyaXZlZEZyb20iOiBbeyJ1aWQiOiAyfV19LCB7InR5cGUiOiAiSUNOb3JtYWxpdHkiLCAiYmVnaW4iOiAxMDQsICJlbmQiOiAxMTMsICJjb3ZlcmVkVGV4dCI6ICJuYXJjb3RpY3MiLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwMDI3NDE1IiwgInByZWZlcnJlZE5hbWUiOiAiTmFyY290aWNzIiwgInNvdXJjZSI6ICJDbGluaWNhbCBJbnNpZ2h0cyAtIERlcml2ZWQgQ29uY2VwdHMiLCAic291cmNlVmVyc2lvbiI6ICJ2MS4wIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiTk9fREVDSVNJT04ifSwgIm5jaUNvZGUiOiAiQzE1MDYiLCAibWVzaElkIjogIk0wMDE0NDgxIiwgImxvaW5jSWQiOiAiTVRIVTAwMzQ3MCxMUDE4MTQ5LTIiLCAiaW5zaWdodE1vZGVsRGF0YSI6IHt9LCAicnVsZUlkIjogImQwMDRkZjYyLWE2NWQtNDEzNi1hYTMyLTE2MWE0M2ViOTUwNiIsICJkZXJpdmVkRnJvbSI6IFt7InVpZCI6IDJ9XX0sIHsidHlwZSI6ICJJQ01lZGljYXRpb24iLCAiYmVnaW4iOiAxMTgsICJlbmQiOiAxMjcsICJjb3ZlcmVkVGV4dCI6ICJOZXVyb250aW4iLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwNjc4MTc2IiwgInByZWZlcnJlZE5hbWUiOiAiTmV1cm9udGluIiwgInNvdXJjZSI6ICJDbGluaWNhbCBJbnNpZ2h0cyAtIERlcml2ZWQgQ29uY2VwdHMiLCAic291cmNlVmVyc2lvbiI6ICJ2MS4wIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgIm5jaUNvZGUiOiAiQzExMDgiLCAibWVzaElkIjogIk0wMTE5NDIwIiwgInJ4Tm9ybUlkIjogIjE5NjQ5OCIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJtZWRpY2F0aW9uIjogeyJ1c2FnZSI6IHsidGFrZW5TY29yZSI6IDEuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMCwgImxhYk1lYXN1cmVtZW50U2NvcmUiOiAwLjB9LCAic3RhcnRlZEV2ZW50IjogeyJzY29yZSI6IDAuOTk4LCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAxLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgImRvc2VDaGFuZ2VkRXZlbnQiOiB7InNjb3JlIjogMC4wMDIsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19LCAic3RvcHBlZEV2ZW50IjogeyJzY29yZSI6IDAuMCwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX0sICJhZHZlcnNlRXZlbnQiOiB7InNjb3JlIjogMC44OTEsICJhbGxlcmd5U2NvcmUiOiAwLjAsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjY3OCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX19fSwgInJ1bGVJZCI6ICI3ODYxYzAyNC1hZDFjLTQ3ZTYtYjQwZS1jOTBjYjdiMTllMjYiLCAiZGVyaXZlZEZyb20iOiBbeyJ1aWQiOiAzfV19LCB7InR5cGUiOiAiSUNOb3JtYWxpdHkiLCAiYmVnaW4iOiAxMTgsICJlbmQiOiAxMjcsICJjb3ZlcmVkVGV4dCI6ICJOZXVyb250aW4iLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwNjc4MTc2IiwgInByZWZlcnJlZE5hbWUiOiAiTmV1cm9udGluIiwgInNvdXJjZSI6ICJDbGluaWNhbCBJbnNpZ2h0cyAtIERlcml2ZWQgQ29uY2VwdHMiLCAic291cmNlVmVyc2lvbiI6ICJ2MS4wIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiTk9fREVDSVNJT04ifSwgIm5jaUNvZGUiOiAiQzExMDgiLCAibWVzaElkIjogIk0wMTE5NDIwIiwgInJ4Tm9ybUlkIjogIjE5NjQ5OCIsICJpbnNpZ2h0TW9kZWxEYXRhIjoge30sICJydWxlSWQiOiAiZDAwNGRmNjItYTY1ZC00MTM2LWFhMzItMTYxYTQzZWI5NTA2IiwgImRlcml2ZWRGcm9tIjogW3sidWlkIjogM31dfSwgeyJ0eXBlIjogIklDTm9ybWFsaXR5IiwgImJlZ2luIjogMTE4LCAiZW5kIjogMTI3LCAiY292ZXJlZFRleHQiOiAiTmV1cm9udGluIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDY3ODE3NiIsICJwcmVmZXJyZWROYW1lIjogIk5ldXJvbnRpbiIsICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBEZXJpdmVkIENvbmNlcHRzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIk5PX0RFQ0lTSU9OIn0sICJpbnNpZ2h0TW9kZWxEYXRhIjoge30sICJydWxlSWQiOiAiMzQzZTYxNTgtMmMzMC00NzI2LWJlNzEtMzNhNTcwYjI4NzAzIiwgImRlcml2ZWRGcm9tIjogW3sidWlkIjogNn1dfSwgeyJ0eXBlIjogIklDRGlhZ25vc2lzIiwgImJlZ2luIjogMTY1LCAiZW5kIjogMTg1LCAiY292ZXJlZFRleHQiOiAidHJpZ2VtaW5hbCBuZXVyYWxnaWEiLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwMDQwOTk3IiwgInByZWZlcnJlZE5hbWUiOiAiVHJpZ2VtaW5hbCBOZXVyYWxnaWEiLCAic291cmNlIjogIkNsaW5pY2FsIEluc2lnaHRzIC0gRGVyaXZlZCBDb25jZXB0cyIsICJzb3VyY2VWZXJzaW9uIjogInYxLjAiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJWQUxJRCJ9LCAiaWNkMTBDb2RlIjogIkIwMi4yLEc1MC4wLEc1My4wIiwgInNub21lZENvbmNlcHRJZCI6ICIzMTY4MTAwNSIsICJtZXNoSWQiOiAiTTAwMjE5NjYiLCAiaW5zaWdodE1vZGVsRGF0YSI6IHsiZGlhZ25vc2lzIjogeyJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDEuMCwgInBhdGllbnRSZXBvcnRlZFNjb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9LCAic3VzcGVjdGVkU2NvcmUiOiAwLjAsICJzeW1wdG9tU2NvcmUiOiAwLjAsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX0sICJydWxlSWQiOiAiNjk4ZjJiMTktMjdiNi00ZGFiLTkxNTAtN2Q3ZWYzYjAzYTVjIiwgImRlcml2ZWRGcm9tIjogW3sidWlkIjogNH1dfSwgeyJ0eXBlIjogIklDRGlhZ25vc2lzIiwgImJlZ2luIjogMTkwLCAiZW5kIjogMjAyLCAiY292ZXJlZFRleHQiOiAiY2hyb25pYyBwYWluIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDE1MDA1NSIsICJwcmVmZXJyZWROYW1lIjogIkNocm9uaWMgcGFpbiIsICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBEZXJpdmVkIENvbmNlcHRzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIlZBTElEIn0sICJpY2Q5Q29kZSI6ICIzMzguMjkiLCAiaWNkMTBDb2RlIjogIlI1MixSNTIuMiIsICJuY2lDb2RlIjogIkMyNjk0MCIsICJzbm9tZWRDb25jZXB0SWQiOiAiODI0MjMwMDEiLCAibWVzaElkIjogIk0wNTQ5ODM3IiwgImxvaW5jSWQiOiAiTVRIVTAxMzM4MixMQTIyMDkzLTEiLCAiaW5zaWdodE1vZGVsRGF0YSI6IHsiZGlhZ25vc2lzIjogeyJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDEuMCwgInBhdGllbnRSZXBvcnRlZFNjb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9LCAic3VzcGVjdGVkU2NvcmUiOiAwLjAsICJzeW1wdG9tU2NvcmUiOiAwLjAyMSwgInRyYXVtYVNjb3JlIjogMC4wLCAiZmFtaWx5SGlzdG9yeVNjb3JlIjogMC4wfX0sICJydWxlSWQiOiAiM2NmMzhlMjktNzdmMC00N2IzLTk5NTAtNGEwMjkyZjY0YzkzIiwgImRlcml2ZWRGcm9tIjogW3sidWlkIjogNX1dfV0sICJNZWRpY2F0aW9uSW5kIjogW3sidHlwZSI6ICJhY2kuTWVkaWNhdGlvbkluZCIsICJ1aWQiOiA4LCAiYmVnaW4iOiAxMDQsICJlbmQiOiAxMTMsICJjb3ZlcmVkVGV4dCI6ICJuYXJjb3RpY3MiLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwMDI3NDE1IiwgImRydWciOiBbeyJjb3ZlcmVkVGV4dCI6ICJuYXJjb3RpY3MiLCAiY3VpIjogIkMwMDI3NDE1IiwgImNvbXBsZXgiOiAiZmFsc2UiLCAiZW5kIjogMTEzLCAidHlwZSI6ICJhY2kuSW5kX0RydWciLCAibmFtZTEiOiBbeyJjb3ZlcmVkVGV4dCI6ICJuYXJjb3RpY3MiLCAiY3VpIjogIkMwMDI3NDE1IiwgImRydWdTdXJmYWNlRm9ybSI6ICJuYXJjb3RpY3MiLCAiZHJ1Z05vcm1hbGl6ZWROYW1lIjogIm5hcmNvdGljcyIsICJlbmQiOiAxMTMsICJ0eXBlIjogImFjaS5EcnVnTmFtZSIsICJiZWdpbiI6IDEwNH1dLCAiYmVnaW4iOiAxMDR9XSwgImluc2lnaHRNb2RlbERhdGEiOiB7Im1lZGljYXRpb24iOiB7InVzYWdlIjogeyJ0YWtlblNjb3JlIjogMS4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wLCAibGFiTWVhc3VyZW1lbnRTY29yZSI6IDAuMH0sICJzdGFydGVkRXZlbnQiOiB7InNjb3JlIjogMC45ODIsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDEuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19LCAiZG9zZUNoYW5nZWRFdmVudCI6IHsic2NvcmUiOiAwLjAwMSwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX0sICJzdG9wcGVkRXZlbnQiOiB7InNjb3JlIjogMC4wMDEsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19LCAiYWR2ZXJzZUV2ZW50IjogeyJzY29yZSI6IDAuOTk5LCAiYWxsZXJneVNjb3JlIjogMC4wLCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMS4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fX19LCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJWQUxJRCIsICJjb21tZW50IjogIm1hcmtlZCBWQUxJRCBieSBjbGluaWNhbCBpbnNpZ2h0IG1vZGVscy4ifX0sIHsidHlwZSI6ICJhY2kuTWVkaWNhdGlvbkluZCIsICJ1aWQiOiA5LCAiYmVnaW4iOiAxMTgsICJlbmQiOiAxMjcsICJjb3ZlcmVkVGV4dCI6ICJOZXVyb250aW4iLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwNjc4MTc2IiwgImRydWciOiBbeyJjb3ZlcmVkVGV4dCI6ICJOZXVyb250aW4iLCAiY3VpIjogIkMwNjc4MTc2IiwgImNvbXBsZXgiOiAiZmFsc2UiLCAiZW5kIjogMTI3LCAidHlwZSI6ICJhY2kuSW5kX0RydWciLCAibmFtZTEiOiBbeyJyeE5vcm1JRCI6ICIxOTY0OTgiLCAiY292ZXJlZFRleHQiOiAiTmV1cm9udGluIiwgImN1aSI6ICJDMDY3ODE3NiIsICJkcnVnU3VyZmFjZUZvcm0iOiAiTmV1cm9udGluIiwgImRydWdOb3JtYWxpemVkTmFtZSI6ICJuZXVyb250aW4iLCAiZW5kIjogMTI3LCAidHlwZSI6ICJhY2kuRHJ1Z05hbWUiLCAiYmVnaW4iOiAxMTh9XSwgImJlZ2luIjogMTE4fV0sICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJtZWRpY2F0aW9uIjogeyJ1c2FnZSI6IHsidGFrZW5TY29yZSI6IDEuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMCwgImxhYk1lYXN1cmVtZW50U2NvcmUiOiAwLjB9LCAic3RhcnRlZEV2ZW50IjogeyJzY29yZSI6IDAuOTk4LCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAxLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgImRvc2VDaGFuZ2VkRXZlbnQiOiB7InNjb3JlIjogMC4wMDIsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19LCAic3RvcHBlZEV2ZW50IjogeyJzY29yZSI6IDAuMCwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX0sICJhZHZlcnNlRXZlbnQiOiB7InNjb3JlIjogMC44OTEsICJhbGxlcmd5U2NvcmUiOiAwLjAsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjY3OCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX19fSwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQiLCAiY29tbWVudCI6ICJtYXJrZWQgVkFMSUQgYnkgY2xpbmljYWwgaW5zaWdodCBtb2RlbHMuIn19XSwgIlN5bXB0b21EaXNlYXNlSW5kIjogW3sidHlwZSI6ICJhY2kuU3ltcHRvbURpc2Vhc2VJbmQiLCAidWlkIjogMTAsICJiZWdpbiI6IDE2NSwgImVuZCI6IDE4NSwgImNvdmVyZWRUZXh0IjogInRyaWdlbWluYWwgbmV1cmFsZ2lhIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDA0MDk5NyIsICJpY2QxMENvZGUiOiAiRzUwLjAiLCAibW9kYWxpdHkiOiAicG90ZW50aWFsIiwgInN5bXB0b21EaXNlYXNlU3VyZmFjZUZvcm0iOiAidHJpZ2VtaW5hbCBuZXVyYWxnaWEiLCAic25vbWVkQ29uY2VwdElkIjogIjMxNjgxMDA1IiwgImNjc0NvZGUiOiAiOTUiLCAic3ltcHRvbURpc2Vhc2VOb3JtYWxpemVkTmFtZSI6ICJ0cmlnZW1pbmFsIG5ldXJhbGdpYSIsICJpY2Q5Q29kZSI6ICIzNTAuMSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIlZBTElEIn0sICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMS4wLCAicGF0aWVudFJlcG9ydGVkU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMCwgInN5bXB0b21TY29yZSI6IDAuMCwgInRyYXVtYVNjb3JlIjogMC4wLCAiZmFtaWx5SGlzdG9yeVNjb3JlIjogMC4wMDN9fX0sIHsidHlwZSI6ICJhY2kuU3ltcHRvbURpc2Vhc2VJbmQiLCAidWlkIjogMTEsICJiZWdpbiI6IDE5MCwgImVuZCI6IDIwMiwgImNvdmVyZWRUZXh0IjogImNocm9uaWMgcGFpbiIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzAxNTAwNTUiLCAiaWNkMTBDb2RlIjogIlI1Mi4yLFI1MiIsICJtb2RhbGl0eSI6ICJwb3RlbnRpYWwiLCAic3ltcHRvbURpc2Vhc2VTdXJmYWNlRm9ybSI6ICJjaHJvbmljIHBhaW4iLCAic25vbWVkQ29uY2VwdElkIjogIjgyNDIzMDAxIiwgImNjc0NvZGUiOiAiMjU5IiwgInN5bXB0b21EaXNlYXNlTm9ybWFsaXplZE5hbWUiOiAiY2hyb25pYyBwYWluIiwgImljZDlDb2RlIjogIjMzOC4yOSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIlZBTElEIn0sICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMS4wLCAicGF0aWVudFJlcG9ydGVkU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMCwgInN5bXB0b21TY29yZSI6IDAuMDIxLCAidHJhdW1hU2NvcmUiOiAwLjAsICJmYW1pbHlIaXN0b3J5U2NvcmUiOiAwLjB9fX1dLCAic3BlbGxpbmdDb3JyZWN0aW9ucyI6IFt7ImJlZ2luIjogMTQ2LCAiZW5kIjogMTU2LCAiY292ZXJlZFRleHQiOiAicGVyc2NyaWJlZCIsICJzdWdnZXN0aW9ucyI6IFt7InRleHQiOiAicHJlc2NyaWJlZCIsICJjb25maWRlbmNlIjogMC45LCAiYXBwbGllZCI6IHRydWV9LCB7InRleHQiOiAicHJvc2NyaWJlZCIsICJjb25maWRlbmNlIjogMC44MDMsICJhcHBsaWVkIjogZmFsc2V9LCB7InRleHQiOiAiZGVzY3JpYmVkIiwgImNvbmZpZGVuY2UiOiAwLjgwMiwgImFwcGxpZWQiOiBmYWxzZX0sIHsidGV4dCI6ICJwcmVzY3JpYmUiLCAiY29uZmlkZW5jZSI6IDAuODAxLCAiYXBwbGllZCI6IGZhbHNlfSwgeyJ0ZXh0IjogInByZXNjcmliZXIiLCAiY29uZmlkZW5jZSI6IDAuOCwgImFwcGxpZWQiOiBmYWxzZX1dfV0sICJzcGVsbENvcnJlY3RlZFRleHQiOiBbeyJjb3JyZWN0ZWRUZXh0IjogIlRoZSBwYXRpZW50J3MgY291cnNlIGNvdWxkIGhhdmUgYmVlbiBjb21wbGljYXRlZCBieSBtZW50YWwgc3RhdHVzIGNoYW5nZXMgc2Vjb25kYXJ5IHRvIGEgY29tYmluYXRpb24gb2YgbmFyY290aWNzIGFuZCBOZXVyb250aW4sIHdoaWNoIHdhcyBhbG1vc3QgcHJlc2NyaWJlZCBmb3IgaGlzIHRyaWdlbWluYWwgbmV1cmFsZ2lhIGFuZCBjaHJvbmljIHBhaW4uIFxuXG4ifV19\" } }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/covered-text\", \"valueString\": \"narcotics\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\", \"valueInteger\": 104 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\", \"valueInteger\": 113 }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Adverse_Event_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 0.999 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Adverse Event Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/span\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"a129d489aea84c37b7377201e70cd416fe2b26ce3dc1d29f250fdfa1\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"actuality\": \"actual\", \"event\": { \"coding\": [ { \"code\": \"C0027415\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } ], \"text\": \"narcotics\" }, \"resourceType\": \"AdverseEvent\" } Adverse Event for \"neurontin\" { \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"1b32afb1d37b7a442c676f8f191800d89882c8d8163b6379d1c387f5\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"AdverseEvent\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:7fbcf71d-44fe-466e-b8d1-bc51cedf000b\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"DiagnosticReport.presentedForm[0].data\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"\" } }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/covered-text\", \"valueString\": \"Neurontin\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\", \"valueInteger\": 118 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\", \"valueInteger\": 127 }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Adverse_Event_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 0.891 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Adverse Event Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/span\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"1b32afb1d37b7a442c676f8f191800d89882c8d8163b6379d1c387f5\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"actuality\": \"actual\", \"event\": { \"coding\": [ { \"code\": \"C0678176\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } ], \"text\": \"neurontin\" }, \"resourceType\": \"AdverseEvent\" } Codes It's easy to see that each of our adverse event resources contains a single UMLS code for the event. These codes are associated with a surface form that caused the adverse event to be created. A UMLS concept is not an ideal code for representing an Adverse Event. The FHIR standard recommends a SNOMED CT value set . Because adverse events often are of interest to regulators, MedDRA codes are also highly desirable. These coding systems are not yet provided by ACD, but we hope to add these codes if/when the NLP technology is available. Adverse Event Text Code System narcotics C0027415 http://terminology.hl7.org/CodeSystem/umls neurontin C0678176 http://terminology.hl7.org/CodeSystem/umls Actuality While the FHIR standard distinguishes between potential (or near-miss) adverse events and actual events, the nlp-insights service creates adverse event resources as actual, and does not distinguish between actual and potential events. It is possible that the problem could be solved (in some cases) with a code change to nlp-insights. For example, suppose the text passage was something similar to: The patient's course could have been complicated by mental status \\ changes secondary to a combination of narcotics and Neurontin, \\ which was almost perscribed for his trigeminal neuralgia and chronic pain. ACD would return confidences with a high value for the \"considering\" usage score: \"adverseEvent\": { \"score\": 0.999, \"allergyScore\": 0, \"usage\": { \"explicitScore\": 0, \"consideringScore\": 1, \"discussedScore\": 0 } }, This could be leveraged by nlp-insights to determine that the event did not actually happen. In building the reference implementation, we did not have sufficient examples to determine if this approach would work well enough to be of value in practice, or what value of the consideringScore should be used as the decision boundary. Another consideration was that additional functionality might someday be added to ACD that solves this problem in a better way. The determination of actuality is therefore still an area of research and further contribution. Evidence The available evidence is consistent with other derived resource types . The span will cover the surface form used to construct the UMLS code for the event. A confidence will be returned for the Adverse Event. No other confidences are returned at this time.","title":"Adverse Event"},{"location":"examples/acd/adverse_event/#adverse-events","text":"When the nlp-insights service is configured to use ACD for NLP processing, the service will discover AdverseEvent FHIR resources . Within the FHIR standard, an adverse event is the result of an intervention that caused unintentional harm to a specific subject or group of subjects. The nlp-insights service will detect adverse events that are medication related, such as a drug interaction. The FHIR standard states that an AdverseEvent resource should not be used when a more specific resource exists . This means that the adverse event should not be discovered for an allergic reaction to a medication, since FHIR defines an AllergyIntolerance resource that is more specific. The differentiation of an adverse event from other FHIR concepts such as allergies requires an advanced NLP engine such as ACD, since more language awareness is required than simple pattern matching can provide. Adverse events are characterized by the need to capture cause and effect, in addition to actuality, severity and outcome. The nlp-insights service currently limits discovery to the detection of medication related adverse events. There is no support for creating cause/effect/outcome relationships with other resources that represent characteristics of the event. Standard codes such as SNOMED CT and MedDRA are NOT included in the created AdverseEvent FHIR resource. While detection is a significant step forward, further contributions to this feature will be needed when more ACD support becomes available. The capabilities of the nlp-insights service are best explained using an example. Before using the nlp-insights service, it must be started and configured for ACD. If the nlp-insights service has not been started and configured to use ACD, follow the steps here .","title":"Adverse Events"},{"location":"examples/acd/adverse_event/#derive-insights-from-a-diagnostic-report-that-describes-an-adverse-event","text":"Adverse Events are very challenging for NLP to recognize because they involve multiple concepts, temporal relationships and causality. This example is typical; There is no single concept or span of text that indicates an Adverse Event happened. B64_REPORT_TEXT=$(echo \"\\ The patient's course was also complicated by mental status \\ changes secondary to a combination of his narcotics and Neurontin, \\ which had been given for his trigeminal neuralgia and chronic pain. \\ The Neurontin was stopped and he received hemodialysis on consecutive days.\\ \" | base64 -w 0) The diagnostic report is built and sent to the nlp-insights service for insight discovery. The returned resources are stored in a json file for future analysis. (The report text has alredy been converted to base64 encoding, so that it can be attached to a diagnostic report). curl -w \"\\n%{http_code}\\n\" -s -o /tmp/output.json -XPOST localhost:5000/discoverInsights -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"resourceType\": \"Bundle\", \"id\": \"abc\", \"type\": \"transaction\", \"entry\": [ { \"resource\": { \"id\": \"abcefg-1234567890\", \"status\": \"final\", \"code\": { \"text\": \"Chief complaint Narrative - Reported\" }, \"presentedForm\": [ { \"contentType\": \"text\", \"language\": \"en\", \"data\": \"$B64_REPORT_TEXT\", \"title\": \"ER VISIT\", \"creation\": \"2020-08-02T12:44:55+08:00\" } ], \"resourceType\": \"DiagnosticReport\" }, \"request\": { \"method\": \"POST\", \"url\": \"DiagnosticReport\" } } ] } EOF","title":"Derive insights from a diagnostic report that describes an adverse event"},{"location":"examples/acd/adverse_event/#adverse-event-resources","text":"In addition to two conditions and a medication statement, the nlp-insights service has discovered adverse events associated with \"narcotics\" and \"neurontin\". Resource Type Description DiagnosticReport Chief complaint Narrative - Reported Condition trigeminal neuralgia Condition chronic pain MedicationStatement Neurontin AdverseEvent narcotics AdverseEvent neurontin The complete json for the two Adverse Events are included here, with the highlights being discussed in the next sections. Adverse Event resource for \"narcotics\" { \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"a129d489aea84c37b7377201e70cd416fe2b26ce3dc1d29f250fdfa1\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"AdverseEvent\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:7fbcf71d-44fe-466e-b8d1-bc51cedf000b\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"DiagnosticReport.presentedForm[0].data\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"\" } }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/covered-text\", \"valueString\": \"narcotics\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\", \"valueInteger\": 104 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\", \"valueInteger\": 113 }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Adverse_Event_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 0.999 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Adverse Event Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/span\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"a129d489aea84c37b7377201e70cd416fe2b26ce3dc1d29f250fdfa1\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"actuality\": \"actual\", \"event\": { \"coding\": [ { \"code\": \"C0027415\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } ], \"text\": \"narcotics\" }, \"resourceType\": \"AdverseEvent\" } Adverse Event for \"neurontin\" { \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"1b32afb1d37b7a442c676f8f191800d89882c8d8163b6379d1c387f5\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"AdverseEvent\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:7fbcf71d-44fe-466e-b8d1-bc51cedf000b\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"DiagnosticReport.presentedForm[0].data\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"eyJhdHRyaWJ1dGVWYWx1ZXMiOiBbeyJiZWdpbiI6IDEwNCwgImVuZCI6IDExMywgImNvdmVyZWRUZXh0IjogIm5hcmNvdGljcyIsICJuZWdhdGVkIjogZmFsc2UsICJwcmVmZXJyZWROYW1lIjogIm5hcmNvdGljcyIsICJ2YWx1ZXMiOiBbeyJ2YWx1ZSI6ICJuYXJjb3RpY3MifV0sICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBBdHRyaWJ1dGVzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJjb25jZXB0IjogeyJ1aWQiOiA4fSwgIm5hbWUiOiAiTWVkaWNhdGlvbkFkdmVyc2VFdmVudCIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIlZBTElEIn0sICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJtZWRpY2F0aW9uIjogeyJ1c2FnZSI6IHsidGFrZW5TY29yZSI6IDEuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMCwgImxhYk1lYXN1cmVtZW50U2NvcmUiOiAwLjB9LCAic3RhcnRlZEV2ZW50IjogeyJzY29yZSI6IDAuOTgyLCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAxLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgImRvc2VDaGFuZ2VkRXZlbnQiOiB7InNjb3JlIjogMC4wMDEsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19LCAic3RvcHBlZEV2ZW50IjogeyJzY29yZSI6IDAuMDAxLCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgImFkdmVyc2VFdmVudCI6IHsic2NvcmUiOiAwLjk5OSwgImFsbGVyZ3lTY29yZSI6IDAuMCwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDEuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX19fX0sIHsiYmVnaW4iOiAxMTgsICJlbmQiOiAxMjcsICJjb3ZlcmVkVGV4dCI6ICJOZXVyb250aW4iLCAibmVnYXRlZCI6IGZhbHNlLCAicHJlZmVycmVkTmFtZSI6ICJuZXVyb250aW4iLCAidmFsdWVzIjogW3sidmFsdWUiOiAibmV1cm9udGluIn1dLCAic291cmNlIjogIkNsaW5pY2FsIEluc2lnaHRzIC0gQXR0cmlidXRlcyIsICJzb3VyY2VWZXJzaW9uIjogInYxLjAiLCAiY29uY2VwdCI6IHsidWlkIjogOX0sICJuYW1lIjogIk1lZGljYXRpb25BZHZlcnNlRXZlbnQiLCAicnhOb3JtSWQiOiAiMTk2NDk4IiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgImluc2lnaHRNb2RlbERhdGEiOiB7Im1lZGljYXRpb24iOiB7InVzYWdlIjogeyJ0YWtlblNjb3JlIjogMS4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wLCAibGFiTWVhc3VyZW1lbnRTY29yZSI6IDAuMH0sICJzdGFydGVkRXZlbnQiOiB7InNjb3JlIjogMC45OTgsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDEuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19LCAiZG9zZUNoYW5nZWRFdmVudCI6IHsic2NvcmUiOiAwLjAwMiwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX0sICJzdG9wcGVkRXZlbnQiOiB7InNjb3JlIjogMC4wLCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgImFkdmVyc2VFdmVudCI6IHsic2NvcmUiOiAwLjg5MSwgImFsbGVyZ3lTY29yZSI6IDAuMCwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuNjc4LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fX19fSwgeyJiZWdpbiI6IDE2NSwgImVuZCI6IDE4NSwgImNvdmVyZWRUZXh0IjogInRyaWdlbWluYWwgbmV1cmFsZ2lhIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgInByZWZlcnJlZE5hbWUiOiAidHJpZ2VtaW5hbCBuZXVyYWxnaWEiLCAidmFsdWVzIjogW3sidmFsdWUiOiAidHJpZ2VtaW5hbCBuZXVyYWxnaWEifV0sICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBBdHRyaWJ1dGVzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJjb25jZXB0IjogeyJ1aWQiOiAxMH0sICJuYW1lIjogIkRpYWdub3NpcyIsICJpY2Q5Q29kZSI6ICIzNTAuMSIsICJpY2QxMENvZGUiOiAiRzUwLjAiLCAic25vbWVkQ29uY2VwdElkIjogIjMxNjgxMDA1IiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgImluc2lnaHRNb2RlbERhdGEiOiB7ImRpYWdub3NpcyI6IHsidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAxLjAsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfSwgInN1c3BlY3RlZFNjb3JlIjogMC4wLCAic3ltcHRvbVNjb3JlIjogMC4wLCAidHJhdW1hU2NvcmUiOiAwLjAsICJmYW1pbHlIaXN0b3J5U2NvcmUiOiAwLjAwM319LCAiY2NzQ29kZSI6ICI5NSJ9LCB7ImJlZ2luIjogMTkwLCAiZW5kIjogMjAyLCAiY292ZXJlZFRleHQiOiAiY2hyb25pYyBwYWluIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgInByZWZlcnJlZE5hbWUiOiAiY2hyb25pYyBwYWluIiwgInZhbHVlcyI6IFt7InZhbHVlIjogImNocm9uaWMgcGFpbiJ9XSwgInNvdXJjZSI6ICJDbGluaWNhbCBJbnNpZ2h0cyAtIEF0dHJpYnV0ZXMiLCAic291cmNlVmVyc2lvbiI6ICJ2MS4wIiwgImNvbmNlcHQiOiB7InVpZCI6IDExfSwgIm5hbWUiOiAiRGlhZ25vc2lzIiwgImljZDlDb2RlIjogIjMzOC4yOSIsICJpY2QxMENvZGUiOiAiUjUyLjIsUjUyIiwgInNub21lZENvbmNlcHRJZCI6ICI4MjQyMzAwMSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIlZBTElEIn0sICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMS4wLCAicGF0aWVudFJlcG9ydGVkU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMCwgInN5bXB0b21TY29yZSI6IDAuMDIxLCAidHJhdW1hU2NvcmUiOiAwLjAsICJmYW1pbHlIaXN0b3J5U2NvcmUiOiAwLjB9fSwgImNjc0NvZGUiOiAiMjU5In1dLCAiY29uY2VwdHMiOiBbeyJ0eXBlIjogInVtbHMuTWVudGFsT3JCZWhhdmlvcmFsRHlzZnVuY3Rpb24iLCAiYmVnaW4iOiA1MiwgImVuZCI6IDczLCAiY292ZXJlZFRleHQiOiAibWVudGFsIHN0YXR1cyBjaGFuZ2VzIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDg1NjA1NCIsICJwcmVmZXJyZWROYW1lIjogIk1lbnRhbCBTdGF0dXMgQ2hhbmdlIiwgInNlbWFudGljVHlwZSI6ICJtb2JkIiwgInNvdXJjZSI6ICJ1bWxzIiwgInNvdXJjZVZlcnNpb24iOiAiMjAyMEFBIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiTk9fREVDSVNJT04ifSwgIm5jaUNvZGUiOiAiQzE1NzQzNSIsICJsb2luY0lkIjogIkxBNzQ1NS00IiwgInZvY2FicyI6ICJDSFYsTE5DLE5DSSxOQ0lfQ1BUQUMsTVRISUNEOSJ9LCB7InR5cGUiOiAidW1scy5GaW5kaW5nIiwgImJlZ2luIjogODksICJlbmQiOiAxMDAsICJjb3ZlcmVkVGV4dCI6ICJjb21iaW5hdGlvbiIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzM4MTE5MTAiLCAicHJlZmVycmVkTmFtZSI6ICJjb21iaW5hdGlvbiAtIGFuc3dlciB0byBxdWVzdGlvbiIsICJzZW1hbnRpY1R5cGUiOiAiZm5kZyIsICJzb3VyY2UiOiAidW1scyIsICJzb3VyY2VWZXJzaW9uIjogIjIwMjBBQSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIk5PX0RFQ0lTSU9OIn0sICJsb2luY0lkIjogIkxBMTI3MDEtMSIsICJ2b2NhYnMiOiAiTVRILExOQyJ9LCB7InR5cGUiOiAidW1scy5IYXphcmRvdXNPclBvaXNvbm91c1N1YnN0YW5jZSIsICJiZWdpbiI6IDEwNCwgImVuZCI6IDExMywgImNvdmVyZWRUZXh0IjogIm5hcmNvdGljcyIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzAwMjc0MTUiLCAicHJlZmVycmVkTmFtZSI6ICJOYXJjb3RpY3MiLCAic2VtYW50aWNUeXBlIjogImhvcHMiLCAic291cmNlIjogInVtbHMiLCAic291cmNlVmVyc2lvbiI6ICIyMDIwQUEiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJOT19ERUNJU0lPTiJ9LCAibmNpQ29kZSI6ICJDMTUwNiIsICJtZXNoSWQiOiAiTTAwMTQ0ODEiLCAibG9pbmNJZCI6ICJNVEhVMDAzNDcwLExQMTgxNDktMiIsICJ2b2NhYnMiOiAiTENILExOQyxNVEgsQ0hWLENTUCxNU0gsTUVETElORVBMVVMsTENIX05XLE5DSSxOQ0lfTkNJLUdMT1NTIn0sIHsidHlwZSI6ICJ1bWxzLlBoYXJtYWNvbG9naWNTdWJzdGFuY2UiLCAidWlkIjogMiwgImJlZ2luIjogMTA0LCAiZW5kIjogMTEzLCAiY292ZXJlZFRleHQiOiAibmFyY290aWNzIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDAyNzQxNSIsICJwcmVmZXJyZWROYW1lIjogIk5hcmNvdGljcyIsICJzZW1hbnRpY1R5cGUiOiAicGhzdSIsICJzb3VyY2UiOiAidW1scyIsICJzb3VyY2VWZXJzaW9uIjogIjIwMjBBQSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIk5PX0RFQ0lTSU9OIn0sICJuY2lDb2RlIjogIkMxNTA2IiwgIm1lc2hJZCI6ICJNMDAxNDQ4MSIsICJsb2luY0lkIjogIk1USFUwMDM0NzAsTFAxODE0OS0yIiwgInZvY2FicyI6ICJMQ0gsTE5DLE1USCxDSFYsQ1NQLE1TSCxNRURMSU5FUExVUyxMQ0hfTlcsTkNJLE5DSV9OQ0ktR0xPU1MiLCAiaW5zaWdodE1vZGVsRGF0YSI6IHsibWVkaWNhdGlvbiI6IHsidXNhZ2UiOiB7InRha2VuU2NvcmUiOiAxLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjAsICJsYWJNZWFzdXJlbWVudFNjb3JlIjogMC4wfSwgInN0YXJ0ZWRFdmVudCI6IHsic2NvcmUiOiAwLjk4MiwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMS4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX0sICJkb3NlQ2hhbmdlZEV2ZW50IjogeyJzY29yZSI6IDAuMDAxLCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgInN0b3BwZWRFdmVudCI6IHsic2NvcmUiOiAwLjAwMSwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX0sICJhZHZlcnNlRXZlbnQiOiB7InNjb3JlIjogMC45OTksICJhbGxlcmd5U2NvcmUiOiAwLjAsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAxLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19fX19LCB7InR5cGUiOiAidW1scy5PcmdhbmljQ2hlbWljYWwiLCAidWlkIjogNiwgImJlZ2luIjogMTE4LCAiZW5kIjogMTI3LCAiY292ZXJlZFRleHQiOiAiTmV1cm9udGluIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDY3ODE3NiIsICJwcmVmZXJyZWROYW1lIjogIk5ldXJvbnRpbiIsICJzZW1hbnRpY1R5cGUiOiAib3JjaCIsICJzb3VyY2UiOiAidW1scyIsICJzb3VyY2VWZXJzaW9uIjogIjIwMjBBQSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIk5PX0RFQ0lTSU9OIn0sICJuY2lDb2RlIjogIkMxMTA4IiwgIm1lc2hJZCI6ICJNMDExOTQyMCIsICJyeE5vcm1JZCI6ICIxOTY0OTgiLCAidm9jYWJzIjogIkNIVixNU0gsTkNJLFJYTk9STSxQRFEifSwgeyJ0eXBlIjogInVtbHMuUGhhcm1hY29sb2dpY1N1YnN0YW5jZSIsICJ1aWQiOiAzLCAiYmVnaW4iOiAxMTgsICJlbmQiOiAxMjcsICJjb3ZlcmVkVGV4dCI6ICJOZXVyb250aW4iLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwNjc4MTc2IiwgInByZWZlcnJlZE5hbWUiOiAiTmV1cm9udGluIiwgInNlbWFudGljVHlwZSI6ICJwaHN1IiwgInNvdXJjZSI6ICJ1bWxzIiwgInNvdXJjZVZlcnNpb24iOiAiMjAyMEFBIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiTk9fREVDSVNJT04ifSwgIm5jaUNvZGUiOiAiQzExMDgiLCAibWVzaElkIjogIk0wMTE5NDIwIiwgInJ4Tm9ybUlkIjogIjE5NjQ5OCIsICJ2b2NhYnMiOiAiQ0hWLE1TSCxOQ0ksUlhOT1JNLFBEUSIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJtZWRpY2F0aW9uIjogeyJ1c2FnZSI6IHsidGFrZW5TY29yZSI6IDEuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMCwgImxhYk1lYXN1cmVtZW50U2NvcmUiOiAwLjB9LCAic3RhcnRlZEV2ZW50IjogeyJzY29yZSI6IDAuOTk4LCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAxLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgImRvc2VDaGFuZ2VkRXZlbnQiOiB7InNjb3JlIjogMC4wMDIsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19LCAic3RvcHBlZEV2ZW50IjogeyJzY29yZSI6IDAuMCwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX0sICJhZHZlcnNlRXZlbnQiOiB7InNjb3JlIjogMC44OTEsICJhbGxlcmd5U2NvcmUiOiAwLjAsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjY3OCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX19fX0sIHsidHlwZSI6ICJ1bWxzLkhlYWx0aENhcmVBY3Rpdml0eSIsICJiZWdpbiI6IDE0NiwgImVuZCI6IDE1NiwgImNvdmVyZWRUZXh0IjogInBlcnNjcmliZWQiLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwMjc4MzI5IiwgInByZWZlcnJlZE5hbWUiOiAiUHJlc2NyaWJlZCIsICJzZW1hbnRpY1R5cGUiOiAiaGxjYSIsICJzb3VyY2UiOiAidW1scyIsICJzb3VyY2VWZXJzaW9uIjogIjIwMjBBQSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIk5PX0RFQ0lTSU9OIn0sICJ2b2NhYnMiOiAiTVRILENIVixMQ0gifSwgeyJ0eXBlIjogInVtbHMuRGlzZWFzZU9yU3luZHJvbWUiLCAidWlkIjogNCwgImJlZ2luIjogMTY1LCAiZW5kIjogMTg1LCAiY292ZXJlZFRleHQiOiAidHJpZ2VtaW5hbCBuZXVyYWxnaWEiLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwMDQwOTk3IiwgInByZWZlcnJlZE5hbWUiOiAiVHJpZ2VtaW5hbCBOZXVyYWxnaWEiLCAic2VtYW50aWNUeXBlIjogImRzeW4iLCAic291cmNlIjogInVtbHMiLCAic291cmNlVmVyc2lvbiI6ICIyMDIwQUEiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJOT19ERUNJU0lPTiJ9LCAiaWNkMTBDb2RlIjogIkIwMi4yLEc1MC4wLEc1My4wIiwgInNub21lZENvbmNlcHRJZCI6ICIzMTY4MTAwNSIsICJtZXNoSWQiOiAiTTAwMjE5NjYiLCAidm9jYWJzIjogIk1USCxDU1AsTVNILENTVCxIUE8sT01JTSxDT1NUQVIsSUNQQyxDSFYsTUVETElORVBMVVMsTENIX05XLFFNUixJQ0Q5Q00sU05PTUVEQ1RfVVMsRFhQLE1USElDRDkiLCAiaW5zaWdodE1vZGVsRGF0YSI6IHsiZGlhZ25vc2lzIjogeyJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDEuMCwgInBhdGllbnRSZXBvcnRlZFNjb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9LCAic3VzcGVjdGVkU2NvcmUiOiAwLjAsICJzeW1wdG9tU2NvcmUiOiAwLjAsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX19LCB7InR5cGUiOiAidW1scy5TaWduT3JTeW1wdG9tIiwgInVpZCI6IDUsICJiZWdpbiI6IDE5MCwgImVuZCI6IDIwMiwgImNvdmVyZWRUZXh0IjogImNocm9uaWMgcGFpbiIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzAxNTAwNTUiLCAicHJlZmVycmVkTmFtZSI6ICJDaHJvbmljIHBhaW4iLCAic2VtYW50aWNUeXBlIjogInNvc3kiLCAic291cmNlIjogInVtbHMiLCAic291cmNlVmVyc2lvbiI6ICIyMDIwQUEiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJOT19ERUNJU0lPTiJ9LCAiaWNkOUNvZGUiOiAiMzM4LjI5IiwgImljZDEwQ29kZSI6ICJSNTIsUjUyLjIiLCAibmNpQ29kZSI6ICJDMjY5NDAiLCAic25vbWVkQ29uY2VwdElkIjogIjgyNDIzMDAxIiwgIm1lc2hJZCI6ICJNMDU0OTgzNyIsICJsb2luY0lkIjogIk1USFUwMTMzODIsTEEyMjA5My0xIiwgInZvY2FicyI6ICJMTkMsTVRILE5DSV9OSUNIRCxDU1AsTVNILEhQTyxPTUlNLE5DSV9OQ0ktR0xPU1MsQ0hWLE1FRExJTkVQTFVTLExDSF9OVyxOQ0ksSUNEOUNNLFNOT01FRENUX1VTIiwgImluc2lnaHRNb2RlbERhdGEiOiB7ImRpYWdub3NpcyI6IHsidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAxLjAsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfSwgInN1c3BlY3RlZFNjb3JlIjogMC4wLCAic3ltcHRvbVNjb3JlIjogMC4wMjEsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMH19fSwgeyJ0eXBlIjogIklDTWVkaWNhdGlvbiIsICJiZWdpbiI6IDEwNCwgImVuZCI6IDExMywgImNvdmVyZWRUZXh0IjogIm5hcmNvdGljcyIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzAwMjc0MTUiLCAicHJlZmVycmVkTmFtZSI6ICJOYXJjb3RpY3MiLCAic291cmNlIjogIkNsaW5pY2FsIEluc2lnaHRzIC0gRGVyaXZlZCBDb25jZXB0cyIsICJzb3VyY2VWZXJzaW9uIjogInYxLjAiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJWQUxJRCJ9LCAibmNpQ29kZSI6ICJDMTUwNiIsICJtZXNoSWQiOiAiTTAwMTQ0ODEiLCAibG9pbmNJZCI6ICJNVEhVMDAzNDcwLExQMTgxNDktMiIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJtZWRpY2F0aW9uIjogeyJ1c2FnZSI6IHsidGFrZW5TY29yZSI6IDEuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMCwgImxhYk1lYXN1cmVtZW50U2NvcmUiOiAwLjB9LCAic3RhcnRlZEV2ZW50IjogeyJzY29yZSI6IDAuOTgyLCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAxLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgImRvc2VDaGFuZ2VkRXZlbnQiOiB7InNjb3JlIjogMC4wMDEsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19LCAic3RvcHBlZEV2ZW50IjogeyJzY29yZSI6IDAuMDAxLCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgImFkdmVyc2VFdmVudCI6IHsic2NvcmUiOiAwLjk5OSwgImFsbGVyZ3lTY29yZSI6IDAuMCwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDEuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX19fSwgInJ1bGVJZCI6ICI3ODYxYzAyNC1hZDFjLTQ3ZTYtYjQwZS1jOTBjYjdiMTllMjYiLCAiZGVyaXZlZEZyb20iOiBbeyJ1aWQiOiAyfV19LCB7InR5cGUiOiAiSUNOb3JtYWxpdHkiLCAiYmVnaW4iOiAxMDQsICJlbmQiOiAxMTMsICJjb3ZlcmVkVGV4dCI6ICJuYXJjb3RpY3MiLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwMDI3NDE1IiwgInByZWZlcnJlZE5hbWUiOiAiTmFyY290aWNzIiwgInNvdXJjZSI6ICJDbGluaWNhbCBJbnNpZ2h0cyAtIERlcml2ZWQgQ29uY2VwdHMiLCAic291cmNlVmVyc2lvbiI6ICJ2MS4wIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiTk9fREVDSVNJT04ifSwgIm5jaUNvZGUiOiAiQzE1MDYiLCAibWVzaElkIjogIk0wMDE0NDgxIiwgImxvaW5jSWQiOiAiTVRIVTAwMzQ3MCxMUDE4MTQ5LTIiLCAiaW5zaWdodE1vZGVsRGF0YSI6IHt9LCAicnVsZUlkIjogImQwMDRkZjYyLWE2NWQtNDEzNi1hYTMyLTE2MWE0M2ViOTUwNiIsICJkZXJpdmVkRnJvbSI6IFt7InVpZCI6IDJ9XX0sIHsidHlwZSI6ICJJQ01lZGljYXRpb24iLCAiYmVnaW4iOiAxMTgsICJlbmQiOiAxMjcsICJjb3ZlcmVkVGV4dCI6ICJOZXVyb250aW4iLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwNjc4MTc2IiwgInByZWZlcnJlZE5hbWUiOiAiTmV1cm9udGluIiwgInNvdXJjZSI6ICJDbGluaWNhbCBJbnNpZ2h0cyAtIERlcml2ZWQgQ29uY2VwdHMiLCAic291cmNlVmVyc2lvbiI6ICJ2MS4wIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgIm5jaUNvZGUiOiAiQzExMDgiLCAibWVzaElkIjogIk0wMTE5NDIwIiwgInJ4Tm9ybUlkIjogIjE5NjQ5OCIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJtZWRpY2F0aW9uIjogeyJ1c2FnZSI6IHsidGFrZW5TY29yZSI6IDEuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMCwgImxhYk1lYXN1cmVtZW50U2NvcmUiOiAwLjB9LCAic3RhcnRlZEV2ZW50IjogeyJzY29yZSI6IDAuOTk4LCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAxLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgImRvc2VDaGFuZ2VkRXZlbnQiOiB7InNjb3JlIjogMC4wMDIsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19LCAic3RvcHBlZEV2ZW50IjogeyJzY29yZSI6IDAuMCwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX0sICJhZHZlcnNlRXZlbnQiOiB7InNjb3JlIjogMC44OTEsICJhbGxlcmd5U2NvcmUiOiAwLjAsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjY3OCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX19fSwgInJ1bGVJZCI6ICI3ODYxYzAyNC1hZDFjLTQ3ZTYtYjQwZS1jOTBjYjdiMTllMjYiLCAiZGVyaXZlZEZyb20iOiBbeyJ1aWQiOiAzfV19LCB7InR5cGUiOiAiSUNOb3JtYWxpdHkiLCAiYmVnaW4iOiAxMTgsICJlbmQiOiAxMjcsICJjb3ZlcmVkVGV4dCI6ICJOZXVyb250aW4iLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwNjc4MTc2IiwgInByZWZlcnJlZE5hbWUiOiAiTmV1cm9udGluIiwgInNvdXJjZSI6ICJDbGluaWNhbCBJbnNpZ2h0cyAtIERlcml2ZWQgQ29uY2VwdHMiLCAic291cmNlVmVyc2lvbiI6ICJ2MS4wIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiTk9fREVDSVNJT04ifSwgIm5jaUNvZGUiOiAiQzExMDgiLCAibWVzaElkIjogIk0wMTE5NDIwIiwgInJ4Tm9ybUlkIjogIjE5NjQ5OCIsICJpbnNpZ2h0TW9kZWxEYXRhIjoge30sICJydWxlSWQiOiAiZDAwNGRmNjItYTY1ZC00MTM2LWFhMzItMTYxYTQzZWI5NTA2IiwgImRlcml2ZWRGcm9tIjogW3sidWlkIjogM31dfSwgeyJ0eXBlIjogIklDTm9ybWFsaXR5IiwgImJlZ2luIjogMTE4LCAiZW5kIjogMTI3LCAiY292ZXJlZFRleHQiOiAiTmV1cm9udGluIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDY3ODE3NiIsICJwcmVmZXJyZWROYW1lIjogIk5ldXJvbnRpbiIsICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBEZXJpdmVkIENvbmNlcHRzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIk5PX0RFQ0lTSU9OIn0sICJpbnNpZ2h0TW9kZWxEYXRhIjoge30sICJydWxlSWQiOiAiMzQzZTYxNTgtMmMzMC00NzI2LWJlNzEtMzNhNTcwYjI4NzAzIiwgImRlcml2ZWRGcm9tIjogW3sidWlkIjogNn1dfSwgeyJ0eXBlIjogIklDRGlhZ25vc2lzIiwgImJlZ2luIjogMTY1LCAiZW5kIjogMTg1LCAiY292ZXJlZFRleHQiOiAidHJpZ2VtaW5hbCBuZXVyYWxnaWEiLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwMDQwOTk3IiwgInByZWZlcnJlZE5hbWUiOiAiVHJpZ2VtaW5hbCBOZXVyYWxnaWEiLCAic291cmNlIjogIkNsaW5pY2FsIEluc2lnaHRzIC0gRGVyaXZlZCBDb25jZXB0cyIsICJzb3VyY2VWZXJzaW9uIjogInYxLjAiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJWQUxJRCJ9LCAiaWNkMTBDb2RlIjogIkIwMi4yLEc1MC4wLEc1My4wIiwgInNub21lZENvbmNlcHRJZCI6ICIzMTY4MTAwNSIsICJtZXNoSWQiOiAiTTAwMjE5NjYiLCAiaW5zaWdodE1vZGVsRGF0YSI6IHsiZGlhZ25vc2lzIjogeyJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDEuMCwgInBhdGllbnRSZXBvcnRlZFNjb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9LCAic3VzcGVjdGVkU2NvcmUiOiAwLjAsICJzeW1wdG9tU2NvcmUiOiAwLjAsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX0sICJydWxlSWQiOiAiNjk4ZjJiMTktMjdiNi00ZGFiLTkxNTAtN2Q3ZWYzYjAzYTVjIiwgImRlcml2ZWRGcm9tIjogW3sidWlkIjogNH1dfSwgeyJ0eXBlIjogIklDRGlhZ25vc2lzIiwgImJlZ2luIjogMTkwLCAiZW5kIjogMjAyLCAiY292ZXJlZFRleHQiOiAiY2hyb25pYyBwYWluIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDE1MDA1NSIsICJwcmVmZXJyZWROYW1lIjogIkNocm9uaWMgcGFpbiIsICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBEZXJpdmVkIENvbmNlcHRzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIlZBTElEIn0sICJpY2Q5Q29kZSI6ICIzMzguMjkiLCAiaWNkMTBDb2RlIjogIlI1MixSNTIuMiIsICJuY2lDb2RlIjogIkMyNjk0MCIsICJzbm9tZWRDb25jZXB0SWQiOiAiODI0MjMwMDEiLCAibWVzaElkIjogIk0wNTQ5ODM3IiwgImxvaW5jSWQiOiAiTVRIVTAxMzM4MixMQTIyMDkzLTEiLCAiaW5zaWdodE1vZGVsRGF0YSI6IHsiZGlhZ25vc2lzIjogeyJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDEuMCwgInBhdGllbnRSZXBvcnRlZFNjb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9LCAic3VzcGVjdGVkU2NvcmUiOiAwLjAsICJzeW1wdG9tU2NvcmUiOiAwLjAyMSwgInRyYXVtYVNjb3JlIjogMC4wLCAiZmFtaWx5SGlzdG9yeVNjb3JlIjogMC4wfX0sICJydWxlSWQiOiAiM2NmMzhlMjktNzdmMC00N2IzLTk5NTAtNGEwMjkyZjY0YzkzIiwgImRlcml2ZWRGcm9tIjogW3sidWlkIjogNX1dfV0sICJNZWRpY2F0aW9uSW5kIjogW3sidHlwZSI6ICJhY2kuTWVkaWNhdGlvbkluZCIsICJ1aWQiOiA4LCAiYmVnaW4iOiAxMDQsICJlbmQiOiAxMTMsICJjb3ZlcmVkVGV4dCI6ICJuYXJjb3RpY3MiLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwMDI3NDE1IiwgImRydWciOiBbeyJjb3ZlcmVkVGV4dCI6ICJuYXJjb3RpY3MiLCAiY3VpIjogIkMwMDI3NDE1IiwgImNvbXBsZXgiOiAiZmFsc2UiLCAiZW5kIjogMTEzLCAidHlwZSI6ICJhY2kuSW5kX0RydWciLCAibmFtZTEiOiBbeyJjb3ZlcmVkVGV4dCI6ICJuYXJjb3RpY3MiLCAiY3VpIjogIkMwMDI3NDE1IiwgImRydWdTdXJmYWNlRm9ybSI6ICJuYXJjb3RpY3MiLCAiZHJ1Z05vcm1hbGl6ZWROYW1lIjogIm5hcmNvdGljcyIsICJlbmQiOiAxMTMsICJ0eXBlIjogImFjaS5EcnVnTmFtZSIsICJiZWdpbiI6IDEwNH1dLCAiYmVnaW4iOiAxMDR9XSwgImluc2lnaHRNb2RlbERhdGEiOiB7Im1lZGljYXRpb24iOiB7InVzYWdlIjogeyJ0YWtlblNjb3JlIjogMS4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wLCAibGFiTWVhc3VyZW1lbnRTY29yZSI6IDAuMH0sICJzdGFydGVkRXZlbnQiOiB7InNjb3JlIjogMC45ODIsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDEuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19LCAiZG9zZUNoYW5nZWRFdmVudCI6IHsic2NvcmUiOiAwLjAwMSwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX0sICJzdG9wcGVkRXZlbnQiOiB7InNjb3JlIjogMC4wMDEsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19LCAiYWR2ZXJzZUV2ZW50IjogeyJzY29yZSI6IDAuOTk5LCAiYWxsZXJneVNjb3JlIjogMC4wLCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMS4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fX19LCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJWQUxJRCIsICJjb21tZW50IjogIm1hcmtlZCBWQUxJRCBieSBjbGluaWNhbCBpbnNpZ2h0IG1vZGVscy4ifX0sIHsidHlwZSI6ICJhY2kuTWVkaWNhdGlvbkluZCIsICJ1aWQiOiA5LCAiYmVnaW4iOiAxMTgsICJlbmQiOiAxMjcsICJjb3ZlcmVkVGV4dCI6ICJOZXVyb250aW4iLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwNjc4MTc2IiwgImRydWciOiBbeyJjb3ZlcmVkVGV4dCI6ICJOZXVyb250aW4iLCAiY3VpIjogIkMwNjc4MTc2IiwgImNvbXBsZXgiOiAiZmFsc2UiLCAiZW5kIjogMTI3LCAidHlwZSI6ICJhY2kuSW5kX0RydWciLCAibmFtZTEiOiBbeyJyeE5vcm1JRCI6ICIxOTY0OTgiLCAiY292ZXJlZFRleHQiOiAiTmV1cm9udGluIiwgImN1aSI6ICJDMDY3ODE3NiIsICJkcnVnU3VyZmFjZUZvcm0iOiAiTmV1cm9udGluIiwgImRydWdOb3JtYWxpemVkTmFtZSI6ICJuZXVyb250aW4iLCAiZW5kIjogMTI3LCAidHlwZSI6ICJhY2kuRHJ1Z05hbWUiLCAiYmVnaW4iOiAxMTh9XSwgImJlZ2luIjogMTE4fV0sICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJtZWRpY2F0aW9uIjogeyJ1c2FnZSI6IHsidGFrZW5TY29yZSI6IDEuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMCwgImxhYk1lYXN1cmVtZW50U2NvcmUiOiAwLjB9LCAic3RhcnRlZEV2ZW50IjogeyJzY29yZSI6IDAuOTk4LCAidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAxLjAsICJjb25zaWRlcmluZ1Njb3JlIjogMC4wLCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjB9fSwgImRvc2VDaGFuZ2VkRXZlbnQiOiB7InNjb3JlIjogMC4wMDIsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH19LCAic3RvcHBlZEV2ZW50IjogeyJzY29yZSI6IDAuMCwgInVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC4wLCAiY29uc2lkZXJpbmdTY29yZSI6IDAuMCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX0sICJhZHZlcnNlRXZlbnQiOiB7InNjb3JlIjogMC44OTEsICJhbGxlcmd5U2NvcmUiOiAwLjAsICJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuMCwgImNvbnNpZGVyaW5nU2NvcmUiOiAwLjY3OCwgImRpc2N1c3NlZFNjb3JlIjogMC4wfX19fSwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQiLCAiY29tbWVudCI6ICJtYXJrZWQgVkFMSUQgYnkgY2xpbmljYWwgaW5zaWdodCBtb2RlbHMuIn19XSwgIlN5bXB0b21EaXNlYXNlSW5kIjogW3sidHlwZSI6ICJhY2kuU3ltcHRvbURpc2Vhc2VJbmQiLCAidWlkIjogMTAsICJiZWdpbiI6IDE2NSwgImVuZCI6IDE4NSwgImNvdmVyZWRUZXh0IjogInRyaWdlbWluYWwgbmV1cmFsZ2lhIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDA0MDk5NyIsICJpY2QxMENvZGUiOiAiRzUwLjAiLCAibW9kYWxpdHkiOiAicG90ZW50aWFsIiwgInN5bXB0b21EaXNlYXNlU3VyZmFjZUZvcm0iOiAidHJpZ2VtaW5hbCBuZXVyYWxnaWEiLCAic25vbWVkQ29uY2VwdElkIjogIjMxNjgxMDA1IiwgImNjc0NvZGUiOiAiOTUiLCAic3ltcHRvbURpc2Vhc2VOb3JtYWxpemVkTmFtZSI6ICJ0cmlnZW1pbmFsIG5ldXJhbGdpYSIsICJpY2Q5Q29kZSI6ICIzNTAuMSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIlZBTElEIn0sICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMS4wLCAicGF0aWVudFJlcG9ydGVkU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMCwgInN5bXB0b21TY29yZSI6IDAuMCwgInRyYXVtYVNjb3JlIjogMC4wLCAiZmFtaWx5SGlzdG9yeVNjb3JlIjogMC4wMDN9fX0sIHsidHlwZSI6ICJhY2kuU3ltcHRvbURpc2Vhc2VJbmQiLCAidWlkIjogMTEsICJiZWdpbiI6IDE5MCwgImVuZCI6IDIwMiwgImNvdmVyZWRUZXh0IjogImNocm9uaWMgcGFpbiIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzAxNTAwNTUiLCAiaWNkMTBDb2RlIjogIlI1Mi4yLFI1MiIsICJtb2RhbGl0eSI6ICJwb3RlbnRpYWwiLCAic3ltcHRvbURpc2Vhc2VTdXJmYWNlRm9ybSI6ICJjaHJvbmljIHBhaW4iLCAic25vbWVkQ29uY2VwdElkIjogIjgyNDIzMDAxIiwgImNjc0NvZGUiOiAiMjU5IiwgInN5bXB0b21EaXNlYXNlTm9ybWFsaXplZE5hbWUiOiAiY2hyb25pYyBwYWluIiwgImljZDlDb2RlIjogIjMzOC4yOSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIlZBTElEIn0sICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMS4wLCAicGF0aWVudFJlcG9ydGVkU2NvcmUiOiAwLjAsICJkaXNjdXNzZWRTY29yZSI6IDAuMH0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMCwgInN5bXB0b21TY29yZSI6IDAuMDIxLCAidHJhdW1hU2NvcmUiOiAwLjAsICJmYW1pbHlIaXN0b3J5U2NvcmUiOiAwLjB9fX1dLCAic3BlbGxpbmdDb3JyZWN0aW9ucyI6IFt7ImJlZ2luIjogMTQ2LCAiZW5kIjogMTU2LCAiY292ZXJlZFRleHQiOiAicGVyc2NyaWJlZCIsICJzdWdnZXN0aW9ucyI6IFt7InRleHQiOiAicHJlc2NyaWJlZCIsICJjb25maWRlbmNlIjogMC45LCAiYXBwbGllZCI6IHRydWV9LCB7InRleHQiOiAicHJvc2NyaWJlZCIsICJjb25maWRlbmNlIjogMC44MDMsICJhcHBsaWVkIjogZmFsc2V9LCB7InRleHQiOiAiZGVzY3JpYmVkIiwgImNvbmZpZGVuY2UiOiAwLjgwMiwgImFwcGxpZWQiOiBmYWxzZX0sIHsidGV4dCI6ICJwcmVzY3JpYmUiLCAiY29uZmlkZW5jZSI6IDAuODAxLCAiYXBwbGllZCI6IGZhbHNlfSwgeyJ0ZXh0IjogInByZXNjcmliZXIiLCAiY29uZmlkZW5jZSI6IDAuOCwgImFwcGxpZWQiOiBmYWxzZX1dfV0sICJzcGVsbENvcnJlY3RlZFRleHQiOiBbeyJjb3JyZWN0ZWRUZXh0IjogIlRoZSBwYXRpZW50J3MgY291cnNlIGNvdWxkIGhhdmUgYmVlbiBjb21wbGljYXRlZCBieSBtZW50YWwgc3RhdHVzIGNoYW5nZXMgc2Vjb25kYXJ5IHRvIGEgY29tYmluYXRpb24gb2YgbmFyY290aWNzIGFuZCBOZXVyb250aW4sIHdoaWNoIHdhcyBhbG1vc3QgcHJlc2NyaWJlZCBmb3IgaGlzIHRyaWdlbWluYWwgbmV1cmFsZ2lhIGFuZCBjaHJvbmljIHBhaW4uIFxuXG4ifV19\" } }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/covered-text\", \"valueString\": \"Neurontin\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\", \"valueInteger\": 118 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\", \"valueInteger\": 127 }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Adverse_Event_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 0.891 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Adverse Event Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/span\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"1b32afb1d37b7a442c676f8f191800d89882c8d8163b6379d1c387f5\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"actuality\": \"actual\", \"event\": { \"coding\": [ { \"code\": \"C0678176\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } ], \"text\": \"neurontin\" }, \"resourceType\": \"AdverseEvent\" }","title":"Adverse Event Resources"},{"location":"examples/acd/adverse_event/#codes","text":"It's easy to see that each of our adverse event resources contains a single UMLS code for the event. These codes are associated with a surface form that caused the adverse event to be created. A UMLS concept is not an ideal code for representing an Adverse Event. The FHIR standard recommends a SNOMED CT value set . Because adverse events often are of interest to regulators, MedDRA codes are also highly desirable. These coding systems are not yet provided by ACD, but we hope to add these codes if/when the NLP technology is available. Adverse Event Text Code System narcotics C0027415 http://terminology.hl7.org/CodeSystem/umls neurontin C0678176 http://terminology.hl7.org/CodeSystem/umls","title":"Codes"},{"location":"examples/acd/adverse_event/#actuality","text":"While the FHIR standard distinguishes between potential (or near-miss) adverse events and actual events, the nlp-insights service creates adverse event resources as actual, and does not distinguish between actual and potential events. It is possible that the problem could be solved (in some cases) with a code change to nlp-insights. For example, suppose the text passage was something similar to: The patient's course could have been complicated by mental status \\ changes secondary to a combination of narcotics and Neurontin, \\ which was almost perscribed for his trigeminal neuralgia and chronic pain. ACD would return confidences with a high value for the \"considering\" usage score: \"adverseEvent\": { \"score\": 0.999, \"allergyScore\": 0, \"usage\": { \"explicitScore\": 0, \"consideringScore\": 1, \"discussedScore\": 0 } }, This could be leveraged by nlp-insights to determine that the event did not actually happen. In building the reference implementation, we did not have sufficient examples to determine if this approach would work well enough to be of value in practice, or what value of the consideringScore should be used as the decision boundary. Another consideration was that additional functionality might someday be added to ACD that solves this problem in a better way. The determination of actuality is therefore still an area of research and further contribution.","title":"Actuality"},{"location":"examples/acd/adverse_event/#evidence","text":"The available evidence is consistent with other derived resource types . The span will cover the surface form used to construct the UMLS code for the event. A confidence will be returned for the Adverse Event. No other confidences are returned at this time.","title":"Evidence"},{"location":"examples/acd/configure_acd/","text":"Configure nlp-insights to use ACD for NLP Once nlp-insights has been configured to use ACD, it will use the ACD service for it's NLP operations by default. Start the nlp-insights service If the nlp-insights service has not been started, follow the directions here to start the server in a local container. Create a configuration for ACD The first configuration step is to create the definition for the ACD service. Replace <your_api_key_here> with the key for your instance. You can find the api key by opening your service from the IBM Cloud resource list and navigating to \"service credentials\". The nlp-insights service needs at least reader authority. Check that the endpoint is correct for your service. The nlp-insights service is designed for the out of the box wh_acd.ibm_clinical_insights_v1.0_standard_flow. Customized flows may require modification of the source code in order to fully leverage the customizations. curl -w \"%{http_code}\\n\" -o - -XPOST localhost:5000/config/definition -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"name\": \"acdconfig1\", \"nlpServiceType\": \"acd\", \"config\": { \"apikey\": <your-api-key-here>, \"endpoint\": \"https://us-east.wh-acd.cloud.ibm.com/wh-acd/api\", \"flow\": \"wh_acd.ibm_clinical_insights_v1.0_standard_flow\" } } EOF output 200 Set ACD as the default configuration Now the definition of the ACD service exists, we can set it as the default service. You should be aware that this operation affects all users of the nlp-insights service. curl -w \"\\n%{http_code}\\n\" -o - -XPOST localhost:5000/config/setDefault?name=acdconfig1 output Default config set to: acdconfig1 200 Configuring at deploy time In some environments (such as k8s), it may be necessary to configure the server at deploy time, rather than with a REST API. Instructions for how to do that is located here .","title":"Configuration"},{"location":"examples/acd/configure_acd/#configure-nlp-insights-to-use-acd-for-nlp","text":"Once nlp-insights has been configured to use ACD, it will use the ACD service for it's NLP operations by default.","title":"Configure nlp-insights to use ACD for NLP"},{"location":"examples/acd/configure_acd/#start-the-nlp-insights-service","text":"If the nlp-insights service has not been started, follow the directions here to start the server in a local container.","title":"Start the nlp-insights service"},{"location":"examples/acd/configure_acd/#create-a-configuration-for-acd","text":"The first configuration step is to create the definition for the ACD service. Replace <your_api_key_here> with the key for your instance. You can find the api key by opening your service from the IBM Cloud resource list and navigating to \"service credentials\". The nlp-insights service needs at least reader authority. Check that the endpoint is correct for your service. The nlp-insights service is designed for the out of the box wh_acd.ibm_clinical_insights_v1.0_standard_flow. Customized flows may require modification of the source code in order to fully leverage the customizations. curl -w \"%{http_code}\\n\" -o - -XPOST localhost:5000/config/definition -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"name\": \"acdconfig1\", \"nlpServiceType\": \"acd\", \"config\": { \"apikey\": <your-api-key-here>, \"endpoint\": \"https://us-east.wh-acd.cloud.ibm.com/wh-acd/api\", \"flow\": \"wh_acd.ibm_clinical_insights_v1.0_standard_flow\" } } EOF output 200","title":"Create a configuration for ACD"},{"location":"examples/acd/configure_acd/#set-acd-as-the-default-configuration","text":"Now the definition of the ACD service exists, we can set it as the default service. You should be aware that this operation affects all users of the nlp-insights service. curl -w \"\\n%{http_code}\\n\" -o - -XPOST localhost:5000/config/setDefault?name=acdconfig1 output Default config set to: acdconfig1 200","title":"Set ACD as the default configuration"},{"location":"examples/acd/configure_acd/#configuring-at-deploy-time","text":"In some environments (such as k8s), it may be necessary to configure the server at deploy time, rather than with a REST API. Instructions for how to do that is located here .","title":"Configuring at deploy time"},{"location":"examples/acd/context_awareness/","text":"Context awareness with ACD A significant advantage of configuring nlp insights with ACD is that in addition to simple concept detection, the context of the concept is considered. This allows nlp-insights to avoid creating resources for concepts that do not apply to the patient. Some example phrases with concepts that will not result in derived resources. The patient does not have a myocardial infarction The patient's mother had a myocardial infarction last year The patient is concerned that he may have had a myocardial infarction The nlp-insights service takes advantage of ACD attributes for improved handling of these scenarios. Example This example creates a diagnostic report where the text mentions a myocardial infarction that is not for the patient. Configure nlp-insights to use ACD for NLP If the nlp-insights service has not been configured to use ACD by default, follow the steps here . Send the example diagnostic report to the nlp-insights service The Text data in a diagnostic report must be base64 encoded, which can be done with the base64 command in bash. B64_REPORT_TEXT=$(echo \"The patient's mother had a myocardial infarction last year.\" | base64 -w 0) The text can now be included in a diagnostic report and sent to the nlp-insights service, the output of the service is stored in a file /tmp/output.json curl -o /tmp/output.json -XPOST localhost:5000/discoverInsights -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"resourceType\": \"Bundle\", \"id\": \"abc\", \"type\": \"transaction\", \"entry\": [ { \"resource\": { \"id\": \"abcefg-1234567890\", \"status\": \"final\", \"code\": { \"text\": \"Chief complaint Narrative - Reported\" }, \"presentedForm\": [ { \"contentType\": \"text\", \"language\": \"en\", \"data\": \"$B64_REPORT_TEXT\", \"title\": \"ER VISIT\", \"creation\": \"2020-08-02T12:44:55+08:00\" } ], \"resourceType\": \"DiagnosticReport\" }, \"request\": { \"method\": \"POST\", \"url\": \"DiagnosticReport\" } } ] } EOF Inspect the response bundle Although the input text mentions a condition, a resource is not created because the condition is not for the patient. The Diagnostic report and bundle are not modified in any meaningful way. cat /tmp/output.json | jq output.json { \"id\": \"abc\", \"entry\": [ { \"fullUrl\": \"urn:uuid:342ac462-2757-4eda-b901-3e3a636f2636\", \"request\": { \"method\": \"POST\", \"url\": \"DiagnosticReport\" }, \"resource\": { \"id\": \"abcefg-1234567890\", \"code\": { \"text\": \"Chief complaint Narrative - Reported\" }, \"presentedForm\": [ { \"contentType\": \"text\", \"creation\": \"2020-08-02T12:44:55+08:00\", \"data\": \"VGhlIHBhdGllbnQncyBtb3RoZXIgaGFkIGEgbXlvY2FyZGlhbCBpbmZhcmN0aW9uIGxhc3QgeWVhci4K\", \"language\": \"en\", \"title\": \"ER VISIT\" } ], \"status\": \"final\", \"resourceType\": \"DiagnosticReport\" } } ], \"type\": \"transaction\", \"resourceType\": \"Bundle\" } Resources in Bundle: Resource Type Description DiagnosticReport Chief complaint Narrative - Reported","title":"Context Awareness"},{"location":"examples/acd/context_awareness/#context-awareness-with-acd","text":"A significant advantage of configuring nlp insights with ACD is that in addition to simple concept detection, the context of the concept is considered. This allows nlp-insights to avoid creating resources for concepts that do not apply to the patient. Some example phrases with concepts that will not result in derived resources. The patient does not have a myocardial infarction The patient's mother had a myocardial infarction last year The patient is concerned that he may have had a myocardial infarction The nlp-insights service takes advantage of ACD attributes for improved handling of these scenarios.","title":"Context awareness with ACD"},{"location":"examples/acd/context_awareness/#example","text":"This example creates a diagnostic report where the text mentions a myocardial infarction that is not for the patient.","title":"Example"},{"location":"examples/acd/context_awareness/#configure-nlp-insights-to-use-acd-for-nlp","text":"If the nlp-insights service has not been configured to use ACD by default, follow the steps here .","title":"Configure nlp-insights to use ACD for NLP"},{"location":"examples/acd/context_awareness/#send-the-example-diagnostic-report-to-the-nlp-insights-service","text":"The Text data in a diagnostic report must be base64 encoded, which can be done with the base64 command in bash. B64_REPORT_TEXT=$(echo \"The patient's mother had a myocardial infarction last year.\" | base64 -w 0) The text can now be included in a diagnostic report and sent to the nlp-insights service, the output of the service is stored in a file /tmp/output.json curl -o /tmp/output.json -XPOST localhost:5000/discoverInsights -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"resourceType\": \"Bundle\", \"id\": \"abc\", \"type\": \"transaction\", \"entry\": [ { \"resource\": { \"id\": \"abcefg-1234567890\", \"status\": \"final\", \"code\": { \"text\": \"Chief complaint Narrative - Reported\" }, \"presentedForm\": [ { \"contentType\": \"text\", \"language\": \"en\", \"data\": \"$B64_REPORT_TEXT\", \"title\": \"ER VISIT\", \"creation\": \"2020-08-02T12:44:55+08:00\" } ], \"resourceType\": \"DiagnosticReport\" }, \"request\": { \"method\": \"POST\", \"url\": \"DiagnosticReport\" } } ] } EOF","title":"Send the example diagnostic report to the nlp-insights service"},{"location":"examples/acd/context_awareness/#inspect-the-response-bundle","text":"Although the input text mentions a condition, a resource is not created because the condition is not for the patient. The Diagnostic report and bundle are not modified in any meaningful way. cat /tmp/output.json | jq output.json { \"id\": \"abc\", \"entry\": [ { \"fullUrl\": \"urn:uuid:342ac462-2757-4eda-b901-3e3a636f2636\", \"request\": { \"method\": \"POST\", \"url\": \"DiagnosticReport\" }, \"resource\": { \"id\": \"abcefg-1234567890\", \"code\": { \"text\": \"Chief complaint Narrative - Reported\" }, \"presentedForm\": [ { \"contentType\": \"text\", \"creation\": \"2020-08-02T12:44:55+08:00\", \"data\": \"VGhlIHBhdGllbnQncyBtb3RoZXIgaGFkIGEgbXlvY2FyZGlhbCBpbmZhcmN0aW9uIGxhc3QgeWVhci4K\", \"language\": \"en\", \"title\": \"ER VISIT\" } ], \"status\": \"final\", \"resourceType\": \"DiagnosticReport\" } } ], \"type\": \"transaction\", \"resourceType\": \"Bundle\" } Resources in Bundle: Resource Type Description DiagnosticReport Chief complaint Narrative - Reported","title":"Inspect the response bundle"},{"location":"examples/acd/derive_new_resources/","text":"Derive New Resources with nlp-insights and ACD Some resources such as DiagnosticReports and DocumentReferences contain clinical notes or other unstructured text. When the nlp-insights service receives one of these resources, it can derive new FHIR resources for detected concepts. nlp-insights can derive new resources from: DiagnosticReport (from the text at the path DiagnosticReport.presentedForm[].data ) DocumentReference (from the text at the path DocumentReference.content[].attachment.data ) Three types of FHIR resources can be derived by the service: * Condition * MedicationStatement * Adverse Event (new as of 0.1.0) Configure nlp-insights to use ACD for NLP If the nlp-insights service has not been configured to use ACD by default, follow the steps here . Derive new resources from a diagnostic report This example creates a diagnostic report where the text mentions a condition ( myocardial infarction ) and a medication ( Losartan ). The Text data in a diagnostic report must be base64 encoded, which can be done with the base64 command in bash. B64_REPORT_TEXT=$(echo 'The patient had a myocardial infarction in 2015 and was prescribed Losartan.' | base64 -w 0) The text can now be included in a diagnostic report and sent to the nlp-insights service. The curl command stores the response json in a file /tmp/output.json for future analysis. curl -w \"\\n%{http_code}\\n\" -s -o /tmp/output.json -XPOST localhost:5000/discoverInsights -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"resourceType\": \"Bundle\", \"id\": \"abc\", \"type\": \"transaction\", \"entry\": [ { \"resource\": { \"id\": \"abcefg-1234567890\", \"status\": \"final\", \"code\": { \"text\": \"Chief complaint Narrative - Reported\" }, \"presentedForm\": [ { \"contentType\": \"text\", \"language\": \"en\", \"data\": \"$B64_REPORT_TEXT\", \"title\": \"ER VISIT\", \"creation\": \"2020-08-02T12:44:55+08:00\" } ], \"resourceType\": \"DiagnosticReport\" }, \"request\": { \"method\": \"POST\", \"url\": \"DiagnosticReport\" } } ] } EOF output 200 cat /tmp/output.json | jq Returned Bundle { \"id\": \"abc\", \"entry\": [ { \"fullUrl\": \"urn:uuid:82c9b48b-04f7-4a9f-8d01-5b7619303b71\", \"request\": { \"method\": \"POST\", \"url\": \"DiagnosticReport\" }, \"resource\": { \"id\": \"abcefg-1234567890\", \"code\": { \"text\": \"Chief complaint Narrative - Reported\" }, \"presentedForm\": [ { \"contentType\": \"text\", \"creation\": \"2020-08-02T12:44:55+08:00\", \"data\": \"VGhlIHBhdGllbnQgaGFkIGEgbXlvY2FyZGlhbCBpbmZhcmN0aW9uIGluIDIwMTUgYW5kIHdhcyBwcmVzY3JpYmVkIExvc2FydGFuLgo=\", \"language\": \"en\", \"title\": \"ER VISIT\" } ], \"status\": \"final\", \"resourceType\": \"DiagnosticReport\" } }, { \"request\": { \"method\": \"POST\", \"url\": \"Condition\" }, \"resource\": { \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"3fffb27d5ebe1c952d6df03de996ed5fc90edb5d28c5972f89720eb5\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"Condition\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:82c9b48b-04f7-4a9f-8d01-5b7619303b71\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"DiagnosticReport.presentedForm[0].data\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"\" } }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/covered-text\", \"valueString\": \"myocardial infarction\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\", \"valueInteger\": 18 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\", \"valueInteger\": 39 }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Diagnosis_Explicit_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 0.994 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Explicit Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Diagnosis_Patient_Reported_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 0.003 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Patient Reported Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/span\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"3fffb27d5ebe1c952d6df03de996ed5fc90edb5d28c5972f89720eb5\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": { \"coding\": [ { \"code\": \"C0027051\", \"display\": \"myocardial infarction\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" }, { \"code\": \"22298006\", \"system\": \"http://snomed.info/sct\" }, { \"code\": \"410.90\", \"system\": \"http://hl7.org/fhir/sid/icd-9-cm\" }, { \"code\": \"I21.9\", \"system\": \"http://hl7.org/fhir/sid/icd-10-cm\" } ], \"text\": \"myocardial infarction\" }, \"resourceType\": \"Condition\" } }, { \"request\": { \"method\": \"POST\", \"url\": \"MedicationStatement\" }, \"resource\": { \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"52381140c4ee7bd330c374862852d0b822b436782acb6421b5685ef5\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"MedicationStatement\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:82c9b48b-04f7-4a9f-8d01-5b7619303b71\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"DiagnosticReport.presentedForm[0].data\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"\" } }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/covered-text\", \"valueString\": \"Losartan\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\", \"valueInteger\": 67 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\", \"valueInteger\": 75 }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Medication_Taken_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 1 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Medication Taken Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/span\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"52381140c4ee7bd330c374862852d0b822b436782acb6421b5685ef5\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"medicationCodeableConcept\": { \"coding\": [ { \"code\": \"C0126174\", \"display\": \"Losartan\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" }, { \"code\": \"52175\", \"system\": \"http://www.nlm.nih.gov/research/umls/rxnorm\" } ], \"text\": \"Losartan\" }, \"status\": \"unknown\", \"resourceType\": \"MedicationStatement\" } } ], \"type\": \"transaction\", \"resourceType\": \"Bundle\" } In addition to the original resources, the returned bundle has two new entries with derived resources. We'll look at the codes associated with these resources independently. Resource Type Description DiagnosticReport Chief complaint Narrative - Reported Condition myocardial infarction MedicationStatement Losartan Derived condition codes Included in the condition are coding values for a number of industry standard systems that ACD understands. System Code Display http://terminology.hl7.org/CodeSystem/umls C0027051 myocardial infarction http://snomed.info/sct 22298006 http://hl7.org/fhir/sid/icd-9-cm 410.90 http://hl7.org/fhir/sid/icd-10-cm I21.9 Derived MedicationStatement codes ACD understands RxNorm, an industry standard coding system for medications. When ACD is configured as the NLP service for nlp-insights, RxNorm codes will added to derived MedicationStatements in addition to UMLS codes. System Code Display http://terminology.hl7.org/CodeSystem/umls C0126174 Losartan http://www.nlm.nih.gov/research/umls/rxnorm 52175 Evidence The structure of derived resources is based on the Alvearie FHIR IG . The nlp-insights service adds detailed information to the derived resource to explain what caused the resource to be created. Insight Summary Each derived resource has an insight summary extension. The summary extension for the derived Condition looks like this: { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"3fffb27d5ebe1c952d6df03de996ed5fc90edb5d28c5972f89720eb5\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } The insight id has a system and identifier that together identify the insight. In this example, the system tells us that the insight was discovered using ACD. The identifier value is unique (within the system) to this insight. The category tells us that the resource was created using Natural Language Processing. Insight Extension in Resource Meta The insight identified by the summary extension has an insight extension in the resource's meta. The insight extension contains lots of details about what the insight applies to and why it was created. Although the alvearie FHIR IG supports multiple insights, nlp-insights will create a single insight in the meta when a resource is derived. Other services are able to additional insights if they choose to. Insight extension for the derived Condition { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"3fffb27d5ebe1c952d6df03de996ed5fc90edb5d28c5972f89720eb5\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"Condition\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:82c9b48b-04f7-4a9f-8d01-5b7619303b71\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"DiagnosticReport.presentedForm[0].data\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"\" } }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/covered-text\", \"valueString\": \"myocardial infarction\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\", \"valueInteger\": 18 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\", \"valueInteger\": 39 }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Diagnosis_Explicit_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 0.994 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Explicit Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Diagnosis_Patient_Reported_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 0.003 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Patient Reported Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/span\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } The extensions of interest within the insight extension are: extension purpose insight-id identifier for the insight. path HL7 FHIR Path to the part of this resource that the insight applies to. In this case this will be the root of the derived object. insight-detail Detailed supporting evidence for the insight. Insight detail The insight detail extension provides information about why the insight got created: Extension Purpose reference The resource that contained the text that was used to create the insight reference-path HL7 FHIR Path that describes the location of the text used to create the insight (within reference) evaluated-output base64 response from the ACD Service insight-result value specific results for the insight. This structure contains one or more spans within the text at reference-path that support the insight. Spans The insight-result contains one or more span extensions. Each span contains Extension Purpose covered text text that the span covers begin offset in the original text that begins the span end offset in the original text that ends the span confidence repeatable extension with a confidence score Confidence scores ACD confidence scores are directional; they are indicators of confidence of \"context\", rather than simple concept detection correctness. A Span may have more than a single direction of confidence associated with it. Confidence extension for a condition { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Diagnosis_Explicit_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 0.994 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Explicit Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" } { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Diagnosis_Patient_Reported_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 0.003 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Patient Reported Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" } Condition confidence score The span in the derived condition has two confidence scores Description Score Explicit Score 0.994 Patient Reported Score 0.003 This tells us that ACD (strongly) believed the span indicated an explicit mention of the condition. It also tells us that ACD did not believe that this condition is something that the patient said they had. Medication confidence score The span in the derived medication resource has a different score than the condition. Description Score Medication Taken Score 1 This score tells us that ACD strongly believes that the text says that the patient took the medication.","title":"Derive New Resources"},{"location":"examples/acd/derive_new_resources/#derive-new-resources-with-nlp-insights-and-acd","text":"Some resources such as DiagnosticReports and DocumentReferences contain clinical notes or other unstructured text. When the nlp-insights service receives one of these resources, it can derive new FHIR resources for detected concepts. nlp-insights can derive new resources from: DiagnosticReport (from the text at the path DiagnosticReport.presentedForm[].data ) DocumentReference (from the text at the path DocumentReference.content[].attachment.data ) Three types of FHIR resources can be derived by the service: * Condition * MedicationStatement * Adverse Event (new as of 0.1.0)","title":"Derive New Resources with nlp-insights and ACD"},{"location":"examples/acd/derive_new_resources/#configure-nlp-insights-to-use-acd-for-nlp","text":"If the nlp-insights service has not been configured to use ACD by default, follow the steps here .","title":"Configure nlp-insights to use ACD for NLP"},{"location":"examples/acd/derive_new_resources/#derive-new-resources-from-a-diagnostic-report","text":"This example creates a diagnostic report where the text mentions a condition ( myocardial infarction ) and a medication ( Losartan ). The Text data in a diagnostic report must be base64 encoded, which can be done with the base64 command in bash. B64_REPORT_TEXT=$(echo 'The patient had a myocardial infarction in 2015 and was prescribed Losartan.' | base64 -w 0) The text can now be included in a diagnostic report and sent to the nlp-insights service. The curl command stores the response json in a file /tmp/output.json for future analysis. curl -w \"\\n%{http_code}\\n\" -s -o /tmp/output.json -XPOST localhost:5000/discoverInsights -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"resourceType\": \"Bundle\", \"id\": \"abc\", \"type\": \"transaction\", \"entry\": [ { \"resource\": { \"id\": \"abcefg-1234567890\", \"status\": \"final\", \"code\": { \"text\": \"Chief complaint Narrative - Reported\" }, \"presentedForm\": [ { \"contentType\": \"text\", \"language\": \"en\", \"data\": \"$B64_REPORT_TEXT\", \"title\": \"ER VISIT\", \"creation\": \"2020-08-02T12:44:55+08:00\" } ], \"resourceType\": \"DiagnosticReport\" }, \"request\": { \"method\": \"POST\", \"url\": \"DiagnosticReport\" } } ] } EOF output 200 cat /tmp/output.json | jq Returned Bundle { \"id\": \"abc\", \"entry\": [ { \"fullUrl\": \"urn:uuid:82c9b48b-04f7-4a9f-8d01-5b7619303b71\", \"request\": { \"method\": \"POST\", \"url\": \"DiagnosticReport\" }, \"resource\": { \"id\": \"abcefg-1234567890\", \"code\": { \"text\": \"Chief complaint Narrative - Reported\" }, \"presentedForm\": [ { \"contentType\": \"text\", \"creation\": \"2020-08-02T12:44:55+08:00\", \"data\": \"VGhlIHBhdGllbnQgaGFkIGEgbXlvY2FyZGlhbCBpbmZhcmN0aW9uIGluIDIwMTUgYW5kIHdhcyBwcmVzY3JpYmVkIExvc2FydGFuLgo=\", \"language\": \"en\", \"title\": \"ER VISIT\" } ], \"status\": \"final\", \"resourceType\": \"DiagnosticReport\" } }, { \"request\": { \"method\": \"POST\", \"url\": \"Condition\" }, \"resource\": { \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"3fffb27d5ebe1c952d6df03de996ed5fc90edb5d28c5972f89720eb5\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"Condition\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:82c9b48b-04f7-4a9f-8d01-5b7619303b71\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"DiagnosticReport.presentedForm[0].data\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"\" } }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/covered-text\", \"valueString\": \"myocardial infarction\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\", \"valueInteger\": 18 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\", \"valueInteger\": 39 }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Diagnosis_Explicit_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 0.994 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Explicit Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Diagnosis_Patient_Reported_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 0.003 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Patient Reported Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/span\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"3fffb27d5ebe1c952d6df03de996ed5fc90edb5d28c5972f89720eb5\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": { \"coding\": [ { \"code\": \"C0027051\", \"display\": \"myocardial infarction\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" }, { \"code\": \"22298006\", \"system\": \"http://snomed.info/sct\" }, { \"code\": \"410.90\", \"system\": \"http://hl7.org/fhir/sid/icd-9-cm\" }, { \"code\": \"I21.9\", \"system\": \"http://hl7.org/fhir/sid/icd-10-cm\" } ], \"text\": \"myocardial infarction\" }, \"resourceType\": \"Condition\" } }, { \"request\": { \"method\": \"POST\", \"url\": \"MedicationStatement\" }, \"resource\": { \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"52381140c4ee7bd330c374862852d0b822b436782acb6421b5685ef5\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"MedicationStatement\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:82c9b48b-04f7-4a9f-8d01-5b7619303b71\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"DiagnosticReport.presentedForm[0].data\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"\" } }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/covered-text\", \"valueString\": \"Losartan\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\", \"valueInteger\": 67 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\", \"valueInteger\": 75 }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Medication_Taken_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 1 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Medication Taken Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/span\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"52381140c4ee7bd330c374862852d0b822b436782acb6421b5685ef5\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"medicationCodeableConcept\": { \"coding\": [ { \"code\": \"C0126174\", \"display\": \"Losartan\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" }, { \"code\": \"52175\", \"system\": \"http://www.nlm.nih.gov/research/umls/rxnorm\" } ], \"text\": \"Losartan\" }, \"status\": \"unknown\", \"resourceType\": \"MedicationStatement\" } } ], \"type\": \"transaction\", \"resourceType\": \"Bundle\" } In addition to the original resources, the returned bundle has two new entries with derived resources. We'll look at the codes associated with these resources independently. Resource Type Description DiagnosticReport Chief complaint Narrative - Reported Condition myocardial infarction MedicationStatement Losartan","title":"Derive new resources from a diagnostic report"},{"location":"examples/acd/derive_new_resources/#derived-condition-codes","text":"Included in the condition are coding values for a number of industry standard systems that ACD understands. System Code Display http://terminology.hl7.org/CodeSystem/umls C0027051 myocardial infarction http://snomed.info/sct 22298006 http://hl7.org/fhir/sid/icd-9-cm 410.90 http://hl7.org/fhir/sid/icd-10-cm I21.9","title":"Derived condition codes"},{"location":"examples/acd/derive_new_resources/#derived-medicationstatement-codes","text":"ACD understands RxNorm, an industry standard coding system for medications. When ACD is configured as the NLP service for nlp-insights, RxNorm codes will added to derived MedicationStatements in addition to UMLS codes. System Code Display http://terminology.hl7.org/CodeSystem/umls C0126174 Losartan http://www.nlm.nih.gov/research/umls/rxnorm 52175","title":"Derived MedicationStatement codes"},{"location":"examples/acd/derive_new_resources/#evidence","text":"The structure of derived resources is based on the Alvearie FHIR IG . The nlp-insights service adds detailed information to the derived resource to explain what caused the resource to be created.","title":"Evidence"},{"location":"examples/acd/derive_new_resources/#insight-summary","text":"Each derived resource has an insight summary extension. The summary extension for the derived Condition looks like this: { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"3fffb27d5ebe1c952d6df03de996ed5fc90edb5d28c5972f89720eb5\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } The insight id has a system and identifier that together identify the insight. In this example, the system tells us that the insight was discovered using ACD. The identifier value is unique (within the system) to this insight. The category tells us that the resource was created using Natural Language Processing.","title":"Insight Summary"},{"location":"examples/acd/derive_new_resources/#insight-extension-in-resource-meta","text":"The insight identified by the summary extension has an insight extension in the resource's meta. The insight extension contains lots of details about what the insight applies to and why it was created. Although the alvearie FHIR IG supports multiple insights, nlp-insights will create a single insight in the meta when a resource is derived. Other services are able to additional insights if they choose to. Insight extension for the derived Condition { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"3fffb27d5ebe1c952d6df03de996ed5fc90edb5d28c5972f89720eb5\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"Condition\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:82c9b48b-04f7-4a9f-8d01-5b7619303b71\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"DiagnosticReport.presentedForm[0].data\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"\" } }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/covered-text\", \"valueString\": \"myocardial infarction\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\", \"valueInteger\": 18 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\", \"valueInteger\": 39 }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Diagnosis_Explicit_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 0.994 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Explicit Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Diagnosis_Patient_Reported_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 0.003 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Patient Reported Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/span\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } The extensions of interest within the insight extension are: extension purpose insight-id identifier for the insight. path HL7 FHIR Path to the part of this resource that the insight applies to. In this case this will be the root of the derived object. insight-detail Detailed supporting evidence for the insight.","title":"Insight Extension in Resource Meta"},{"location":"examples/acd/derive_new_resources/#insight-detail","text":"The insight detail extension provides information about why the insight got created: Extension Purpose reference The resource that contained the text that was used to create the insight reference-path HL7 FHIR Path that describes the location of the text used to create the insight (within reference) evaluated-output base64 response from the ACD Service insight-result value specific results for the insight. This structure contains one or more spans within the text at reference-path that support the insight.","title":"Insight detail"},{"location":"examples/acd/derive_new_resources/#spans","text":"The insight-result contains one or more span extensions. Each span contains Extension Purpose covered text text that the span covers begin offset in the original text that begins the span end offset in the original text that ends the span confidence repeatable extension with a confidence score","title":"Spans"},{"location":"examples/acd/derive_new_resources/#confidence-scores","text":"ACD confidence scores are directional; they are indicators of confidence of \"context\", rather than simple concept detection correctness. A Span may have more than a single direction of confidence associated with it. Confidence extension for a condition { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Diagnosis_Explicit_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 0.994 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Explicit Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" } { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/method\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"Diagnosis_Patient_Reported_Score\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/1.0/acd-confidence-method\" } ] } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/score\", \"valueDecimal\": 0.003 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/description\", \"valueString\": \"Patient Reported Score\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-confidence\" }","title":"Confidence scores"},{"location":"examples/acd/derive_new_resources/#condition-confidence-score","text":"The span in the derived condition has two confidence scores Description Score Explicit Score 0.994 Patient Reported Score 0.003 This tells us that ACD (strongly) believed the span indicated an explicit mention of the condition. It also tells us that ACD did not believe that this condition is something that the patient said they had.","title":"Condition confidence score"},{"location":"examples/acd/derive_new_resources/#medication-confidence-score","text":"The span in the derived medication resource has a different score than the condition. Description Score Medication Taken Score 1 This score tells us that ACD strongly believes that the text says that the patient took the medication.","title":"Medication confidence score"},{"location":"examples/acd/enrich/","text":"Enrich FHIR resources with nlp-insights and ACD The nlp-insights service supports enrichment of the following types of FHIR resources: Condition AllergyIntolerance A resource is enriched by adding industry standard codes to the resource. These standard codes are derived from a resource's coding text using NLP. This particularly useful when a FHIR resource has a text description of the code, but does not contain industry standard codes such as SNOMED, ICD-9, ICD-10, etc. This tutorial provides examples of enrichment. Configure nlp-insights to use ACD for NLP If the nlp-insights service has not been configured to use ACD by default, follow the steps here . Enrich a Condition In this example, the nlp-insights service is sent a bundle that contains a single condition. The condition has a code with text \"myocardial infarction\", but no coding values. The service will add coding values to the code. This curl command is written to store the response in a file /tmp/output.json for later analysis. curl -w \"\\n%{http_code}\\n\" -s -o /tmp/output.json -XPOST localhost:5000/discoverInsights -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"resourceType\": \"Bundle\", \"id\": \"abc\", \"type\": \"transaction\", \"entry\": [ { \"resource\": { \"id\": \"abcefg-1234567890\", \"code\": { \"text\": \"myocardial infarction\" }, \"subject\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"Condition\" }, \"request\": { \"method\": \"POST\", \"url\": \"Condition\" } } ] } EOF output 200 Enriched condition The response from the service is a bundle with the enriched condition. cat /tmp/output.json | jq Returned Bundle { \"id\": \"abc\", \"entry\": [ { \"fullUrl\": \"urn:uuid:7ea4903e-e14a-4407-8e37-8eae239d964d\", \"request\": { \"method\": \"POST\", \"url\": \"Condition\" }, \"resource\": { \"id\": \"abcefg-1234567890\", \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"53958b4f7cef2dec63f88ff266b1e24bf95d3f12a32e88f7ad764bdb\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"Condition.code.coding\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:7ea4903e-e14a-4407-8e37-8eae239d964d\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"Condition.code.text\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"eyJhdHRyaWJ1dGVWYWx1ZXMiOiBbeyJiZWdpbiI6IDAsICJlbmQiOiAyMSwgImNvdmVyZWRUZXh0IjogIm15b2NhcmRpYWwgaW5mYXJjdGlvbiIsICJuZWdhdGVkIjogZmFsc2UsICJwcmVmZXJyZWROYW1lIjogIm15b2NhcmRpYWwgaW5mYXJjdGlvbiIsICJ2YWx1ZXMiOiBbeyJ2YWx1ZSI6ICJteW9jYXJkaWFsIGluZmFyY3Rpb24ifV0sICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBBdHRyaWJ1dGVzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJjb25jZXB0IjogeyJ1aWQiOiA1fSwgIm5hbWUiOiAiRGlhZ25vc2lzIiwgImljZDlDb2RlIjogIjQxMC45MCIsICJpY2QxMENvZGUiOiAiSTIxLjkiLCAic25vbWVkQ29uY2VwdElkIjogIjIyMjk4MDA2IiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgImluc2lnaHRNb2RlbERhdGEiOiB7ImRpYWdub3NpcyI6IHsidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjkxNywgInBhdGllbnRSZXBvcnRlZFNjb3JlIjogMC4wMDgsICJkaXNjdXNzZWRTY29yZSI6IDAuMDc1fSwgInN1c3BlY3RlZFNjb3JlIjogMC4wOTIsICJzeW1wdG9tU2NvcmUiOiAwLjAsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX0sICJjY3NDb2RlIjogIjEwMCIsICJoY2NDb2RlIjogIjg2In1dLCAiY29uY2VwdHMiOiBbeyJ0eXBlIjogInVtbHMuRmluZGluZyIsICJiZWdpbiI6IDAsICJlbmQiOiAyMSwgImNvdmVyZWRUZXh0IjogIm15b2NhcmRpYWwgaW5mYXJjdGlvbiIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzQ1NTI5NTkiLCAicHJlZmVycmVkTmFtZSI6ICJNeW9jYXJkaWFsIEluZmFyY3Rpb24sIENUQ0FFIiwgInNlbWFudGljVHlwZSI6ICJmbmRnIiwgInNvdXJjZSI6ICJ1bWxzIiwgInNvdXJjZVZlcnNpb24iOiAiMjAyMEFBIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiTk9fREVDSVNJT04ifSwgIm5jaUNvZGUiOiAiQzE0MzY5MSIsICJ2b2NhYnMiOiAiTVRILE5DSV9DVENBRV81LE5DSSJ9LCB7InR5cGUiOiAidW1scy5MYWJvcmF0b3J5T3JUZXN0UmVzdWx0IiwgInVpZCI6IDMsICJiZWdpbiI6IDAsICJlbmQiOiAyMSwgImNvdmVyZWRUZXh0IjogIm15b2NhcmRpYWwgaW5mYXJjdGlvbiIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzA0Mjg5NTMiLCAicHJlZmVycmVkTmFtZSI6ICJFbGVjdHJvY2FyZGlvZ3JhbTogbXlvY2FyZGlhbCBpbmZhcmN0aW9uIChmaW5kaW5nKSIsICJzZW1hbnRpY1R5cGUiOiAibGJ0ciIsICJzb3VyY2UiOiAidW1scyIsICJzb3VyY2VWZXJzaW9uIjogIjIwMjBBQSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIklOVkFMSUQifSwgImljZDEwQ29kZSI6ICJJMjEuNCxJMjEuMjksSTIxLjA5LEkyMS4xOSxSOTQuMzEsSTI1LjIsSTIxLjkiLCAibmNpQ29kZSI6ICJDMTAxNTg5IiwgInNub21lZENvbmNlcHRJZCI6ICIxNjQ4NjUwMDUiLCAidm9jYWJzIjogIkNIVixNVEgsTkNJX0NESVNDLE5DSSxTTk9NRURDVF9VUyJ9LCB7InR5cGUiOiAidW1scy5EaXNlYXNlT3JTeW5kcm9tZSIsICJ1aWQiOiAyLCAiYmVnaW4iOiAwLCAiZW5kIjogMjEsICJjb3ZlcmVkVGV4dCI6ICJteW9jYXJkaWFsIGluZmFyY3Rpb24iLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwMDI3MDUxIiwgInByZWZlcnJlZE5hbWUiOiAiTXlvY2FyZGlhbCBJbmZhcmN0aW9uIiwgInNlbWFudGljVHlwZSI6ICJkc3luIiwgInNvdXJjZSI6ICJ1bWxzIiwgInNvdXJjZVZlcnNpb24iOiAiMjAyMEFBIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiTk9fREVDSVNJT04ifSwgImljZDEwQ29kZSI6ICJJMjEuOSIsICJuY2lDb2RlIjogIkMyNzk5NiIsICJzbm9tZWRDb25jZXB0SWQiOiAiMjIyOTgwMDYiLCAibWVzaElkIjogIk0wMDE0MzQwIiwgImxvaW5jSWQiOiAiTVRIVTAzNTU1MSxMQTE0Mjc0LTcsTFA5ODg4NC03LExBMTYyODYtOSIsICJ2b2NhYnMiOiAiTkNJX05JQ0hELE1USCxMTkMsQ1NQLE1TSCxDU1QsSFBPLE9NSU0sTkNJX0NUQ0FFLENPU1RBUixBSVIsQ0hWLE5DSV9GREEsTUVETElORVBMVVMsTkNJLExDSF9OVyxBT0QsU05PTUVEQ1RfVVMsRFhQIiwgImluc2lnaHRNb2RlbERhdGEiOiB7ImRpYWdub3NpcyI6IHsidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjkxNywgInBhdGllbnRSZXBvcnRlZFNjb3JlIjogMC4wMDgsICJkaXNjdXNzZWRTY29yZSI6IDAuMDc1fSwgInN1c3BlY3RlZFNjb3JlIjogMC4wOTIsICJzeW1wdG9tU2NvcmUiOiAwLjAsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX19LCB7InR5cGUiOiAiSUNEaWFnbm9zaXMiLCAiYmVnaW4iOiAwLCAiZW5kIjogMjEsICJjb3ZlcmVkVGV4dCI6ICJteW9jYXJkaWFsIGluZmFyY3Rpb24iLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwMDI3MDUxIiwgInByZWZlcnJlZE5hbWUiOiAiTXlvY2FyZGlhbCBJbmZhcmN0aW9uIiwgInNvdXJjZSI6ICJDbGluaWNhbCBJbnNpZ2h0cyAtIERlcml2ZWQgQ29uY2VwdHMiLCAic291cmNlVmVyc2lvbiI6ICJ2MS4wIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgImljZDEwQ29kZSI6ICJJMjEuOSIsICJuY2lDb2RlIjogIkMyNzk5NiIsICJzbm9tZWRDb25jZXB0SWQiOiAiMjIyOTgwMDYiLCAibWVzaElkIjogIk0wMDE0MzQwIiwgImxvaW5jSWQiOiAiTVRIVTAzNTU1MSxMQTE0Mjc0LTcsTFA5ODg4NC03LExBMTYyODYtOSIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC45MTcsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMDA4LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjA3NX0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMDkyLCAic3ltcHRvbVNjb3JlIjogMC4wLCAidHJhdW1hU2NvcmUiOiAwLjAsICJmYW1pbHlIaXN0b3J5U2NvcmUiOiAwLjAwM319LCAicnVsZUlkIjogIjY5OGYyYjE5LTI3YjYtNGRhYi05MTUwLTdkN2VmM2IwM2E1YyIsICJkZXJpdmVkRnJvbSI6IFt7InVpZCI6IDJ9XX0sIHsidHlwZSI6ICJJQ05vcm1hbGl0eSIsICJiZWdpbiI6IDAsICJlbmQiOiAyMSwgImNvdmVyZWRUZXh0IjogIm15b2NhcmRpYWwgaW5mYXJjdGlvbiIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzA0Mjg5NTMiLCAicHJlZmVycmVkTmFtZSI6ICJFbGVjdHJvY2FyZGlvZ3JhbTogbXlvY2FyZGlhbCBpbmZhcmN0aW9uIChmaW5kaW5nKSIsICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBEZXJpdmVkIENvbmNlcHRzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIklOVkFMSUQifSwgInJ1bGVJZCI6ICJjMWU4ZDdkNC03ZDM2LTQyM2ItYjM5ZC00ZWJiNWViNjViMGMiLCAiZGVyaXZlZEZyb20iOiBbeyJ1aWQiOiAzfV19XSwgIlN5bXB0b21EaXNlYXNlSW5kIjogW3sidHlwZSI6ICJhY2kuU3ltcHRvbURpc2Vhc2VJbmQiLCAidWlkIjogNSwgImJlZ2luIjogMCwgImVuZCI6IDIxLCAiY292ZXJlZFRleHQiOiAibXlvY2FyZGlhbCBpbmZhcmN0aW9uIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDAyNzA1MSIsICJpY2QxMENvZGUiOiAiSTIxLjkiLCAibW9kYWxpdHkiOiAicG9zaXRpdmUiLCAic3ltcHRvbURpc2Vhc2VTdXJmYWNlRm9ybSI6ICJteW9jYXJkaWFsIGluZmFyY3Rpb24iLCAic25vbWVkQ29uY2VwdElkIjogIjIyMjk4MDA2IiwgImNjc0NvZGUiOiAiMTAwIiwgInN5bXB0b21EaXNlYXNlTm9ybWFsaXplZE5hbWUiOiAibXlvY2FyZGlhbCBpbmZhcmN0aW9uIiwgImljZDlDb2RlIjogIjQxMC45MCIsICJoY2NDb2RlIjogIjg2IiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgImluc2lnaHRNb2RlbERhdGEiOiB7ImRpYWdub3NpcyI6IHsidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjkxNywgInBhdGllbnRSZXBvcnRlZFNjb3JlIjogMC4wMDgsICJkaXNjdXNzZWRTY29yZSI6IDAuMDc1fSwgInN1c3BlY3RlZFNjb3JlIjogMC4wOTIsICJzeW1wdG9tU2NvcmUiOiAwLjAsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX19XSwgInNwZWxsQ29ycmVjdGVkVGV4dCI6IFt7ImNvcnJlY3RlZFRleHQiOiAibXlvY2FyZGlhbCBpbmZhcmN0aW9uIn1dfQ==\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"code\": { \"coding\": [ { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"53958b4f7cef2dec63f88ff266b1e24bf95d3f12a32e88f7ad764bdb\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"C0027051\", \"display\": \"myocardial infarction\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"53958b4f7cef2dec63f88ff266b1e24bf95d3f12a32e88f7ad764bdb\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"22298006\", \"system\": \"http://snomed.info/sct\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"53958b4f7cef2dec63f88ff266b1e24bf95d3f12a32e88f7ad764bdb\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"410.90\", \"system\": \"http://hl7.org/fhir/sid/icd-9-cm\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"53958b4f7cef2dec63f88ff266b1e24bf95d3f12a32e88f7ad764bdb\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"I21.9\", \"system\": \"http://hl7.org/fhir/sid/icd-10-cm\" } ], \"text\": \"myocardial infarction\" }, \"subject\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"Condition\" } } ], \"type\": \"transaction\", \"resourceType\": \"Bundle\" } Condition derived codes ACD understands a wide variety of standard code systems. As a result SNOMED, ICD-9 and ICD-10 coding values are included in the condition, in addition to the UMLS concept id. System Code Display http://terminology.hl7.org/CodeSystem/umls C0027051 myocardial infarction http://snomed.info/sct 22298006 http://hl7.org/fhir/sid/icd-9-cm 410.90 http://hl7.org/fhir/sid/icd-10-cm I21.9 Enrich an allergy intolerance In this example, a bundle with two allergy intolerance resources is sent to the nlp insights server. The first has a code for a food allergy with text \"peanut\", and the second resource has a code for a medication allergy with text \"amoxicillin\". Both resources contain only text and do not contain any codes for the allergy. The nlp-insights service will enrich the resources by adding UMLS, SNOMED, ICD-9 and ICD-10 codes. curl -w \"\\n%{http_code}\\n\" -s -o /tmp/output.json -XPOST localhost:5000/discoverInsights -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"resourceType\": \"Bundle\", \"id\": \"abc\", \"type\": \"transaction\", \"entry\": [ { \"resource\": { \"id\": \"pnt123\", \"code\": { \"text\": \"peanut\" }, \"patient\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"AllergyIntolerance\" }, \"request\": { \"method\": \"POST\", \"url\": \"Condition\" } }, { \"resource\": { \"id\": \"amx123\", \"code\": { \"text\": \"amoxicillin\" }, \"patient\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"AllergyIntolerance\" }, \"request\": { \"method\": \"POST\", \"url\": \"Condition\" } } ] } EOF output 200 A bundle is returned that contains the enriched allergy intolerance resources. Each resource now includes the additional derived code values. cat /tmp/output.json | jq Returned bundle { \"id\": \"abc\", \"entry\": [ { \"fullUrl\": \"urn:uuid:12f769ca-81a8-4482-a07a-c98260b4991b\", \"request\": { \"method\": \"POST\", \"url\": \"Condition\" }, \"resource\": { \"id\": \"pnt123\", \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"33376613c387908fbcd8ffafca135a19d84efef2bd195e9750d4bd41\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"AllergyIntolerance.code.coding\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:12f769ca-81a8-4482-a07a-c98260b4991b\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"AllergyIntolerance.code.text\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"eyJhdHRyaWJ1dGVWYWx1ZXMiOiBbeyJiZWdpbiI6IDAsICJlbmQiOiAxNCwgImNvdmVyZWRUZXh0IjogInBlYW51dCBhbGxlcmd5IiwgIm5lZ2F0ZWQiOiBmYWxzZSwgInByZWZlcnJlZE5hbWUiOiAiYWxsZXJneSB0byBwZWFudXQiLCAidmFsdWVzIjogW3sidmFsdWUiOiAiYWxsZXJneSB0byBwZWFudXQifV0sICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBBdHRyaWJ1dGVzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJjb25jZXB0IjogeyJ1aWQiOiA0fSwgIm5hbWUiOiAiRGlhZ25vc2lzIiwgImljZDlDb2RlIjogIjk5NS4zIiwgImljZDEwQ29kZSI6ICJaOTEuMDEwLFo5MS4wIiwgInNub21lZENvbmNlcHRJZCI6ICI5MTkzNTAwOSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIlZBTElEIn0sICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC44OTYsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMDA5LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjA5NX0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMTA5LCAic3ltcHRvbVNjb3JlIjogMC4wMDEsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX0sICJjY3NDb2RlIjogIjI1MyJ9XSwgImNvbmNlcHRzIjogW3sidHlwZSI6ICJ1bWxzLkRpc2Vhc2VPclN5bmRyb21lIiwgInVpZCI6IDIsICJiZWdpbiI6IDAsICJlbmQiOiAxNCwgImNvdmVyZWRUZXh0IjogInBlYW51dCBhbGxlcmd5IiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDU1OTQ3MCIsICJwcmVmZXJyZWROYW1lIjogIkFsbGVyZ3kgdG8gcGVhbnV0cyIsICJzZW1hbnRpY1R5cGUiOiAiZHN5biIsICJzb3VyY2UiOiAidW1scyIsICJzb3VyY2VWZXJzaW9uIjogIjIwMjBBQSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIk5PX0RFQ0lTSU9OIn0sICJpY2Q5Q29kZSI6ICI5OTUuMyIsICJpY2QxMENvZGUiOiAiWjkxLjAsWjkxLjAxMCIsICJzbm9tZWRDb25jZXB0SWQiOiAiOTE5MzUwMDkiLCAibWVzaElkIjogIk0wMzUxODM2IiwgInZvY2FicyI6ICJNVEgsQ0hWLE1TSCxNRURMSU5FUExVUyxTTk9NRURDVF9VUyIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC44OTYsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMDA5LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjA5NX0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMTA5LCAic3ltcHRvbVNjb3JlIjogMC4wMDEsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX19LCB7InR5cGUiOiAiSUNEaWFnbm9zaXMiLCAiYmVnaW4iOiAwLCAiZW5kIjogMTQsICJjb3ZlcmVkVGV4dCI6ICJwZWFudXQgYWxsZXJneSIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzA1NTk0NzAiLCAicHJlZmVycmVkTmFtZSI6ICJBbGxlcmd5IHRvIHBlYW51dHMiLCAic291cmNlIjogIkNsaW5pY2FsIEluc2lnaHRzIC0gRGVyaXZlZCBDb25jZXB0cyIsICJzb3VyY2VWZXJzaW9uIjogInYxLjAiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJWQUxJRCJ9LCAiaWNkOUNvZGUiOiAiOTk1LjMiLCAiaWNkMTBDb2RlIjogIlo5MS4wLFo5MS4wMTAiLCAic25vbWVkQ29uY2VwdElkIjogIjkxOTM1MDA5IiwgIm1lc2hJZCI6ICJNMDM1MTgzNiIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC44OTYsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMDA5LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjA5NX0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMTA5LCAic3ltcHRvbVNjb3JlIjogMC4wMDEsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX0sICJydWxlSWQiOiAiNjk4ZjJiMTktMjdiNi00ZGFiLTkxNTAtN2Q3ZWYzYjAzYTVjIiwgImRlcml2ZWRGcm9tIjogW3sidWlkIjogMn1dfV0sICJTeW1wdG9tRGlzZWFzZUluZCI6IFt7InR5cGUiOiAiYWNpLlN5bXB0b21EaXNlYXNlSW5kIiwgInVpZCI6IDQsICJiZWdpbiI6IDAsICJlbmQiOiAxNCwgImNvdmVyZWRUZXh0IjogInBlYW51dCBhbGxlcmd5IiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDU1OTQ3MCIsICJpY2QxMENvZGUiOiAiWjkxLjAxMCxaOTEuMCIsICJtb2RhbGl0eSI6ICJwb3NpdGl2ZSIsICJzeW1wdG9tRGlzZWFzZVN1cmZhY2VGb3JtIjogInBlYW51dCBhbGxlcmd5IiwgInNub21lZENvbmNlcHRJZCI6ICI5MTkzNTAwOSIsICJjY3NDb2RlIjogIjI1MyIsICJzeW1wdG9tRGlzZWFzZU5vcm1hbGl6ZWROYW1lIjogImFsbGVyZ3kgdG8gcGVhbnV0IiwgImljZDlDb2RlIjogIjk5NS4zIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgImluc2lnaHRNb2RlbERhdGEiOiB7ImRpYWdub3NpcyI6IHsidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjg5NiwgInBhdGllbnRSZXBvcnRlZFNjb3JlIjogMC4wMDksICJkaXNjdXNzZWRTY29yZSI6IDAuMDk1fSwgInN1c3BlY3RlZFNjb3JlIjogMC4xMDksICJzeW1wdG9tU2NvcmUiOiAwLjAwMSwgInRyYXVtYVNjb3JlIjogMC4wLCAiZmFtaWx5SGlzdG9yeVNjb3JlIjogMC4wMDN9fX1dLCAic3BlbGxDb3JyZWN0ZWRUZXh0IjogW3siY29ycmVjdGVkVGV4dCI6ICJwZWFudXQgYWxsZXJneSJ9XX0=\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"code\": { \"coding\": [ { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"33376613c387908fbcd8ffafca135a19d84efef2bd195e9750d4bd41\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"C0559470\", \"display\": \"allergy to peanut\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"33376613c387908fbcd8ffafca135a19d84efef2bd195e9750d4bd41\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"91935009\", \"system\": \"http://snomed.info/sct\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"33376613c387908fbcd8ffafca135a19d84efef2bd195e9750d4bd41\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"995.3\", \"system\": \"http://hl7.org/fhir/sid/icd-9-cm\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"33376613c387908fbcd8ffafca135a19d84efef2bd195e9750d4bd41\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"Z91.010\", \"system\": \"http://hl7.org/fhir/sid/icd-10-cm\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"33376613c387908fbcd8ffafca135a19d84efef2bd195e9750d4bd41\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"Z91.0\", \"system\": \"http://hl7.org/fhir/sid/icd-10-cm\" } ], \"text\": \"peanut\" }, \"patient\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"AllergyIntolerance\" } }, { \"fullUrl\": \"urn:uuid:8ded6929-2c8f-4d0b-bb5f-e402924f407e\", \"request\": { \"method\": \"POST\", \"url\": \"Condition\" }, \"resource\": { \"id\": \"amx123\", \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"56af15e63b156a13a88436e138c479f2801d758d339fff32a93b3de8\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"AllergyIntolerance.code.coding\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:8ded6929-2c8f-4d0b-bb5f-e402924f407e\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"AllergyIntolerance.code.text\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"eyJhdHRyaWJ1dGVWYWx1ZXMiOiBbeyJiZWdpbiI6IDAsICJlbmQiOiAxOSwgImNvdmVyZWRUZXh0IjogImFtb3hpY2lsbGluIGFsbGVyZ3kiLCAibmVnYXRlZCI6IGZhbHNlLCAicHJlZmVycmVkTmFtZSI6ICJhbGxlcmd5IHRvIGFtb3hpY2lsbGluIiwgInZhbHVlcyI6IFt7InZhbHVlIjogImFsbGVyZ3kgdG8gYW1veGljaWxsaW4ifV0sICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBBdHRyaWJ1dGVzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJjb25jZXB0IjogeyJ1aWQiOiA0fSwgIm5hbWUiOiAiRGlhZ25vc2lzIiwgImljZDlDb2RlIjogIkU5MzAuMCw5OTUuMjciLCAiaWNkMTBDb2RlIjogIlo4OC4wIiwgInNub21lZENvbmNlcHRJZCI6ICIyOTQ1MDUwMDgiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJWQUxJRCJ9LCAiaW5zaWdodE1vZGVsRGF0YSI6IHsiZGlhZ25vc2lzIjogeyJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuOTE5LCAicGF0aWVudFJlcG9ydGVkU2NvcmUiOiAwLjAwNywgImRpc2N1c3NlZFNjb3JlIjogMC4wNzV9LCAic3VzcGVjdGVkU2NvcmUiOiAwLjA5NiwgInN5bXB0b21TY29yZSI6IDAuMDAxLCAidHJhdW1hU2NvcmUiOiAwLjAsICJmYW1pbHlIaXN0b3J5U2NvcmUiOiAwLjAwNH19LCAiY2NzQ29kZSI6ICIyNTMifV0sICJjb25jZXB0cyI6IFt7InR5cGUiOiAidW1scy5EaXNlYXNlT3JTeW5kcm9tZSIsICJ1aWQiOiAyLCAiYmVnaW4iOiAwLCAiZW5kIjogMTksICJjb3ZlcmVkVGV4dCI6ICJhbW94aWNpbGxpbiBhbGxlcmd5IiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDU3MTQxNyIsICJwcmVmZXJyZWROYW1lIjogIkFsbGVyZ3kgdG8gYW1veGljaWxsaW4iLCAic2VtYW50aWNUeXBlIjogImRzeW4iLCAic291cmNlIjogInVtbHMiLCAic291cmNlVmVyc2lvbiI6ICIyMDIwQUEiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJOT19ERUNJU0lPTiJ9LCAiaWNkOUNvZGUiOiAiOTk1LjI3IiwgImljZDEwQ29kZSI6ICJaODguMCxaODguMSIsICJzbm9tZWRDb25jZXB0SWQiOiAiMjk0NTA1MDA4IiwgInZvY2FicyI6ICJDSFYsU05PTUVEQ1RfVVMiLCAiaW5zaWdodE1vZGVsRGF0YSI6IHsiZGlhZ25vc2lzIjogeyJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuOTE5LCAicGF0aWVudFJlcG9ydGVkU2NvcmUiOiAwLjAwNywgImRpc2N1c3NlZFNjb3JlIjogMC4wNzV9LCAic3VzcGVjdGVkU2NvcmUiOiAwLjA5NiwgInN5bXB0b21TY29yZSI6IDAuMDAxLCAidHJhdW1hU2NvcmUiOiAwLjAsICJmYW1pbHlIaXN0b3J5U2NvcmUiOiAwLjAwNH19fSwgeyJ0eXBlIjogIklDRGlhZ25vc2lzIiwgImJlZ2luIjogMCwgImVuZCI6IDE5LCAiY292ZXJlZFRleHQiOiAiYW1veGljaWxsaW4gYWxsZXJneSIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzA1NzE0MTciLCAicHJlZmVycmVkTmFtZSI6ICJBbGxlcmd5IHRvIGFtb3hpY2lsbGluIiwgInNvdXJjZSI6ICJDbGluaWNhbCBJbnNpZ2h0cyAtIERlcml2ZWQgQ29uY2VwdHMiLCAic291cmNlVmVyc2lvbiI6ICJ2MS4wIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgImljZDlDb2RlIjogIjk5NS4yNyIsICJpY2QxMENvZGUiOiAiWjg4LjAsWjg4LjEiLCAic25vbWVkQ29uY2VwdElkIjogIjI5NDUwNTAwOCIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC45MTksICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMDA3LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjA3NX0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMDk2LCAic3ltcHRvbVNjb3JlIjogMC4wMDEsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDA0fX0sICJydWxlSWQiOiAiNjk4ZjJiMTktMjdiNi00ZGFiLTkxNTAtN2Q3ZWYzYjAzYTVjIiwgImRlcml2ZWRGcm9tIjogW3sidWlkIjogMn1dfV0sICJNZWRpY2F0aW9uSW5kIjogW3sidHlwZSI6ICJhY2kuTWVkaWNhdGlvbkluZCIsICJiZWdpbiI6IDAsICJlbmQiOiAxMSwgImNvdmVyZWRUZXh0IjogImFtb3hpY2lsbGluIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDAwMjY0NSIsICJkcnVnIjogW3siY292ZXJlZFRleHQiOiAiYW1veGljaWxsaW4iLCAiY3VpIjogIkMwMDAyNjQ1IiwgImNvbXBsZXgiOiAiZmFsc2UiLCAiZW5kIjogMTEsICJ0eXBlIjogImFjaS5JbmRfRHJ1ZyIsICJuYW1lMSI6IFt7InJ4Tm9ybUlEIjogIjcyMyIsICJjb3ZlcmVkVGV4dCI6ICJhbW94aWNpbGxpbiIsICJjdWkiOiAiQzAwMDI2NDUiLCAiZHJ1Z1N1cmZhY2VGb3JtIjogImFtb3hpY2lsbGluIiwgImRydWdOb3JtYWxpemVkTmFtZSI6ICJhbW94aWNpbGxpbiIsICJlbmQiOiAxMSwgInR5cGUiOiAiYWNpLkRydWdOYW1lIiwgImJlZ2luIjogMH1dLCAiYmVnaW4iOiAwfV0sICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIklOVkFMSUQiLCAiY29tbWVudCI6ICJDbGluaWNhbCBJbnNpZ2h0czogVGhpcyBjb25jZXB0IHdhcyBzaG9ydGVyIHRoYW4gYW4gb3ZlcmxhcHBpbmcgY29uY2VwdC4ifX1dLCAiU3ltcHRvbURpc2Vhc2VJbmQiOiBbeyJ0eXBlIjogImFjaS5TeW1wdG9tRGlzZWFzZUluZCIsICJ1aWQiOiA0LCAiYmVnaW4iOiAwLCAiZW5kIjogMTksICJjb3ZlcmVkVGV4dCI6ICJhbW94aWNpbGxpbiBhbGxlcmd5IiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDU3MTQxNyIsICJpY2QxMENvZGUiOiAiWjg4LjAiLCAibW9kYWxpdHkiOiAicG9zaXRpdmUiLCAic3ltcHRvbURpc2Vhc2VTdXJmYWNlRm9ybSI6ICJhbW94aWNpbGxpbiBhbGxlcmd5IiwgInNub21lZENvbmNlcHRJZCI6ICIyOTQ1MDUwMDgiLCAiY2NzQ29kZSI6ICIyNTMiLCAic3ltcHRvbURpc2Vhc2VOb3JtYWxpemVkTmFtZSI6ICJhbGxlcmd5IHRvIGFtb3hpY2lsbGluIiwgImljZDlDb2RlIjogIkU5MzAuMCw5OTUuMjciLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJWQUxJRCJ9LCAiaW5zaWdodE1vZGVsRGF0YSI6IHsiZGlhZ25vc2lzIjogeyJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuOTE5LCAicGF0aWVudFJlcG9ydGVkU2NvcmUiOiAwLjAwNywgImRpc2N1c3NlZFNjb3JlIjogMC4wNzV9LCAic3VzcGVjdGVkU2NvcmUiOiAwLjA5NiwgInN5bXB0b21TY29yZSI6IDAuMDAxLCAidHJhdW1hU2NvcmUiOiAwLjAsICJmYW1pbHlIaXN0b3J5U2NvcmUiOiAwLjAwNH19fV0sICJzcGVsbENvcnJlY3RlZFRleHQiOiBbeyJjb3JyZWN0ZWRUZXh0IjogImFtb3hpY2lsbGluIGFsbGVyZ3kifV19\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"code\": { \"coding\": [ { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"56af15e63b156a13a88436e138c479f2801d758d339fff32a93b3de8\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"C0571417\", \"display\": \"allergy to amoxicillin\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"56af15e63b156a13a88436e138c479f2801d758d339fff32a93b3de8\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"294505008\", \"system\": \"http://snomed.info/sct\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"56af15e63b156a13a88436e138c479f2801d758d339fff32a93b3de8\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"E930.0\", \"system\": \"http://hl7.org/fhir/sid/icd-9-cm\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"56af15e63b156a13a88436e138c479f2801d758d339fff32a93b3de8\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"995.27\", \"system\": \"http://hl7.org/fhir/sid/icd-9-cm\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"56af15e63b156a13a88436e138c479f2801d758d339fff32a93b3de8\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"Z88.0\", \"system\": \"http://hl7.org/fhir/sid/icd-10-cm\" } ], \"text\": \"amoxicillin\" }, \"patient\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"AllergyIntolerance\" } } ], \"type\": \"transaction\", \"resourceType\": \"Bundle\" } Allergy derived codes The food allergy resource has been enriched with new codes. System Code Display http://terminology.hl7.org/CodeSystem/umls C0559470 allergy to peanut http://snomed.info/sct 91935009 http://hl7.org/fhir/sid/icd-9-cm 995.3 http://hl7.org/fhir/sid/icd-10-cm Z91.010 http://hl7.org/fhir/sid/icd-10-cm Z91.0 In a similar way, the medication allergy resource has been enriched with new codes. System Code Display http://terminology.hl7.org/CodeSystem/umls C0571417 allergy to amoxicillin http://snomed.info/sct 294505008 http://hl7.org/fhir/sid/icd-9-cm E930.0 http://hl7.org/fhir/sid/icd-9-cm 995.27 http://hl7.org/fhir/sid/icd-10-cm Z88.0 Evidence nlp-insights enriches resources according to the Alvearie FHIR IG . The nlp-insights service adds detailed information to the enriched resource to explain what caused the additional codes to be added. Insight Summary Each coding that has been derived by NLP contains an insight summary extension that can be examined to determine which insight derived the code. For example consider the UMLS code C0559470 that was added to the allergy intolerance resource pnt123. C0559470 coding in AllergyIntolerance pnt123 { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"33376613c387908fbcd8ffafca135a19d84efef2bd195e9750d4bd41\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"C0559470\", \"display\": \"allergy to peanut\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } } The summary extension has been added to the coding. The summary has an insight id and category. The insight id has a system and identifier that together identify the insight. In this example, the system tells us that the insight was discovered using ACD. The identifier value is unique (within the system) to this insight, and may be used to find the insight extension for the insight in the resource meta. When nlp-insights derives codes, it will create one insight for all derived codes that are created from the same text. It is common for all summary extensions to refer to the same insight id. The category tells us that the coding was derived using Natural Language Processing. Insight Extension in Resource Meta The insight identified by the summary extension has an insight extension in the resource's meta. The insight extension contains lots of details about what the insight applies to and why it was created. Insight extension in the meta for AllergyIntolerance pnt123 { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"33376613c387908fbcd8ffafca135a19d84efef2bd195e9750d4bd41\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"AllergyIntolerance.code.coding\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:12f769ca-81a8-4482-a07a-c98260b4991b\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"AllergyIntolerance.code.text\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"eyJhdHRyaWJ1dGVWYWx1ZXMiOiBbeyJiZWdpbiI6IDAsICJlbmQiOiAxNCwgImNvdmVyZWRUZXh0IjogInBlYW51dCBhbGxlcmd5IiwgIm5lZ2F0ZWQiOiBmYWxzZSwgInByZWZlcnJlZE5hbWUiOiAiYWxsZXJneSB0byBwZWFudXQiLCAidmFsdWVzIjogW3sidmFsdWUiOiAiYWxsZXJneSB0byBwZWFudXQifV0sICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBBdHRyaWJ1dGVzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJjb25jZXB0IjogeyJ1aWQiOiA0fSwgIm5hbWUiOiAiRGlhZ25vc2lzIiwgImljZDlDb2RlIjogIjk5NS4zIiwgImljZDEwQ29kZSI6ICJaOTEuMDEwLFo5MS4wIiwgInNub21lZENvbmNlcHRJZCI6ICI5MTkzNTAwOSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIlZBTElEIn0sICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC44OTYsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMDA5LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjA5NX0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMTA5LCAic3ltcHRvbVNjb3JlIjogMC4wMDEsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX0sICJjY3NDb2RlIjogIjI1MyJ9XSwgImNvbmNlcHRzIjogW3sidHlwZSI6ICJ1bWxzLkRpc2Vhc2VPclN5bmRyb21lIiwgInVpZCI6IDIsICJiZWdpbiI6IDAsICJlbmQiOiAxNCwgImNvdmVyZWRUZXh0IjogInBlYW51dCBhbGxlcmd5IiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDU1OTQ3MCIsICJwcmVmZXJyZWROYW1lIjogIkFsbGVyZ3kgdG8gcGVhbnV0cyIsICJzZW1hbnRpY1R5cGUiOiAiZHN5biIsICJzb3VyY2UiOiAidW1scyIsICJzb3VyY2VWZXJzaW9uIjogIjIwMjBBQSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIk5PX0RFQ0lTSU9OIn0sICJpY2Q5Q29kZSI6ICI5OTUuMyIsICJpY2QxMENvZGUiOiAiWjkxLjAsWjkxLjAxMCIsICJzbm9tZWRDb25jZXB0SWQiOiAiOTE5MzUwMDkiLCAibWVzaElkIjogIk0wMzUxODM2IiwgInZvY2FicyI6ICJNVEgsQ0hWLE1TSCxNRURMSU5FUExVUyxTTk9NRURDVF9VUyIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC44OTYsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMDA5LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjA5NX0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMTA5LCAic3ltcHRvbVNjb3JlIjogMC4wMDEsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX19LCB7InR5cGUiOiAiSUNEaWFnbm9zaXMiLCAiYmVnaW4iOiAwLCAiZW5kIjogMTQsICJjb3ZlcmVkVGV4dCI6ICJwZWFudXQgYWxsZXJneSIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzA1NTk0NzAiLCAicHJlZmVycmVkTmFtZSI6ICJBbGxlcmd5IHRvIHBlYW51dHMiLCAic291cmNlIjogIkNsaW5pY2FsIEluc2lnaHRzIC0gRGVyaXZlZCBDb25jZXB0cyIsICJzb3VyY2VWZXJzaW9uIjogInYxLjAiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJWQUxJRCJ9LCAiaWNkOUNvZGUiOiAiOTk1LjMiLCAiaWNkMTBDb2RlIjogIlo5MS4wLFo5MS4wMTAiLCAic25vbWVkQ29uY2VwdElkIjogIjkxOTM1MDA5IiwgIm1lc2hJZCI6ICJNMDM1MTgzNiIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC44OTYsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMDA5LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjA5NX0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMTA5LCAic3ltcHRvbVNjb3JlIjogMC4wMDEsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX0sICJydWxlSWQiOiAiNjk4ZjJiMTktMjdiNi00ZGFiLTkxNTAtN2Q3ZWYzYjAzYTVjIiwgImRlcml2ZWRGcm9tIjogW3sidWlkIjogMn1dfV0sICJTeW1wdG9tRGlzZWFzZUluZCI6IFt7InR5cGUiOiAiYWNpLlN5bXB0b21EaXNlYXNlSW5kIiwgInVpZCI6IDQsICJiZWdpbiI6IDAsICJlbmQiOiAxNCwgImNvdmVyZWRUZXh0IjogInBlYW51dCBhbGxlcmd5IiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDU1OTQ3MCIsICJpY2QxMENvZGUiOiAiWjkxLjAxMCxaOTEuMCIsICJtb2RhbGl0eSI6ICJwb3NpdGl2ZSIsICJzeW1wdG9tRGlzZWFzZVN1cmZhY2VGb3JtIjogInBlYW51dCBhbGxlcmd5IiwgInNub21lZENvbmNlcHRJZCI6ICI5MTkzNTAwOSIsICJjY3NDb2RlIjogIjI1MyIsICJzeW1wdG9tRGlzZWFzZU5vcm1hbGl6ZWROYW1lIjogImFsbGVyZ3kgdG8gcGVhbnV0IiwgImljZDlDb2RlIjogIjk5NS4zIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgImluc2lnaHRNb2RlbERhdGEiOiB7ImRpYWdub3NpcyI6IHsidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjg5NiwgInBhdGllbnRSZXBvcnRlZFNjb3JlIjogMC4wMDksICJkaXNjdXNzZWRTY29yZSI6IDAuMDk1fSwgInN1c3BlY3RlZFNjb3JlIjogMC4xMDksICJzeW1wdG9tU2NvcmUiOiAwLjAwMSwgInRyYXVtYVNjb3JlIjogMC4wLCAiZmFtaWx5SGlzdG9yeVNjb3JlIjogMC4wMDN9fX1dLCAic3BlbGxDb3JyZWN0ZWRUZXh0IjogW3siY29ycmVjdGVkVGV4dCI6ICJwZWFudXQgYWxsZXJneSJ9XX0=\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } The extensions of interest within the insight extension are: extension purpose insight-id identifier for the insight. path HL7 FHIR Path to the part of this resource that the insight applies to. This is the location where derived codes have been added. insight-detail Detailed supporting evidence for the insight. Insight detail The insight detail extension provides information about why the insight got created: Extension Purpose reference The resource that contained the text that was used to create the insight. For enrichment, this will always be the enriched resource, the insight is derived from the same resource that the insight pertains to. reference-path HL7 FHIR Path that describes the location of the text used to create the insight (within reference) evaluated-output base64 response from the ACD Service","title":"Enrich Resources"},{"location":"examples/acd/enrich/#enrich-fhir-resources-with-nlp-insights-and-acd","text":"The nlp-insights service supports enrichment of the following types of FHIR resources: Condition AllergyIntolerance A resource is enriched by adding industry standard codes to the resource. These standard codes are derived from a resource's coding text using NLP. This particularly useful when a FHIR resource has a text description of the code, but does not contain industry standard codes such as SNOMED, ICD-9, ICD-10, etc. This tutorial provides examples of enrichment.","title":"Enrich FHIR resources with nlp-insights and ACD"},{"location":"examples/acd/enrich/#configure-nlp-insights-to-use-acd-for-nlp","text":"If the nlp-insights service has not been configured to use ACD by default, follow the steps here .","title":"Configure nlp-insights to use ACD for NLP"},{"location":"examples/acd/enrich/#enrich-a-condition","text":"In this example, the nlp-insights service is sent a bundle that contains a single condition. The condition has a code with text \"myocardial infarction\", but no coding values. The service will add coding values to the code. This curl command is written to store the response in a file /tmp/output.json for later analysis. curl -w \"\\n%{http_code}\\n\" -s -o /tmp/output.json -XPOST localhost:5000/discoverInsights -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"resourceType\": \"Bundle\", \"id\": \"abc\", \"type\": \"transaction\", \"entry\": [ { \"resource\": { \"id\": \"abcefg-1234567890\", \"code\": { \"text\": \"myocardial infarction\" }, \"subject\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"Condition\" }, \"request\": { \"method\": \"POST\", \"url\": \"Condition\" } } ] } EOF output 200","title":"Enrich a Condition"},{"location":"examples/acd/enrich/#enriched-condition","text":"The response from the service is a bundle with the enriched condition. cat /tmp/output.json | jq Returned Bundle { \"id\": \"abc\", \"entry\": [ { \"fullUrl\": \"urn:uuid:7ea4903e-e14a-4407-8e37-8eae239d964d\", \"request\": { \"method\": \"POST\", \"url\": \"Condition\" }, \"resource\": { \"id\": \"abcefg-1234567890\", \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"53958b4f7cef2dec63f88ff266b1e24bf95d3f12a32e88f7ad764bdb\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"Condition.code.coding\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:7ea4903e-e14a-4407-8e37-8eae239d964d\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"Condition.code.text\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"eyJhdHRyaWJ1dGVWYWx1ZXMiOiBbeyJiZWdpbiI6IDAsICJlbmQiOiAyMSwgImNvdmVyZWRUZXh0IjogIm15b2NhcmRpYWwgaW5mYXJjdGlvbiIsICJuZWdhdGVkIjogZmFsc2UsICJwcmVmZXJyZWROYW1lIjogIm15b2NhcmRpYWwgaW5mYXJjdGlvbiIsICJ2YWx1ZXMiOiBbeyJ2YWx1ZSI6ICJteW9jYXJkaWFsIGluZmFyY3Rpb24ifV0sICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBBdHRyaWJ1dGVzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJjb25jZXB0IjogeyJ1aWQiOiA1fSwgIm5hbWUiOiAiRGlhZ25vc2lzIiwgImljZDlDb2RlIjogIjQxMC45MCIsICJpY2QxMENvZGUiOiAiSTIxLjkiLCAic25vbWVkQ29uY2VwdElkIjogIjIyMjk4MDA2IiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgImluc2lnaHRNb2RlbERhdGEiOiB7ImRpYWdub3NpcyI6IHsidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjkxNywgInBhdGllbnRSZXBvcnRlZFNjb3JlIjogMC4wMDgsICJkaXNjdXNzZWRTY29yZSI6IDAuMDc1fSwgInN1c3BlY3RlZFNjb3JlIjogMC4wOTIsICJzeW1wdG9tU2NvcmUiOiAwLjAsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX0sICJjY3NDb2RlIjogIjEwMCIsICJoY2NDb2RlIjogIjg2In1dLCAiY29uY2VwdHMiOiBbeyJ0eXBlIjogInVtbHMuRmluZGluZyIsICJiZWdpbiI6IDAsICJlbmQiOiAyMSwgImNvdmVyZWRUZXh0IjogIm15b2NhcmRpYWwgaW5mYXJjdGlvbiIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzQ1NTI5NTkiLCAicHJlZmVycmVkTmFtZSI6ICJNeW9jYXJkaWFsIEluZmFyY3Rpb24sIENUQ0FFIiwgInNlbWFudGljVHlwZSI6ICJmbmRnIiwgInNvdXJjZSI6ICJ1bWxzIiwgInNvdXJjZVZlcnNpb24iOiAiMjAyMEFBIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiTk9fREVDSVNJT04ifSwgIm5jaUNvZGUiOiAiQzE0MzY5MSIsICJ2b2NhYnMiOiAiTVRILE5DSV9DVENBRV81LE5DSSJ9LCB7InR5cGUiOiAidW1scy5MYWJvcmF0b3J5T3JUZXN0UmVzdWx0IiwgInVpZCI6IDMsICJiZWdpbiI6IDAsICJlbmQiOiAyMSwgImNvdmVyZWRUZXh0IjogIm15b2NhcmRpYWwgaW5mYXJjdGlvbiIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzA0Mjg5NTMiLCAicHJlZmVycmVkTmFtZSI6ICJFbGVjdHJvY2FyZGlvZ3JhbTogbXlvY2FyZGlhbCBpbmZhcmN0aW9uIChmaW5kaW5nKSIsICJzZW1hbnRpY1R5cGUiOiAibGJ0ciIsICJzb3VyY2UiOiAidW1scyIsICJzb3VyY2VWZXJzaW9uIjogIjIwMjBBQSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIklOVkFMSUQifSwgImljZDEwQ29kZSI6ICJJMjEuNCxJMjEuMjksSTIxLjA5LEkyMS4xOSxSOTQuMzEsSTI1LjIsSTIxLjkiLCAibmNpQ29kZSI6ICJDMTAxNTg5IiwgInNub21lZENvbmNlcHRJZCI6ICIxNjQ4NjUwMDUiLCAidm9jYWJzIjogIkNIVixNVEgsTkNJX0NESVNDLE5DSSxTTk9NRURDVF9VUyJ9LCB7InR5cGUiOiAidW1scy5EaXNlYXNlT3JTeW5kcm9tZSIsICJ1aWQiOiAyLCAiYmVnaW4iOiAwLCAiZW5kIjogMjEsICJjb3ZlcmVkVGV4dCI6ICJteW9jYXJkaWFsIGluZmFyY3Rpb24iLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwMDI3MDUxIiwgInByZWZlcnJlZE5hbWUiOiAiTXlvY2FyZGlhbCBJbmZhcmN0aW9uIiwgInNlbWFudGljVHlwZSI6ICJkc3luIiwgInNvdXJjZSI6ICJ1bWxzIiwgInNvdXJjZVZlcnNpb24iOiAiMjAyMEFBIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiTk9fREVDSVNJT04ifSwgImljZDEwQ29kZSI6ICJJMjEuOSIsICJuY2lDb2RlIjogIkMyNzk5NiIsICJzbm9tZWRDb25jZXB0SWQiOiAiMjIyOTgwMDYiLCAibWVzaElkIjogIk0wMDE0MzQwIiwgImxvaW5jSWQiOiAiTVRIVTAzNTU1MSxMQTE0Mjc0LTcsTFA5ODg4NC03LExBMTYyODYtOSIsICJ2b2NhYnMiOiAiTkNJX05JQ0hELE1USCxMTkMsQ1NQLE1TSCxDU1QsSFBPLE9NSU0sTkNJX0NUQ0FFLENPU1RBUixBSVIsQ0hWLE5DSV9GREEsTUVETElORVBMVVMsTkNJLExDSF9OVyxBT0QsU05PTUVEQ1RfVVMsRFhQIiwgImluc2lnaHRNb2RlbERhdGEiOiB7ImRpYWdub3NpcyI6IHsidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjkxNywgInBhdGllbnRSZXBvcnRlZFNjb3JlIjogMC4wMDgsICJkaXNjdXNzZWRTY29yZSI6IDAuMDc1fSwgInN1c3BlY3RlZFNjb3JlIjogMC4wOTIsICJzeW1wdG9tU2NvcmUiOiAwLjAsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX19LCB7InR5cGUiOiAiSUNEaWFnbm9zaXMiLCAiYmVnaW4iOiAwLCAiZW5kIjogMjEsICJjb3ZlcmVkVGV4dCI6ICJteW9jYXJkaWFsIGluZmFyY3Rpb24iLCAibmVnYXRlZCI6IGZhbHNlLCAiY3VpIjogIkMwMDI3MDUxIiwgInByZWZlcnJlZE5hbWUiOiAiTXlvY2FyZGlhbCBJbmZhcmN0aW9uIiwgInNvdXJjZSI6ICJDbGluaWNhbCBJbnNpZ2h0cyAtIERlcml2ZWQgQ29uY2VwdHMiLCAic291cmNlVmVyc2lvbiI6ICJ2MS4wIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgImljZDEwQ29kZSI6ICJJMjEuOSIsICJuY2lDb2RlIjogIkMyNzk5NiIsICJzbm9tZWRDb25jZXB0SWQiOiAiMjIyOTgwMDYiLCAibWVzaElkIjogIk0wMDE0MzQwIiwgImxvaW5jSWQiOiAiTVRIVTAzNTU1MSxMQTE0Mjc0LTcsTFA5ODg4NC03LExBMTYyODYtOSIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC45MTcsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMDA4LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjA3NX0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMDkyLCAic3ltcHRvbVNjb3JlIjogMC4wLCAidHJhdW1hU2NvcmUiOiAwLjAsICJmYW1pbHlIaXN0b3J5U2NvcmUiOiAwLjAwM319LCAicnVsZUlkIjogIjY5OGYyYjE5LTI3YjYtNGRhYi05MTUwLTdkN2VmM2IwM2E1YyIsICJkZXJpdmVkRnJvbSI6IFt7InVpZCI6IDJ9XX0sIHsidHlwZSI6ICJJQ05vcm1hbGl0eSIsICJiZWdpbiI6IDAsICJlbmQiOiAyMSwgImNvdmVyZWRUZXh0IjogIm15b2NhcmRpYWwgaW5mYXJjdGlvbiIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzA0Mjg5NTMiLCAicHJlZmVycmVkTmFtZSI6ICJFbGVjdHJvY2FyZGlvZ3JhbTogbXlvY2FyZGlhbCBpbmZhcmN0aW9uIChmaW5kaW5nKSIsICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBEZXJpdmVkIENvbmNlcHRzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIklOVkFMSUQifSwgInJ1bGVJZCI6ICJjMWU4ZDdkNC03ZDM2LTQyM2ItYjM5ZC00ZWJiNWViNjViMGMiLCAiZGVyaXZlZEZyb20iOiBbeyJ1aWQiOiAzfV19XSwgIlN5bXB0b21EaXNlYXNlSW5kIjogW3sidHlwZSI6ICJhY2kuU3ltcHRvbURpc2Vhc2VJbmQiLCAidWlkIjogNSwgImJlZ2luIjogMCwgImVuZCI6IDIxLCAiY292ZXJlZFRleHQiOiAibXlvY2FyZGlhbCBpbmZhcmN0aW9uIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDAyNzA1MSIsICJpY2QxMENvZGUiOiAiSTIxLjkiLCAibW9kYWxpdHkiOiAicG9zaXRpdmUiLCAic3ltcHRvbURpc2Vhc2VTdXJmYWNlRm9ybSI6ICJteW9jYXJkaWFsIGluZmFyY3Rpb24iLCAic25vbWVkQ29uY2VwdElkIjogIjIyMjk4MDA2IiwgImNjc0NvZGUiOiAiMTAwIiwgInN5bXB0b21EaXNlYXNlTm9ybWFsaXplZE5hbWUiOiAibXlvY2FyZGlhbCBpbmZhcmN0aW9uIiwgImljZDlDb2RlIjogIjQxMC45MCIsICJoY2NDb2RlIjogIjg2IiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgImluc2lnaHRNb2RlbERhdGEiOiB7ImRpYWdub3NpcyI6IHsidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjkxNywgInBhdGllbnRSZXBvcnRlZFNjb3JlIjogMC4wMDgsICJkaXNjdXNzZWRTY29yZSI6IDAuMDc1fSwgInN1c3BlY3RlZFNjb3JlIjogMC4wOTIsICJzeW1wdG9tU2NvcmUiOiAwLjAsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX19XSwgInNwZWxsQ29ycmVjdGVkVGV4dCI6IFt7ImNvcnJlY3RlZFRleHQiOiAibXlvY2FyZGlhbCBpbmZhcmN0aW9uIn1dfQ==\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"code\": { \"coding\": [ { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"53958b4f7cef2dec63f88ff266b1e24bf95d3f12a32e88f7ad764bdb\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"C0027051\", \"display\": \"myocardial infarction\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"53958b4f7cef2dec63f88ff266b1e24bf95d3f12a32e88f7ad764bdb\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"22298006\", \"system\": \"http://snomed.info/sct\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"53958b4f7cef2dec63f88ff266b1e24bf95d3f12a32e88f7ad764bdb\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"410.90\", \"system\": \"http://hl7.org/fhir/sid/icd-9-cm\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"53958b4f7cef2dec63f88ff266b1e24bf95d3f12a32e88f7ad764bdb\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"I21.9\", \"system\": \"http://hl7.org/fhir/sid/icd-10-cm\" } ], \"text\": \"myocardial infarction\" }, \"subject\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"Condition\" } } ], \"type\": \"transaction\", \"resourceType\": \"Bundle\" }","title":"Enriched condition"},{"location":"examples/acd/enrich/#condition-derived-codes","text":"ACD understands a wide variety of standard code systems. As a result SNOMED, ICD-9 and ICD-10 coding values are included in the condition, in addition to the UMLS concept id. System Code Display http://terminology.hl7.org/CodeSystem/umls C0027051 myocardial infarction http://snomed.info/sct 22298006 http://hl7.org/fhir/sid/icd-9-cm 410.90 http://hl7.org/fhir/sid/icd-10-cm I21.9","title":"Condition derived codes"},{"location":"examples/acd/enrich/#enrich-an-allergy-intolerance","text":"In this example, a bundle with two allergy intolerance resources is sent to the nlp insights server. The first has a code for a food allergy with text \"peanut\", and the second resource has a code for a medication allergy with text \"amoxicillin\". Both resources contain only text and do not contain any codes for the allergy. The nlp-insights service will enrich the resources by adding UMLS, SNOMED, ICD-9 and ICD-10 codes. curl -w \"\\n%{http_code}\\n\" -s -o /tmp/output.json -XPOST localhost:5000/discoverInsights -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"resourceType\": \"Bundle\", \"id\": \"abc\", \"type\": \"transaction\", \"entry\": [ { \"resource\": { \"id\": \"pnt123\", \"code\": { \"text\": \"peanut\" }, \"patient\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"AllergyIntolerance\" }, \"request\": { \"method\": \"POST\", \"url\": \"Condition\" } }, { \"resource\": { \"id\": \"amx123\", \"code\": { \"text\": \"amoxicillin\" }, \"patient\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"AllergyIntolerance\" }, \"request\": { \"method\": \"POST\", \"url\": \"Condition\" } } ] } EOF output 200 A bundle is returned that contains the enriched allergy intolerance resources. Each resource now includes the additional derived code values. cat /tmp/output.json | jq Returned bundle { \"id\": \"abc\", \"entry\": [ { \"fullUrl\": \"urn:uuid:12f769ca-81a8-4482-a07a-c98260b4991b\", \"request\": { \"method\": \"POST\", \"url\": \"Condition\" }, \"resource\": { \"id\": \"pnt123\", \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"33376613c387908fbcd8ffafca135a19d84efef2bd195e9750d4bd41\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"AllergyIntolerance.code.coding\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:12f769ca-81a8-4482-a07a-c98260b4991b\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"AllergyIntolerance.code.text\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"eyJhdHRyaWJ1dGVWYWx1ZXMiOiBbeyJiZWdpbiI6IDAsICJlbmQiOiAxNCwgImNvdmVyZWRUZXh0IjogInBlYW51dCBhbGxlcmd5IiwgIm5lZ2F0ZWQiOiBmYWxzZSwgInByZWZlcnJlZE5hbWUiOiAiYWxsZXJneSB0byBwZWFudXQiLCAidmFsdWVzIjogW3sidmFsdWUiOiAiYWxsZXJneSB0byBwZWFudXQifV0sICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBBdHRyaWJ1dGVzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJjb25jZXB0IjogeyJ1aWQiOiA0fSwgIm5hbWUiOiAiRGlhZ25vc2lzIiwgImljZDlDb2RlIjogIjk5NS4zIiwgImljZDEwQ29kZSI6ICJaOTEuMDEwLFo5MS4wIiwgInNub21lZENvbmNlcHRJZCI6ICI5MTkzNTAwOSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIlZBTElEIn0sICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC44OTYsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMDA5LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjA5NX0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMTA5LCAic3ltcHRvbVNjb3JlIjogMC4wMDEsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX0sICJjY3NDb2RlIjogIjI1MyJ9XSwgImNvbmNlcHRzIjogW3sidHlwZSI6ICJ1bWxzLkRpc2Vhc2VPclN5bmRyb21lIiwgInVpZCI6IDIsICJiZWdpbiI6IDAsICJlbmQiOiAxNCwgImNvdmVyZWRUZXh0IjogInBlYW51dCBhbGxlcmd5IiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDU1OTQ3MCIsICJwcmVmZXJyZWROYW1lIjogIkFsbGVyZ3kgdG8gcGVhbnV0cyIsICJzZW1hbnRpY1R5cGUiOiAiZHN5biIsICJzb3VyY2UiOiAidW1scyIsICJzb3VyY2VWZXJzaW9uIjogIjIwMjBBQSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIk5PX0RFQ0lTSU9OIn0sICJpY2Q5Q29kZSI6ICI5OTUuMyIsICJpY2QxMENvZGUiOiAiWjkxLjAsWjkxLjAxMCIsICJzbm9tZWRDb25jZXB0SWQiOiAiOTE5MzUwMDkiLCAibWVzaElkIjogIk0wMzUxODM2IiwgInZvY2FicyI6ICJNVEgsQ0hWLE1TSCxNRURMSU5FUExVUyxTTk9NRURDVF9VUyIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC44OTYsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMDA5LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjA5NX0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMTA5LCAic3ltcHRvbVNjb3JlIjogMC4wMDEsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX19LCB7InR5cGUiOiAiSUNEaWFnbm9zaXMiLCAiYmVnaW4iOiAwLCAiZW5kIjogMTQsICJjb3ZlcmVkVGV4dCI6ICJwZWFudXQgYWxsZXJneSIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzA1NTk0NzAiLCAicHJlZmVycmVkTmFtZSI6ICJBbGxlcmd5IHRvIHBlYW51dHMiLCAic291cmNlIjogIkNsaW5pY2FsIEluc2lnaHRzIC0gRGVyaXZlZCBDb25jZXB0cyIsICJzb3VyY2VWZXJzaW9uIjogInYxLjAiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJWQUxJRCJ9LCAiaWNkOUNvZGUiOiAiOTk1LjMiLCAiaWNkMTBDb2RlIjogIlo5MS4wLFo5MS4wMTAiLCAic25vbWVkQ29uY2VwdElkIjogIjkxOTM1MDA5IiwgIm1lc2hJZCI6ICJNMDM1MTgzNiIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC44OTYsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMDA5LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjA5NX0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMTA5LCAic3ltcHRvbVNjb3JlIjogMC4wMDEsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX0sICJydWxlSWQiOiAiNjk4ZjJiMTktMjdiNi00ZGFiLTkxNTAtN2Q3ZWYzYjAzYTVjIiwgImRlcml2ZWRGcm9tIjogW3sidWlkIjogMn1dfV0sICJTeW1wdG9tRGlzZWFzZUluZCI6IFt7InR5cGUiOiAiYWNpLlN5bXB0b21EaXNlYXNlSW5kIiwgInVpZCI6IDQsICJiZWdpbiI6IDAsICJlbmQiOiAxNCwgImNvdmVyZWRUZXh0IjogInBlYW51dCBhbGxlcmd5IiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDU1OTQ3MCIsICJpY2QxMENvZGUiOiAiWjkxLjAxMCxaOTEuMCIsICJtb2RhbGl0eSI6ICJwb3NpdGl2ZSIsICJzeW1wdG9tRGlzZWFzZVN1cmZhY2VGb3JtIjogInBlYW51dCBhbGxlcmd5IiwgInNub21lZENvbmNlcHRJZCI6ICI5MTkzNTAwOSIsICJjY3NDb2RlIjogIjI1MyIsICJzeW1wdG9tRGlzZWFzZU5vcm1hbGl6ZWROYW1lIjogImFsbGVyZ3kgdG8gcGVhbnV0IiwgImljZDlDb2RlIjogIjk5NS4zIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgImluc2lnaHRNb2RlbERhdGEiOiB7ImRpYWdub3NpcyI6IHsidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjg5NiwgInBhdGllbnRSZXBvcnRlZFNjb3JlIjogMC4wMDksICJkaXNjdXNzZWRTY29yZSI6IDAuMDk1fSwgInN1c3BlY3RlZFNjb3JlIjogMC4xMDksICJzeW1wdG9tU2NvcmUiOiAwLjAwMSwgInRyYXVtYVNjb3JlIjogMC4wLCAiZmFtaWx5SGlzdG9yeVNjb3JlIjogMC4wMDN9fX1dLCAic3BlbGxDb3JyZWN0ZWRUZXh0IjogW3siY29ycmVjdGVkVGV4dCI6ICJwZWFudXQgYWxsZXJneSJ9XX0=\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"code\": { \"coding\": [ { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"33376613c387908fbcd8ffafca135a19d84efef2bd195e9750d4bd41\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"C0559470\", \"display\": \"allergy to peanut\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"33376613c387908fbcd8ffafca135a19d84efef2bd195e9750d4bd41\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"91935009\", \"system\": \"http://snomed.info/sct\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"33376613c387908fbcd8ffafca135a19d84efef2bd195e9750d4bd41\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"995.3\", \"system\": \"http://hl7.org/fhir/sid/icd-9-cm\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"33376613c387908fbcd8ffafca135a19d84efef2bd195e9750d4bd41\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"Z91.010\", \"system\": \"http://hl7.org/fhir/sid/icd-10-cm\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"33376613c387908fbcd8ffafca135a19d84efef2bd195e9750d4bd41\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"Z91.0\", \"system\": \"http://hl7.org/fhir/sid/icd-10-cm\" } ], \"text\": \"peanut\" }, \"patient\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"AllergyIntolerance\" } }, { \"fullUrl\": \"urn:uuid:8ded6929-2c8f-4d0b-bb5f-e402924f407e\", \"request\": { \"method\": \"POST\", \"url\": \"Condition\" }, \"resource\": { \"id\": \"amx123\", \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"56af15e63b156a13a88436e138c479f2801d758d339fff32a93b3de8\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"AllergyIntolerance.code.coding\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:8ded6929-2c8f-4d0b-bb5f-e402924f407e\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"AllergyIntolerance.code.text\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"eyJhdHRyaWJ1dGVWYWx1ZXMiOiBbeyJiZWdpbiI6IDAsICJlbmQiOiAxOSwgImNvdmVyZWRUZXh0IjogImFtb3hpY2lsbGluIGFsbGVyZ3kiLCAibmVnYXRlZCI6IGZhbHNlLCAicHJlZmVycmVkTmFtZSI6ICJhbGxlcmd5IHRvIGFtb3hpY2lsbGluIiwgInZhbHVlcyI6IFt7InZhbHVlIjogImFsbGVyZ3kgdG8gYW1veGljaWxsaW4ifV0sICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBBdHRyaWJ1dGVzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJjb25jZXB0IjogeyJ1aWQiOiA0fSwgIm5hbWUiOiAiRGlhZ25vc2lzIiwgImljZDlDb2RlIjogIkU5MzAuMCw5OTUuMjciLCAiaWNkMTBDb2RlIjogIlo4OC4wIiwgInNub21lZENvbmNlcHRJZCI6ICIyOTQ1MDUwMDgiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJWQUxJRCJ9LCAiaW5zaWdodE1vZGVsRGF0YSI6IHsiZGlhZ25vc2lzIjogeyJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuOTE5LCAicGF0aWVudFJlcG9ydGVkU2NvcmUiOiAwLjAwNywgImRpc2N1c3NlZFNjb3JlIjogMC4wNzV9LCAic3VzcGVjdGVkU2NvcmUiOiAwLjA5NiwgInN5bXB0b21TY29yZSI6IDAuMDAxLCAidHJhdW1hU2NvcmUiOiAwLjAsICJmYW1pbHlIaXN0b3J5U2NvcmUiOiAwLjAwNH19LCAiY2NzQ29kZSI6ICIyNTMifV0sICJjb25jZXB0cyI6IFt7InR5cGUiOiAidW1scy5EaXNlYXNlT3JTeW5kcm9tZSIsICJ1aWQiOiAyLCAiYmVnaW4iOiAwLCAiZW5kIjogMTksICJjb3ZlcmVkVGV4dCI6ICJhbW94aWNpbGxpbiBhbGxlcmd5IiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDU3MTQxNyIsICJwcmVmZXJyZWROYW1lIjogIkFsbGVyZ3kgdG8gYW1veGljaWxsaW4iLCAic2VtYW50aWNUeXBlIjogImRzeW4iLCAic291cmNlIjogInVtbHMiLCAic291cmNlVmVyc2lvbiI6ICIyMDIwQUEiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJOT19ERUNJU0lPTiJ9LCAiaWNkOUNvZGUiOiAiOTk1LjI3IiwgImljZDEwQ29kZSI6ICJaODguMCxaODguMSIsICJzbm9tZWRDb25jZXB0SWQiOiAiMjk0NTA1MDA4IiwgInZvY2FicyI6ICJDSFYsU05PTUVEQ1RfVVMiLCAiaW5zaWdodE1vZGVsRGF0YSI6IHsiZGlhZ25vc2lzIjogeyJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuOTE5LCAicGF0aWVudFJlcG9ydGVkU2NvcmUiOiAwLjAwNywgImRpc2N1c3NlZFNjb3JlIjogMC4wNzV9LCAic3VzcGVjdGVkU2NvcmUiOiAwLjA5NiwgInN5bXB0b21TY29yZSI6IDAuMDAxLCAidHJhdW1hU2NvcmUiOiAwLjAsICJmYW1pbHlIaXN0b3J5U2NvcmUiOiAwLjAwNH19fSwgeyJ0eXBlIjogIklDRGlhZ25vc2lzIiwgImJlZ2luIjogMCwgImVuZCI6IDE5LCAiY292ZXJlZFRleHQiOiAiYW1veGljaWxsaW4gYWxsZXJneSIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzA1NzE0MTciLCAicHJlZmVycmVkTmFtZSI6ICJBbGxlcmd5IHRvIGFtb3hpY2lsbGluIiwgInNvdXJjZSI6ICJDbGluaWNhbCBJbnNpZ2h0cyAtIERlcml2ZWQgQ29uY2VwdHMiLCAic291cmNlVmVyc2lvbiI6ICJ2MS4wIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgImljZDlDb2RlIjogIjk5NS4yNyIsICJpY2QxMENvZGUiOiAiWjg4LjAsWjg4LjEiLCAic25vbWVkQ29uY2VwdElkIjogIjI5NDUwNTAwOCIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC45MTksICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMDA3LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjA3NX0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMDk2LCAic3ltcHRvbVNjb3JlIjogMC4wMDEsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDA0fX0sICJydWxlSWQiOiAiNjk4ZjJiMTktMjdiNi00ZGFiLTkxNTAtN2Q3ZWYzYjAzYTVjIiwgImRlcml2ZWRGcm9tIjogW3sidWlkIjogMn1dfV0sICJNZWRpY2F0aW9uSW5kIjogW3sidHlwZSI6ICJhY2kuTWVkaWNhdGlvbkluZCIsICJiZWdpbiI6IDAsICJlbmQiOiAxMSwgImNvdmVyZWRUZXh0IjogImFtb3hpY2lsbGluIiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDAwMjY0NSIsICJkcnVnIjogW3siY292ZXJlZFRleHQiOiAiYW1veGljaWxsaW4iLCAiY3VpIjogIkMwMDAyNjQ1IiwgImNvbXBsZXgiOiAiZmFsc2UiLCAiZW5kIjogMTEsICJ0eXBlIjogImFjaS5JbmRfRHJ1ZyIsICJuYW1lMSI6IFt7InJ4Tm9ybUlEIjogIjcyMyIsICJjb3ZlcmVkVGV4dCI6ICJhbW94aWNpbGxpbiIsICJjdWkiOiAiQzAwMDI2NDUiLCAiZHJ1Z1N1cmZhY2VGb3JtIjogImFtb3hpY2lsbGluIiwgImRydWdOb3JtYWxpemVkTmFtZSI6ICJhbW94aWNpbGxpbiIsICJlbmQiOiAxMSwgInR5cGUiOiAiYWNpLkRydWdOYW1lIiwgImJlZ2luIjogMH1dLCAiYmVnaW4iOiAwfV0sICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIklOVkFMSUQiLCAiY29tbWVudCI6ICJDbGluaWNhbCBJbnNpZ2h0czogVGhpcyBjb25jZXB0IHdhcyBzaG9ydGVyIHRoYW4gYW4gb3ZlcmxhcHBpbmcgY29uY2VwdC4ifX1dLCAiU3ltcHRvbURpc2Vhc2VJbmQiOiBbeyJ0eXBlIjogImFjaS5TeW1wdG9tRGlzZWFzZUluZCIsICJ1aWQiOiA0LCAiYmVnaW4iOiAwLCAiZW5kIjogMTksICJjb3ZlcmVkVGV4dCI6ICJhbW94aWNpbGxpbiBhbGxlcmd5IiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDU3MTQxNyIsICJpY2QxMENvZGUiOiAiWjg4LjAiLCAibW9kYWxpdHkiOiAicG9zaXRpdmUiLCAic3ltcHRvbURpc2Vhc2VTdXJmYWNlRm9ybSI6ICJhbW94aWNpbGxpbiBhbGxlcmd5IiwgInNub21lZENvbmNlcHRJZCI6ICIyOTQ1MDUwMDgiLCAiY2NzQ29kZSI6ICIyNTMiLCAic3ltcHRvbURpc2Vhc2VOb3JtYWxpemVkTmFtZSI6ICJhbGxlcmd5IHRvIGFtb3hpY2lsbGluIiwgImljZDlDb2RlIjogIkU5MzAuMCw5OTUuMjciLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJWQUxJRCJ9LCAiaW5zaWdodE1vZGVsRGF0YSI6IHsiZGlhZ25vc2lzIjogeyJ1c2FnZSI6IHsiZXhwbGljaXRTY29yZSI6IDAuOTE5LCAicGF0aWVudFJlcG9ydGVkU2NvcmUiOiAwLjAwNywgImRpc2N1c3NlZFNjb3JlIjogMC4wNzV9LCAic3VzcGVjdGVkU2NvcmUiOiAwLjA5NiwgInN5bXB0b21TY29yZSI6IDAuMDAxLCAidHJhdW1hU2NvcmUiOiAwLjAsICJmYW1pbHlIaXN0b3J5U2NvcmUiOiAwLjAwNH19fV0sICJzcGVsbENvcnJlY3RlZFRleHQiOiBbeyJjb3JyZWN0ZWRUZXh0IjogImFtb3hpY2lsbGluIGFsbGVyZ3kifV19\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"code\": { \"coding\": [ { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"56af15e63b156a13a88436e138c479f2801d758d339fff32a93b3de8\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"C0571417\", \"display\": \"allergy to amoxicillin\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"56af15e63b156a13a88436e138c479f2801d758d339fff32a93b3de8\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"294505008\", \"system\": \"http://snomed.info/sct\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"56af15e63b156a13a88436e138c479f2801d758d339fff32a93b3de8\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"E930.0\", \"system\": \"http://hl7.org/fhir/sid/icd-9-cm\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"56af15e63b156a13a88436e138c479f2801d758d339fff32a93b3de8\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"995.27\", \"system\": \"http://hl7.org/fhir/sid/icd-9-cm\" }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"56af15e63b156a13a88436e138c479f2801d758d339fff32a93b3de8\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"Z88.0\", \"system\": \"http://hl7.org/fhir/sid/icd-10-cm\" } ], \"text\": \"amoxicillin\" }, \"patient\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"AllergyIntolerance\" } } ], \"type\": \"transaction\", \"resourceType\": \"Bundle\" }","title":"Enrich an allergy intolerance"},{"location":"examples/acd/enrich/#allergy-derived-codes","text":"The food allergy resource has been enriched with new codes. System Code Display http://terminology.hl7.org/CodeSystem/umls C0559470 allergy to peanut http://snomed.info/sct 91935009 http://hl7.org/fhir/sid/icd-9-cm 995.3 http://hl7.org/fhir/sid/icd-10-cm Z91.010 http://hl7.org/fhir/sid/icd-10-cm Z91.0 In a similar way, the medication allergy resource has been enriched with new codes. System Code Display http://terminology.hl7.org/CodeSystem/umls C0571417 allergy to amoxicillin http://snomed.info/sct 294505008 http://hl7.org/fhir/sid/icd-9-cm E930.0 http://hl7.org/fhir/sid/icd-9-cm 995.27 http://hl7.org/fhir/sid/icd-10-cm Z88.0","title":"Allergy derived codes"},{"location":"examples/acd/enrich/#evidence","text":"nlp-insights enriches resources according to the Alvearie FHIR IG . The nlp-insights service adds detailed information to the enriched resource to explain what caused the additional codes to be added.","title":"Evidence"},{"location":"examples/acd/enrich/#insight-summary","text":"Each coding that has been derived by NLP contains an insight summary extension that can be examined to determine which insight derived the code. For example consider the UMLS code C0559470 that was added to the allergy intolerance resource pnt123. C0559470 coding in AllergyIntolerance pnt123 { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"33376613c387908fbcd8ffafca135a19d84efef2bd195e9750d4bd41\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"C0559470\", \"display\": \"allergy to peanut\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } } The summary extension has been added to the coding. The summary has an insight id and category. The insight id has a system and identifier that together identify the insight. In this example, the system tells us that the insight was discovered using ACD. The identifier value is unique (within the system) to this insight, and may be used to find the insight extension for the insight in the resource meta. When nlp-insights derives codes, it will create one insight for all derived codes that are created from the same text. It is common for all summary extensions to refer to the same insight id. The category tells us that the coding was derived using Natural Language Processing.","title":"Insight Summary"},{"location":"examples/acd/enrich/#insight-extension-in-resource-meta","text":"The insight identified by the summary extension has an insight extension in the resource's meta. The insight extension contains lots of details about what the insight applies to and why it was created. Insight extension in the meta for AllergyIntolerance pnt123 { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/acd\", \"value\": \"33376613c387908fbcd8ffafca135a19d84efef2bd195e9750d4bd41\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"AllergyIntolerance.code.coding\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:12f769ca-81a8-4482-a07a-c98260b4991b\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"AllergyIntolerance.code.text\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"eyJhdHRyaWJ1dGVWYWx1ZXMiOiBbeyJiZWdpbiI6IDAsICJlbmQiOiAxNCwgImNvdmVyZWRUZXh0IjogInBlYW51dCBhbGxlcmd5IiwgIm5lZ2F0ZWQiOiBmYWxzZSwgInByZWZlcnJlZE5hbWUiOiAiYWxsZXJneSB0byBwZWFudXQiLCAidmFsdWVzIjogW3sidmFsdWUiOiAiYWxsZXJneSB0byBwZWFudXQifV0sICJzb3VyY2UiOiAiQ2xpbmljYWwgSW5zaWdodHMgLSBBdHRyaWJ1dGVzIiwgInNvdXJjZVZlcnNpb24iOiAidjEuMCIsICJjb25jZXB0IjogeyJ1aWQiOiA0fSwgIm5hbWUiOiAiRGlhZ25vc2lzIiwgImljZDlDb2RlIjogIjk5NS4zIiwgImljZDEwQ29kZSI6ICJaOTEuMDEwLFo5MS4wIiwgInNub21lZENvbmNlcHRJZCI6ICI5MTkzNTAwOSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIlZBTElEIn0sICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC44OTYsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMDA5LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjA5NX0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMTA5LCAic3ltcHRvbVNjb3JlIjogMC4wMDEsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX0sICJjY3NDb2RlIjogIjI1MyJ9XSwgImNvbmNlcHRzIjogW3sidHlwZSI6ICJ1bWxzLkRpc2Vhc2VPclN5bmRyb21lIiwgInVpZCI6IDIsICJiZWdpbiI6IDAsICJlbmQiOiAxNCwgImNvdmVyZWRUZXh0IjogInBlYW51dCBhbGxlcmd5IiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDU1OTQ3MCIsICJwcmVmZXJyZWROYW1lIjogIkFsbGVyZ3kgdG8gcGVhbnV0cyIsICJzZW1hbnRpY1R5cGUiOiAiZHN5biIsICJzb3VyY2UiOiAidW1scyIsICJzb3VyY2VWZXJzaW9uIjogIjIwMjBBQSIsICJkaXNhbWJpZ3VhdGlvbkRhdGEiOiB7InZhbGlkaXR5IjogIk5PX0RFQ0lTSU9OIn0sICJpY2Q5Q29kZSI6ICI5OTUuMyIsICJpY2QxMENvZGUiOiAiWjkxLjAsWjkxLjAxMCIsICJzbm9tZWRDb25jZXB0SWQiOiAiOTE5MzUwMDkiLCAibWVzaElkIjogIk0wMzUxODM2IiwgInZvY2FicyI6ICJNVEgsQ0hWLE1TSCxNRURMSU5FUExVUyxTTk9NRURDVF9VUyIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC44OTYsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMDA5LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjA5NX0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMTA5LCAic3ltcHRvbVNjb3JlIjogMC4wMDEsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX19LCB7InR5cGUiOiAiSUNEaWFnbm9zaXMiLCAiYmVnaW4iOiAwLCAiZW5kIjogMTQsICJjb3ZlcmVkVGV4dCI6ICJwZWFudXQgYWxsZXJneSIsICJuZWdhdGVkIjogZmFsc2UsICJjdWkiOiAiQzA1NTk0NzAiLCAicHJlZmVycmVkTmFtZSI6ICJBbGxlcmd5IHRvIHBlYW51dHMiLCAic291cmNlIjogIkNsaW5pY2FsIEluc2lnaHRzIC0gRGVyaXZlZCBDb25jZXB0cyIsICJzb3VyY2VWZXJzaW9uIjogInYxLjAiLCAiZGlzYW1iaWd1YXRpb25EYXRhIjogeyJ2YWxpZGl0eSI6ICJWQUxJRCJ9LCAiaWNkOUNvZGUiOiAiOTk1LjMiLCAiaWNkMTBDb2RlIjogIlo5MS4wLFo5MS4wMTAiLCAic25vbWVkQ29uY2VwdElkIjogIjkxOTM1MDA5IiwgIm1lc2hJZCI6ICJNMDM1MTgzNiIsICJpbnNpZ2h0TW9kZWxEYXRhIjogeyJkaWFnbm9zaXMiOiB7InVzYWdlIjogeyJleHBsaWNpdFNjb3JlIjogMC44OTYsICJwYXRpZW50UmVwb3J0ZWRTY29yZSI6IDAuMDA5LCAiZGlzY3Vzc2VkU2NvcmUiOiAwLjA5NX0sICJzdXNwZWN0ZWRTY29yZSI6IDAuMTA5LCAic3ltcHRvbVNjb3JlIjogMC4wMDEsICJ0cmF1bWFTY29yZSI6IDAuMCwgImZhbWlseUhpc3RvcnlTY29yZSI6IDAuMDAzfX0sICJydWxlSWQiOiAiNjk4ZjJiMTktMjdiNi00ZGFiLTkxNTAtN2Q3ZWYzYjAzYTVjIiwgImRlcml2ZWRGcm9tIjogW3sidWlkIjogMn1dfV0sICJTeW1wdG9tRGlzZWFzZUluZCI6IFt7InR5cGUiOiAiYWNpLlN5bXB0b21EaXNlYXNlSW5kIiwgInVpZCI6IDQsICJiZWdpbiI6IDAsICJlbmQiOiAxNCwgImNvdmVyZWRUZXh0IjogInBlYW51dCBhbGxlcmd5IiwgIm5lZ2F0ZWQiOiBmYWxzZSwgImN1aSI6ICJDMDU1OTQ3MCIsICJpY2QxMENvZGUiOiAiWjkxLjAxMCxaOTEuMCIsICJtb2RhbGl0eSI6ICJwb3NpdGl2ZSIsICJzeW1wdG9tRGlzZWFzZVN1cmZhY2VGb3JtIjogInBlYW51dCBhbGxlcmd5IiwgInNub21lZENvbmNlcHRJZCI6ICI5MTkzNTAwOSIsICJjY3NDb2RlIjogIjI1MyIsICJzeW1wdG9tRGlzZWFzZU5vcm1hbGl6ZWROYW1lIjogImFsbGVyZ3kgdG8gcGVhbnV0IiwgImljZDlDb2RlIjogIjk5NS4zIiwgImRpc2FtYmlndWF0aW9uRGF0YSI6IHsidmFsaWRpdHkiOiAiVkFMSUQifSwgImluc2lnaHRNb2RlbERhdGEiOiB7ImRpYWdub3NpcyI6IHsidXNhZ2UiOiB7ImV4cGxpY2l0U2NvcmUiOiAwLjg5NiwgInBhdGllbnRSZXBvcnRlZFNjb3JlIjogMC4wMDksICJkaXNjdXNzZWRTY29yZSI6IDAuMDk1fSwgInN1c3BlY3RlZFNjb3JlIjogMC4xMDksICJzeW1wdG9tU2NvcmUiOiAwLjAwMSwgInRyYXVtYVNjb3JlIjogMC4wLCAiZmFtaWx5SGlzdG9yeVNjb3JlIjogMC4wMDN9fX1dLCAic3BlbGxDb3JyZWN0ZWRUZXh0IjogW3siY29ycmVjdGVkVGV4dCI6ICJwZWFudXQgYWxsZXJneSJ9XX0=\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } The extensions of interest within the insight extension are: extension purpose insight-id identifier for the insight. path HL7 FHIR Path to the part of this resource that the insight applies to. This is the location where derived codes have been added. insight-detail Detailed supporting evidence for the insight.","title":"Insight Extension in Resource Meta"},{"location":"examples/acd/enrich/#insight-detail","text":"The insight detail extension provides information about why the insight got created: Extension Purpose reference The resource that contained the text that was used to create the insight. For enrichment, this will always be the enriched resource, the insight is derived from the same resource that the insight pertains to. reference-path HL7 FHIR Path that describes the location of the text used to create the insight (within reference) evaluated-output base64 response from the ACD Service","title":"Insight detail"},{"location":"examples/fhir_integration/fhir_integration_tutorial/","text":"%load_ext lab_black Integration of nlp-insights with a FHIR Server Although nlp-insights can be used as a standalone service, the primary intent of the service is to use it to enhance a bundle or resources, prior to posting those resources to a FHIR server. This notebook contains a demonstration of posting enriched resources to a FHIR server, and retrieving enriched insights and evidence for the insight. Setup This notebook was created with jupyter-lab 3.1.11 and python 3.9.6. Using a virtual envirnoment is recommended. Python source code is formatted with Black . Start and configure the nlp-insights service The examples have been written with the assumption that ACD is configured as the NLP backend for the nlp-insight service. You need to start and confgure the nlp-insights service. Configuring the server to use QuickUMLS is also an option, although the discovered insights will differ. Start a local FHIR server Although health patterns defines a much more sophisticated architecture for ingestion pipelines, these examples use the IBM FHIR server running locally in a container. This keeps things simple, and allows us to focus on the value of the nlp-insights server. The server can be started locally by running the command: docker run -p 9443:9443 -e BOOTSTRAP_DB=true ibmcom/ibm-fhir-server Load FHIRPath Jars FHIRPath is an HL7 standard for navigating and extracting parts of FHIR resources. These examples evaluate FHIRPath expressions by utilizing Java code built for the IBM FHIR Server. The advantage to using FHIRPath is that the FHIRPath language is aware of features specific to FHIR resources, which makes the queries simpiler in many cases. The python interface provided in this notebook does not provide full functionality, but it is complete enough for the examples. You need to download the jars from maven centeral, and store them in the local directory indicated by FHIR_PATH_JARS (defined in a future cell). These are steps to do that (You may need to install Apache Maven 3.5.4 or newer): * Download the pom for the project curl https://repo1.maven.org/maven2/com/ibm/fhir/fhir-path/4.10.2/fhir-path-4.10.2.pom > pom.xml * Download the jars mvn -DoutputDirectory=. -Dartifact=\"com.ibm.fhir:fhir-path:4.10.0\" dependency:copy dependency:copy-dependencies Third party libraries The examples depend on a few other libraries to make processing easier. jpype1 is used to call Java code when evaluating FHIRPath expressions. !pip install --upgrade pip !pip install pandas==1.3.5 !pip install fhir.resources==6.1.0 !pip install jpype1==1.3.0 Requirement already satisfied: pip in ./nlp-insights/lib/python3.9/site-packages (21.3.1) Requirement already satisfied: pandas==1.3.5 in ./nlp-insights/lib/python3.9/site-packages (1.3.5) Requirement already satisfied: pytz>=2017.3 in ./nlp-insights/lib/python3.9/site-packages (from pandas==1.3.5) (2021.3) Requirement already satisfied: numpy>=1.17.3 in ./nlp-insights/lib/python3.9/site-packages (from pandas==1.3.5) (1.22.0) Requirement already satisfied: python-dateutil>=2.7.3 in ./nlp-insights/lib/python3.9/site-packages (from pandas==1.3.5) (2.8.2) Requirement already satisfied: six>=1.5 in ./nlp-insights/lib/python3.9/site-packages (from python-dateutil>=2.7.3->pandas==1.3.5) (1.16.0) Requirement already satisfied: fhir.resources==6.1.0 in ./nlp-insights/lib/python3.9/site-packages (6.1.0) Requirement already satisfied: pydantic[email]>=1.7.2 in ./nlp-insights/lib/python3.9/site-packages (from fhir.resources==6.1.0) (1.9.0) Requirement already satisfied: typing-extensions>=3.7.4.3 in ./nlp-insights/lib/python3.9/site-packages (from pydantic[email]>=1.7.2->fhir.resources==6.1.0) (4.0.1) Requirement already satisfied: email-validator>=1.0.3 in ./nlp-insights/lib/python3.9/site-packages (from pydantic[email]>=1.7.2->fhir.resources==6.1.0) (1.1.3) Requirement already satisfied: dnspython>=1.15.0 in ./nlp-insights/lib/python3.9/site-packages (from email-validator>=1.0.3->pydantic[email]>=1.7.2->fhir.resources==6.1.0) (2.1.0) Requirement already satisfied: idna>=2.0.0 in ./nlp-insights/lib/python3.9/site-packages (from email-validator>=1.0.3->pydantic[email]>=1.7.2->fhir.resources==6.1.0) (3.3) Requirement already satisfied: jpype1==1.3.0 in ./nlp-insights/lib/python3.9/site-packages (1.3.0) import requests import base64 import json import urllib3 import os import base64 import pandas as pd import numpy as np pd.set_option(\"display.max_colwidth\", None) Wrapper code to Evaluate FHIRPath expression This code is used to call into the Java FHIRPath evaluation code. The details of how it works are outside the scope of nlp-insights examples. If you need more details jpype is well documented and the Java code and documentation is available here . This seemed to be the easiest way to evaluate an expression from Python, although not all expressions are supported. If you would like to try a different implementation of FHIRPath, there are a few listed on the HL7 wiki . ### # CHANGE THIS TO THE DIRECTORY WHERE YOU DOWNLOADED THE FHIRPath JARS!!!!! ### FHIR_PATH_JARS = \"/home/ntl/fhir/fhir-path/*\" import jpype import jpype.imports from jpype.types import * print(f\"looking for FHIRPath jars in {FHIR_PATH_JARS}\") if not jpype.isJVMStarted(): jpype.startJVM(classpath=[FHIR_PATH_JARS]) looking for FHIRPath jars in /home/ntl/fhir/fhir-path/* from java.io import ByteArrayInputStream import java.util.Collection import java.lang.String import java.lang.Integer import java.math.BigDecimal from com.ibm.fhir.path.evaluator import FHIRPathEvaluator from com.ibm.fhir.model.parser import FHIRParser from com.ibm.fhir.model.format import Format import com.ibm.fhir.path.FHIRPathElementNode import com.ibm.fhir.path.FHIRPathResourceNode import com.ibm.fhir.path.exception.FHIRPathException as FHIRPathException from json import JSONDecodeError def convert_obj(java_obj): \"\"\"Converts a FHIRPath Java Object to a python object\"\"\" if java_obj is None: return None if isinstance(java_obj, com.ibm.fhir.path.FHIRPathResourceNode): return str(java_obj.resource().toString()) if isinstance(java_obj, com.ibm.fhir.path.FHIRPathElementNode): node = java_obj.element() if node.hasValue(): node = node.getValue() if isinstance(node, java.lang.String): return str(node) if isinstance(node, java.lang.Integer): return int(node) if isinstance(node, java.math.BigDecimal): return int(node) if isinstance(node, JArray): return str(node) try: return json.loads(str(node.toString())) except JSONDecodeError: return str(node.toString()) elif isinstance(java_obj, java.util.Collection): return [convert_obj(obj) for obj in java_obj] else: try: return json.loads(str(java_obj.toString())) except JSONDecodeError: return str(java_obj.toString()) raise IllegalArgumentError(str((type(node), str(node)))) def evaluate_fhir_path(json_str, expr_str): \"\"\"Evaluates an expression agains a FHIR Resource Args: json_str - FHIR resource as a json string expr_str - FHIRPath expression to evaluate Returns: Results of the evaluation, usually a list of String values. May return None if no results were found \"\"\" resource = FHIRParser.parser(Format.JSON).parse( ByteArrayInputStream(json_str.encode(\"utf-8\")) ) try: nodes = FHIRPathEvaluator.evaluator().evaluate(resource, expr_str) except FHIRPathException as ex: raise RuntimeError(str(ex) + \"\\nWith expression:\\n\" + expr_str) return convert_obj(nodes) Local Server URLs and Ports # We can be trusting of certificates for a local container urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning) fhir_server = \"https://fhiruser:change-password@localhost:9443/fhir-server/api/v4\" nlp_insights_server = \"http://localhost:5000\" Health Checks fhir_health_check = requests.get(f\"{fhir_server}/$healthcheck\", verify=False) fhir_health_check.raise_for_status() insights_health_check = requests.get(f\"{nlp_insights_server}/config\") insights_health_check.raise_for_status() POST Bundle with insights into FHIR Server The input bundle is in a json file that can be viewed here . The bundle is loaded, sent to the nlp-insights service for enrichment, and then posted to the FHIR server. Load Bundle (without insights) with open(\"./input_bundle.json\", \"r\") as f: bundle_json = json.load(f) Input bundle Summary We can get a rough idea of what is our input bundle using json_normalize to build a data frame. Using dataframes will make it easier to view the insights. Deeply nested JSON documents that represent FHIR resources are hard to look at; rows and columns are more familiar for human readers. Another reason for using rows and columns is that Ground Truth, or the insights that humans expect to be discovered, is often stored as rows and columns. The nlp-insights service does not include ground truth, nor is accuracy discussed in the documentation or tutorials - but accuracy must be measured for real use cases. Working with rows and columns here makes it easier to transition to other these types of analysis. Using the data frame, it's easy to see which resources and text are in the initial bundle. Also be aware that there are no code values for in the Condition and AllergyIntolerance resources. df = pd.json_normalize(bundle_json, record_path=[\"entry\"]) df[\"report_text\"] = df[\"resource.presentedForm\"].apply( lambda f: base64.b64decode(f[0][\"data\"]).decode(\"utf-8\") if not pd.isnull(f) else np.NaN ) # assert that columns for codes do not exist assert \"resource.medicationCodeableConcept.coding\" not in df.columns assert \"resource.code.coding\" not in df.columns # print resource types and code text df.loc[:, [\"resource.resourceType\", \"resource.code.text\", \"report_text\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } resource.resourceType resource.code.text report_text 0 Patient NaN NaN 1 DiagnosticReport Chief complaint Narrative - Reported The patient had a myocardial infarction in 2015 and was prescribed Losartan.The patient is taking Losartan exactly as prescribed and has had no side effects. 2 Condition diabetes NaN 3 AllergyIntolerance peanut NaN 4 AllergyIntolerance amoxicillin NaN Discover insights The nlp-insights service is used to discover insights. nlp_insights_response = requests.post( f\"http://localhost:5000/discoverInsights\", headers={\"Content-Type\": \"application/fhir+json\"}, json=bundle_json, ) nlp_insights_response.raise_for_status() enriched_bundle_json = json.loads(nlp_insights_response.text) Enriched Bundle Summary A quick summary of the updated bundle that was returned from the nlp-insights service verifies that a few new resources have been derived, and the prior condition and AllergyIntolerance resources have been enriched with additional codes. df = pd.json_normalize(enriched_bundle_json, record_path=[\"entry\"]) df[\"report_text\"] = df[\"resource.presentedForm\"].apply( lambda f: base64.b64decode(f[0][\"data\"]).decode(\"utf-8\") if not pd.isnull(f) else np.NaN ) df.loc[df[\"resource.resourceType\"] != \"MedicationStatement\", \"codes\"] = df.loc[ df[\"resource.resourceType\"] != \"MedicationStatement\", \"resource.code.coding\" ].apply( lambda codes: [(code[\"system\"], code[\"code\"]) for code in codes] if isinstance(codes, list) else np.NaN ) df.loc[df[\"resource.resourceType\"] == \"MedicationStatement\", \"codes\"] = df.loc[ df[\"resource.resourceType\"] == \"MedicationStatement\", \"resource.medicationCodeableConcept.coding\", ].apply( lambda codes: [(code[\"system\"], code[\"code\"]) for code in codes] if isinstance(codes, list) else np.NaN ) df[\"code_text\"] = df.loc[:, \"resource.code.text\"].combine_first( df.loc[:, \"resource.medicationCodeableConcept.text\"] ) df.loc[ :, [ \"resource.resourceType\", \"code_text\", \"codes\", ], ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } resource.resourceType code_text codes 0 Patient NaN NaN 1 DiagnosticReport Chief complaint Narrative - Reported NaN 2 Condition diabetes [(http://terminology.hl7.org/CodeSystem/umls, C0011849), (http://snomed.info/sct, 73211009), (http://hl7.org/fhir/sid/icd-9-cm, 250.00), (http://hl7.org/fhir/sid/icd-10-cm, E14.9)] 3 AllergyIntolerance peanut [(http://terminology.hl7.org/CodeSystem/umls, C0559470), (http://snomed.info/sct, 91935009), (http://hl7.org/fhir/sid/icd-9-cm, 995.3), (http://hl7.org/fhir/sid/icd-10-cm, Z91.010), (http://hl7.org/fhir/sid/icd-10-cm, Z91.0)] 4 AllergyIntolerance amoxicillin [(http://terminology.hl7.org/CodeSystem/umls, C0571417), (http://snomed.info/sct, 294505008), (http://hl7.org/fhir/sid/icd-9-cm, E930.0), (http://hl7.org/fhir/sid/icd-9-cm, 995.27), (http://hl7.org/fhir/sid/icd-10-cm, Z88.0)] 5 Condition myocardial infarction [(http://terminology.hl7.org/CodeSystem/umls, C0027051), (http://snomed.info/sct, 22298006), (http://hl7.org/fhir/sid/icd-9-cm, 410.90), (http://hl7.org/fhir/sid/icd-10-cm, I21.9)] 6 MedicationStatement Losartan [(http://terminology.hl7.org/CodeSystem/umls, C0126174), (http://www.nlm.nih.gov/research/umls/rxnorm, 52175)] Post resources with insights to the FHIR server Posting the updated bundle creates the resources on the FHIR server. This also assigns identifier values to the resources. We will retrieve the patient location from the response, so that we can retrieve the resources from the server. fhir_server_response = requests.post( f\"{fhir_server}/\", headers={\"Content-Type\": \"application/fhir+json\"}, json=enriched_bundle_json, verify=False, ) fhir_server_response.raise_for_status() patient_loc = evaluate_fhir_path( fhir_server_response.text, \"Bundle.entry.response.location.where(startsWith('Patient')).getValue()\", )[0] print(f\"The patient's location in the FHIR Server is: {patient_loc}\") The patient's location in the FHIR Server is: Patient/17e9d5ddf75-824e1c98-1484-4079-8330-63141202c23b/_history/1 Search for all the patient's resources In the real world, there will be many resources. The sever may respond with a page at a time, and we might be interested in only a subset of resources. For this example, we'll retrieve everything for the patient; the number of resources is small enough that paging and performance cost is not a consideration. all_resources_response = requests.get( f\"{fhir_server}/{patient_loc}/$everything\", headers={\"Accept\": \"application/fhir+json\"}, verify=False, ) all_resources_response.raise_for_status() Convert the search bundle into a DataFrame The bundle is split into rows, where each row represents a resource in the bundle. from fhir.resources.bundle import Bundle resources_df = pd.DataFrame( [ { \"resource_id\": entry.resource.id, \"resource_type\": type(entry.resource).__name__, \"resource_json\": entry.resource.json(), } for entry in Bundle.parse_raw(all_resources_response.text).entry ] ) pd.set_option(\"display.max_colwidth\", 75) display(resources_df) pd.set_option(\"display.max_colwidth\", None) original_resources_df = resources_df # save for later .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } resource_id resource_type resource_json 0 17e9d5ddf75-824e1c98-1484-4079-8330-63141202c23b Patient {\"id\": \"17e9d5ddf75-824e1c98-1484-4079-8330-63141202c23b\", \"meta\": {\"la... 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance {\"id\": \"17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720\", \"meta\": {\"ex... 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance {\"id\": \"17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be\", \"meta\": {\"ex... 3 17e9d5ddf76-2a1b470e-3808-442d-a1af-857b7532b740 MedicationStatement {\"id\": \"17e9d5ddf76-2a1b470e-3808-442d-a1af-857b7532b740\", \"meta\": {\"ex... 4 17e9d5ddf75-b3eb69d7-fd03-4caf-8fe6-d8e4f2a73b2c DiagnosticReport {\"id\": \"17e9d5ddf75-b3eb69d7-fd03-4caf-8fe6-d8e4f2a73b2c\", \"meta\": {\"la... 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition {\"id\": \"17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119\", \"meta\": {\"ex... 6 17e9d5ddf76-f5a481e8-1c92-4179-bb4d-2c668cc9bd66 Condition {\"id\": \"17e9d5ddf76-f5a481e8-1c92-4179-bb4d-2c668cc9bd66\", \"meta\": {\"ex... Retrieve Evidence for Derived Resources This section describes how to identify derived resources, and how to determine what information was used to derive the resource. Extension URLs All insight related data is stored in FHIR extensions. These extensions are defined in the Alvearie Implementation Guide . The type of extension is defined by the URL for the extension. summary_ext_url = \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" category_ext_url = \"http://ibm.com/fhir/cdm/StructureDefinition/category\" insight_id_ext_url = \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\" insight_ext_url = \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" insight_detail_ext = \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" insight_reference_ext = \"http://ibm.com/fhir/cdm/StructureDefinition/reference\" insight_reference_path = \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\" insight_result_ext = \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" insight_span_ext = \"http://ibm.com/fhir/cdm/StructureDefinition/span\" insight_offset_begin_ext = \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\" insight_offset_end_ext = \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\" Function to pretty print a data frame Some dataframes have muliple lines of text in a column. This function prints those nicer for human readers. from IPython.display import display, HTML def print_df(df): \"\"\"This function prints a dataframe that has newline characters in a column a little nicer in a notebook\"\"\" # https://stackoverflow.com/questions/50644066/pandas-dataframe-and-multi-line-values return display(HTML(df.to_html().replace(\"\\\\n\", \"<br>\"))) Function to get the code text This function evaluates a FHIRPath expression against a resource to return the text associated with the code. We use this to provide a quick idea of what this resource is about. def get_code_text(resource) -> str: if txt := evaluate_fhir_path( resource, \"Condition.code.text | \" \"AllergyIntolerance.code.text | \" \"MedicationStatement.medication.text\", ): return txt[0] return np.NaN Retrieve Derived Resources When nlp-insights creates a derived resource, it adds an insight summary extension to the resource. The summary extension contains the insight id for the insight that created the resource. We need this ID to locate the details of the insight (The details are stored in the resource's meta element). The insight identifier's system and value will be used together to uniquely identify the insight. Function Retrieve Insight Identifier from summary extension This function evaluates a FHIRPath exrpression to compute the insight id's system and value in the summary extension. def get_derived_resource_insight_id(resource): \"\"\"returns a string value with 'system, value' for the insight id.\"\"\" expr_str = ( f\"extension('{summary_ext_url}').where(\" f\" extension('{category_ext_url}').value.coding.code = 'natural-language-processing'\" f\")\" f\".extension('{insight_id_ext_url}').value.select(system + ',' + value)\" ) insights = evaluate_fhir_path(resource, expr_str) return insights if insights else np.NaN Construct Data Frame This dataframe contains rows for derived resources. The insight identifier's system and value are included as columns. We'll use this information to reteive the evidence for the insight that caused the resource to be derived. In addition, the acd in the identifier's system URI tells us that these resources were derived using ACD. resources_df[\"text\"] = resources_df.loc[:, \"resource_json\"].apply(get_code_text) resources_df[\"derived_by_insight\"] = resources_df.loc[:, \"resource_json\"].apply( get_derived_resource_insight_id ) resources_df = resources_df.explode(\"derived_by_insight\") resources_df[[\"insight_id_system\", \"insight_id_value\"]] = resources_df[ \"derived_by_insight\" ].str.split(\",\", expand=True) resources_df = resources_df.drop(labels=[\"derived_by_insight\"], axis=\"columns\") resources_df.dropna(subset=[\"insight_id_system\"], inplace=True) print_df( resources_df.loc[ :, [ \"resource_id\", \"resource_type\", \"text\", \"insight_id_system\", \"insight_id_value\", ], ] ) resource_id resource_type text insight_id_system insight_id_value 3 17e9d5ddf76-2a1b470e-3808-442d-a1af-857b7532b740 MedicationStatement Losartan urn:alvearie.io/health_patterns/services/nlp_insights/acd 2c3514d1168072dcf3bb4a5992c76e7c37e6d7ea98cac9c169d29d12 6 17e9d5ddf76-f5a481e8-1c92-4179-bb4d-2c668cc9bd66 Condition myocardial infarction urn:alvearie.io/health_patterns/services/nlp_insights/acd dc5541f39215bb39dd3619539d2655e172978ce61da98b0fa2206fe9 Retrieve source text that was used to derive resources In this section, we will use the insight extension in the meta of the Resource to determine what was used to derive the resource. Function to Retrieve Reference and Path This function evaluates a FHIRPath expression to retrieve the resource containing the text that was used to derive this resource, and the path to that text. This information can be used to load the source text. These are refered to as the \"reference\" and \"reference path\" in alvearie. def get_derived_from(resource, insight_id_system, insight_id_value): \"\"\"Returns reference;path (separated by a semicolon)\"\"\" # Reference and path are in the insight detail extension of the insight # that we are interested in expr_str = ( f\"meta\" f\".extension('{insight_ext_url}').where(\" f\" extension('{insight_id_ext_url}').value.where(\" f\" system = '{insight_id_system}' and \" f\" value = '{insight_id_value}'\" f\" ).exists()\" f\")\" f\".extension('{insight_detail_ext}')\" f\".select(\" f\" extension('{insight_reference_ext}').value.reference + ';' \" f\" + extension('{insight_reference_path}').value \" f\")\" ) return evaluate_fhir_path(resource, expr_str) Construct Data Frame This builds a dataframe for each resource and includes the resource and path that the insight was derived from. resources_df[\"from\"] = resources_df.apply( lambda row: get_derived_from( row[\"resource_json\"], row[\"insight_id_system\"], row[\"insight_id_value\"] ), axis=1, ) resources_df = resources_df.explode(\"from\") resources_df[[\"derived_from_resource\", \"derived_from_path\"]] = resources_df[ \"from\" ].str.split(\";\", expand=True) resources_df.drop(labels=[\"from\"], axis=\"columns\", inplace=True) print_df( resources_df.loc[ :, [ \"resource_id\", \"resource_type\", \"text\", \"derived_from_resource\", \"derived_from_path\", ], ] ) resource_id resource_type text derived_from_resource derived_from_path 3 17e9d5ddf76-2a1b470e-3808-442d-a1af-857b7532b740 MedicationStatement Losartan DiagnosticReport/17e9d5ddf75-b3eb69d7-fd03-4caf-8fe6-d8e4f2a73b2c DiagnosticReport.presentedForm[0].data 6 17e9d5ddf76-f5a481e8-1c92-4179-bb4d-2c668cc9bd66 Condition myocardial infarction DiagnosticReport/17e9d5ddf75-b3eb69d7-fd03-4caf-8fe6-d8e4f2a73b2c DiagnosticReport.presentedForm[0].data Retrieve source text In this example, both resources were derived from the same source text in the diagnostic report. The source resource can be easily retrieved from the FHIR server, and the path expression evaluated to get the text. source_resource, source_path = ( resources_df.loc[:, [\"derived_from_resource\", \"derived_from_path\"]] .drop_duplicates() .iloc[0] ) def get_source_text(resource_loc, text_path): \"\"\"Retrieve the resource from the FHIR server and resolve the path to the text\"\"\" source_resource_fhir = requests.get( f\"{fhir_server}/{resource_loc}\", headers={\"Accept\": \"application/fhir+json\"}, verify=False, ) source_resource_fhir.raise_for_status() return evaluate_fhir_path(source_resource_fhir.text, source_path)[0] get_source_text(source_resource, source_path) 'The patient had a myocardial infarction in 2015 and was prescribed Losartan.The patient is taking Losartan exactly as prescribed and has had no side effects.' Retrieve spans Clinical notes are usually longer than a few sentences. It is helpful to know which words and phrases in the text caused an insight to be derived. This section shows how to retrieve the spans associated with the insight for a derived resource. Function to retrieve spans This function retrieves spans for a specific reference & path within an insight. The spans are returned as a list of (start-offset, end-offset) string values. def get_spans(resource, insight_id_system, insight_id_value, reference, path): # spans are within # -> Insight (must match expected system and id) # -> insight detail (must match reference & path) # -> insight result # -> span (may repeat) expr_str = ( f\"meta\" f\".extension('{insight_ext_url}').where(\" f\" extension('{insight_id_ext_url}').value.where(\" f\" system = '{insight_id_system}' and value = '{insight_id_value}'\" f\" ).exists()\" f\" )\" f\".extension('{insight_detail_ext}').where(\" f\" extension('{insight_reference_ext}').value.reference = '{reference}' and \" f\" extension('{insight_reference_path}').value = '{path}'\" f\")\" f\".extension('{insight_result_ext}')\" f\".extension('{insight_span_ext}')\" f\".select(\" f\" extension('{insight_offset_begin_ext}').value.toString() + ',' +\" f\" extension('{insight_offset_end_ext}').value.toString() \" f\" )\" ) return evaluate_fhir_path(resource, expr_str) Construct Data Frame There will be multiple rows for some insights/resources in this data frame, because there are mutliple spans that caused the resource to be derived. resources_df[\"spans\"] = resources_df.apply( lambda row: get_spans( row[\"resource_json\"], row[\"insight_id_system\"], row[\"insight_id_value\"], row[\"derived_from_resource\"], row[\"derived_from_path\"], ), axis=1, ) resources_df = resources_df.explode(\"spans\") resources_df[[\"span_begin\", \"span_end\"]] = resources_df[\"spans\"].str.split( \",\", expand=True ) resources_df.drop(labels=[\"spans\"], axis=\"columns\", inplace=True) resources_df.loc[ :, [ \"resource_id\", \"resource_type\", \"text\", \"derived_from_resource\", \"derived_from_path\", \"span_begin\", \"span_end\", ], ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } resource_id resource_type text derived_from_resource derived_from_path span_begin span_end 3 17e9d5ddf76-2a1b470e-3808-442d-a1af-857b7532b740 MedicationStatement Losartan DiagnosticReport/17e9d5ddf75-b3eb69d7-fd03-4caf-8fe6-d8e4f2a73b2c DiagnosticReport.presentedForm[0].data 67 75 3 17e9d5ddf76-2a1b470e-3808-442d-a1af-857b7532b740 MedicationStatement Losartan DiagnosticReport/17e9d5ddf75-b3eb69d7-fd03-4caf-8fe6-d8e4f2a73b2c DiagnosticReport.presentedForm[0].data 98 106 6 17e9d5ddf76-f5a481e8-1c92-4179-bb4d-2c668cc9bd66 Condition myocardial infarction DiagnosticReport/17e9d5ddf75-b3eb69d7-fd03-4caf-8fe6-d8e4f2a73b2c DiagnosticReport.presentedForm[0].data 18 39 Display source text with spans highlighted Once the previous dataframe has been created, it's not hard to group by the source resource and path, and display the text from that location the spans highlighted. In this example, the spans related to medication statements are in bold, and spans related to conditions are in italics. This type of processing is important for an application that needs to present the information that was derived from some text to a user. def group_of_spans_to_html(group_rows): \"\"\"Custom aggregate of the a data frame with \"resource_type\", \"span_begin\" and \"span_end\" columns. The group name is a tuple of (derived_resource_location, derived_from_text_path) \"\"\" source_text = get_source_text(group_rows.name[0], group_rows.name[1]) markup_points = [] # Points is a series of (resource_type, begin or end, offset) tuples # sorted in offset ascending order points = ( resources_df.apply( lambda row: [ (row[\"resource_type\"], \"begin\", int(row[\"span_begin\"])), (row[\"resource_type\"], \"end\", int(row[\"span_end\"])), ], axis=1, ) .explode() .sort_values(key=lambda series: [e[2] for e in series], ascending=True) ) # tags is used to to figure out what type of HTML to insert at a given point tags = { \"Condition\": {\"begin\": '<I><span style=\"color: green\">', \"end\": \"</span></I>\"}, \"MedicationStatement\": { \"begin\": '<B><span style=\"color: blue\">', \"end\": \"</span></B>\", }, } # build the result string result = [] cur_end = 0 for pt in points: result.append(source_text[cur_end : pt[2]]) result.append(tags[pt[0]][pt[1]]) cur_end = pt[2] result.append(source_text[cur_end:]) return \"\".join(result) sources = resources_df.groupby(by=[\"derived_from_resource\", \"derived_from_path\"]).apply( group_of_spans_to_html ) sources = sources.to_frame().reset_index().rename(columns={0: \"text\"}) display(HTML(pd.DataFrame(sources).to_html(escape=False))) derived_from_resource derived_from_path text 0 DiagnosticReport/17e9d5ddf75-b3eb69d7-fd03-4caf-8fe6-d8e4f2a73b2c DiagnosticReport.presentedForm[0].data The patient had a myocardial infarction in 2015 and was prescribed Losartan .The patient is taking Losartan exactly as prescribed and has had no side effects. Retrieve Evidence for enriched resources When nlp-insights derives an additional code for a resource's codings, it adds a summary extension to the code element. We'll use this extension to find the derived codes, and the evidence for those codes # reset datafram to all resources for the patient resources_df = original_resources_df resources_df[\"text\"] = resources_df.loc[:, \"resource_json\"].apply(get_code_text) Define a function to retrieve codes This FHIRPath expression returns all the codes on a resource, derived or not. The result is a list of \"system,code\" strings. def get_all_codes(resource): # returns system,code for code expr_str = f\"Condition.code.coding.select(system + ',' + code) | AllergyIntolerance.code.coding.select(system + ',' + code)\" return evaluate_fhir_path(resource, expr_str) Define a function to retrieve the summary extension for a code This uses a FHIRPath expression to look for the insight summary extension on a code, and retrieve a string \"insight-id-system,insight-id-value\" def get_summary_extension_for_code(resource, code_system, code_value): expr_str = ( f\"(Condition | AllergyIntolerance).code.coding.where(\" f\" system = '{code_system}' and code = '{code_value}'\" f\")\" f\".extension('{summary_ext_url}').where(\" f\" extension('{category_ext_url}').value.coding.code = 'natural-language-processing'\" f\" )\" f\".extension('{insight_id_ext_url}').value.select(system + ',' + value)\" ) return evaluate_fhir_path(resource, expr_str) Construct a data frame of Derived codes This code constructs a dataframe that contains columns with the insight id system and insight id value...we can use this information to determine where the code was derived from. The acd in the insight id system tells us that ACD was used to derive the code. # Dataframe for All codes resources_df[\"code\"] = resources_df.apply( lambda row: get_all_codes(row[\"resource_json\"]), axis=1 ) resources_df = resources_df.explode(\"code\") resources_df.dropna(subset=[\"code\"], inplace=True) resources_df[[\"code_system\", \"code_value\"]] = resources_df[\"code\"].str.split( \",\", expand=True ) resources_df.drop(labels=[\"code\"], axis=\"columns\", inplace=True) # Filter to only include codes with associated insights resources_df[\"summary\"] = resources_df.apply( lambda row: get_summary_extension_for_code( row[\"resource_json\"], row[\"code_system\"], row[\"code_value\"] ), axis=1, ) resources_df = resources_df.explode(\"summary\") resources_df.dropna(subset=[\"summary\"], inplace=True) resources_df[[\"insight_id_system\", \"insight_id_value\"]] = resources_df[ \"summary\" ].str.split(\",\", expand=True) resources_df.loc[ :, [ \"resource_id\", \"resource_type\", \"text\", \"code_system\", \"code_value\", \"insight_id_system\", \"insight_id_value\", ], ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } resource_id resource_type text code_system code_value insight_id_system insight_id_value 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://terminology.hl7.org/CodeSystem/umls C0559470 urn:alvearie.io/health_patterns/services/nlp_insights/acd 31d8f5eaf30190bba2cab9a18c95306901c197f3e14a6fc68f9dc276 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://snomed.info/sct 91935009 urn:alvearie.io/health_patterns/services/nlp_insights/acd 31d8f5eaf30190bba2cab9a18c95306901c197f3e14a6fc68f9dc276 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-9-cm 995.3 urn:alvearie.io/health_patterns/services/nlp_insights/acd 31d8f5eaf30190bba2cab9a18c95306901c197f3e14a6fc68f9dc276 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-10-cm Z91.010 urn:alvearie.io/health_patterns/services/nlp_insights/acd 31d8f5eaf30190bba2cab9a18c95306901c197f3e14a6fc68f9dc276 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-10-cm Z91.0 urn:alvearie.io/health_patterns/services/nlp_insights/acd 31d8f5eaf30190bba2cab9a18c95306901c197f3e14a6fc68f9dc276 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://terminology.hl7.org/CodeSystem/umls C0571417 urn:alvearie.io/health_patterns/services/nlp_insights/acd 6134e9e926a775975004b69d42e225f467b50690aa4992d98922715e 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://snomed.info/sct 294505008 urn:alvearie.io/health_patterns/services/nlp_insights/acd 6134e9e926a775975004b69d42e225f467b50690aa4992d98922715e 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-9-cm E930.0 urn:alvearie.io/health_patterns/services/nlp_insights/acd 6134e9e926a775975004b69d42e225f467b50690aa4992d98922715e 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-9-cm 995.27 urn:alvearie.io/health_patterns/services/nlp_insights/acd 6134e9e926a775975004b69d42e225f467b50690aa4992d98922715e 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-10-cm Z88.0 urn:alvearie.io/health_patterns/services/nlp_insights/acd 6134e9e926a775975004b69d42e225f467b50690aa4992d98922715e 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://terminology.hl7.org/CodeSystem/umls C0011849 urn:alvearie.io/health_patterns/services/nlp_insights/acd ba6da20b9ef2b1b4ed2eb1b064fb96a00126b1aacc8e9a5519df1050 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://snomed.info/sct 73211009 urn:alvearie.io/health_patterns/services/nlp_insights/acd ba6da20b9ef2b1b4ed2eb1b064fb96a00126b1aacc8e9a5519df1050 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://hl7.org/fhir/sid/icd-9-cm 250.00 urn:alvearie.io/health_patterns/services/nlp_insights/acd ba6da20b9ef2b1b4ed2eb1b064fb96a00126b1aacc8e9a5519df1050 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://hl7.org/fhir/sid/icd-10-cm E14.9 urn:alvearie.io/health_patterns/services/nlp_insights/acd ba6da20b9ef2b1b4ed2eb1b064fb96a00126b1aacc8e9a5519df1050 Determine how the code was derived The insight extension in the meta contains the information about where the code was derived from. In the case of enrichment, this information is pretty simple. The code is always derived from the text associated with the enclosing code structure. The reference resource is always the same resource as the one being enriched. However these facts are explicitly stated in the insight extension. We can verify this with the get_derived_from method that we created earlier for the derived resources example. Construct a Data Frame with reference resource and path resources_df[\"from\"] = resources_df.apply( lambda row: get_derived_from( row[\"resource_json\"], row[\"insight_id_system\"], row[\"insight_id_value\"] ), axis=1, ) resources_df = resources_df.explode(\"from\") resources_df[[\"derived_from_resource\", \"derived_from_path\"]] = resources_df[ \"from\" ].str.split(\";\", expand=True) resources_df.drop(labels=[\"from\"], axis=\"columns\", inplace=True) resources_df.loc[ :, [ \"resource_id\", \"resource_type\", \"text\", \"code_system\", \"code_value\", \"derived_from_resource\", \"derived_from_path\", ], ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } resource_id resource_type text code_system code_value derived_from_resource derived_from_path 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://terminology.hl7.org/CodeSystem/umls C0559470 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://snomed.info/sct 91935009 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-9-cm 995.3 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-10-cm Z91.010 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-10-cm Z91.0 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://terminology.hl7.org/CodeSystem/umls C0571417 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://snomed.info/sct 294505008 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-9-cm E930.0 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-9-cm 995.27 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-10-cm Z88.0 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://terminology.hl7.org/CodeSystem/umls C0011849 Condition/17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition.code.text 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://snomed.info/sct 73211009 Condition/17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition.code.text 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://hl7.org/fhir/sid/icd-9-cm 250.00 Condition/17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition.code.text 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://hl7.org/fhir/sid/icd-10-cm E14.9 Condition/17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition.code.text Retrieve source text We can use the path from the previous data frame to retrieve the source text. While we could use the source resource's id to retrieve the source resource from the FHIR server, we know that this is always going to be the same resource as the enriched one, so for simplicity and performance we won't retrieve the resource (although we could if we wanted to). Finding the source text is then a simple matter of evaluating the derived_from_path in the previous data frame against the enriched resource. resources_df[\"source_text\"] = resources_df.apply( lambda row: evaluate_fhir_path(row[\"resource_json\"], row[\"derived_from_path\"]), axis=1, ) resources_df = resources_df.explode(\"source_text\") resources_df.loc[ :, [ \"resource_id\", \"resource_type\", \"text\", \"code_system\", \"code_value\", \"derived_from_resource\", \"derived_from_path\", \"source_text\", ], ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } resource_id resource_type text code_system code_value derived_from_resource derived_from_path source_text 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://terminology.hl7.org/CodeSystem/umls C0559470 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text peanut 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://snomed.info/sct 91935009 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text peanut 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-9-cm 995.3 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text peanut 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-10-cm Z91.010 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text peanut 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-10-cm Z91.0 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text peanut 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://terminology.hl7.org/CodeSystem/umls C0571417 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text amoxicillin 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://snomed.info/sct 294505008 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text amoxicillin 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-9-cm E930.0 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text amoxicillin 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-9-cm 995.27 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text amoxicillin 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-10-cm Z88.0 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text amoxicillin 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://terminology.hl7.org/CodeSystem/umls C0011849 Condition/17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition.code.text diabetes 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://snomed.info/sct 73211009 Condition/17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition.code.text diabetes 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://hl7.org/fhir/sid/icd-9-cm 250.00 Condition/17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition.code.text diabetes 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://hl7.org/fhir/sid/icd-10-cm E14.9 Condition/17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition.code.text diabetes Spans For enrichment, there are no span extensions stored in the insight detail extensions. That's because the entire text is used for the insight, along with the context of the text. (For example 'peanut' in an AllergyIntolerance should result in peanut allergy codes, not a code for a plant or food.) These text fragments contain only information related to the derived codes and the context is defined by the resource. As a result span and confidence values are not interesting. Summary In this tutorial we: Created a bundle Enriched the bundle using the nlp-insights service Posted the resources to a FHIR Server Retrieved resources derived by NLP and determined what caused them to be derived Retrieved derived codes for enriched resources and determined what caused them to be derived","title":"FHIR Server Integration"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#integration-of-nlp-insights-with-a-fhir-server","text":"Although nlp-insights can be used as a standalone service, the primary intent of the service is to use it to enhance a bundle or resources, prior to posting those resources to a FHIR server. This notebook contains a demonstration of posting enriched resources to a FHIR server, and retrieving enriched insights and evidence for the insight.","title":"Integration of nlp-insights with a FHIR Server"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#setup","text":"This notebook was created with jupyter-lab 3.1.11 and python 3.9.6. Using a virtual envirnoment is recommended. Python source code is formatted with Black .","title":"Setup"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#start-and-configure-the-nlp-insights-service","text":"The examples have been written with the assumption that ACD is configured as the NLP backend for the nlp-insight service. You need to start and confgure the nlp-insights service. Configuring the server to use QuickUMLS is also an option, although the discovered insights will differ.","title":"Start and configure the nlp-insights service"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#start-a-local-fhir-server","text":"Although health patterns defines a much more sophisticated architecture for ingestion pipelines, these examples use the IBM FHIR server running locally in a container. This keeps things simple, and allows us to focus on the value of the nlp-insights server. The server can be started locally by running the command: docker run -p 9443:9443 -e BOOTSTRAP_DB=true ibmcom/ibm-fhir-server","title":"Start a local FHIR server"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#load-fhirpath-jars","text":"FHIRPath is an HL7 standard for navigating and extracting parts of FHIR resources. These examples evaluate FHIRPath expressions by utilizing Java code built for the IBM FHIR Server. The advantage to using FHIRPath is that the FHIRPath language is aware of features specific to FHIR resources, which makes the queries simpiler in many cases. The python interface provided in this notebook does not provide full functionality, but it is complete enough for the examples. You need to download the jars from maven centeral, and store them in the local directory indicated by FHIR_PATH_JARS (defined in a future cell). These are steps to do that (You may need to install Apache Maven 3.5.4 or newer): * Download the pom for the project curl https://repo1.maven.org/maven2/com/ibm/fhir/fhir-path/4.10.2/fhir-path-4.10.2.pom > pom.xml * Download the jars mvn -DoutputDirectory=. -Dartifact=\"com.ibm.fhir:fhir-path:4.10.0\" dependency:copy dependency:copy-dependencies","title":"Load FHIRPath Jars"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#third-party-libraries","text":"The examples depend on a few other libraries to make processing easier. jpype1 is used to call Java code when evaluating FHIRPath expressions. !pip install --upgrade pip !pip install pandas==1.3.5 !pip install fhir.resources==6.1.0 !pip install jpype1==1.3.0 Requirement already satisfied: pip in ./nlp-insights/lib/python3.9/site-packages (21.3.1) Requirement already satisfied: pandas==1.3.5 in ./nlp-insights/lib/python3.9/site-packages (1.3.5) Requirement already satisfied: pytz>=2017.3 in ./nlp-insights/lib/python3.9/site-packages (from pandas==1.3.5) (2021.3) Requirement already satisfied: numpy>=1.17.3 in ./nlp-insights/lib/python3.9/site-packages (from pandas==1.3.5) (1.22.0) Requirement already satisfied: python-dateutil>=2.7.3 in ./nlp-insights/lib/python3.9/site-packages (from pandas==1.3.5) (2.8.2) Requirement already satisfied: six>=1.5 in ./nlp-insights/lib/python3.9/site-packages (from python-dateutil>=2.7.3->pandas==1.3.5) (1.16.0) Requirement already satisfied: fhir.resources==6.1.0 in ./nlp-insights/lib/python3.9/site-packages (6.1.0) Requirement already satisfied: pydantic[email]>=1.7.2 in ./nlp-insights/lib/python3.9/site-packages (from fhir.resources==6.1.0) (1.9.0) Requirement already satisfied: typing-extensions>=3.7.4.3 in ./nlp-insights/lib/python3.9/site-packages (from pydantic[email]>=1.7.2->fhir.resources==6.1.0) (4.0.1) Requirement already satisfied: email-validator>=1.0.3 in ./nlp-insights/lib/python3.9/site-packages (from pydantic[email]>=1.7.2->fhir.resources==6.1.0) (1.1.3) Requirement already satisfied: dnspython>=1.15.0 in ./nlp-insights/lib/python3.9/site-packages (from email-validator>=1.0.3->pydantic[email]>=1.7.2->fhir.resources==6.1.0) (2.1.0) Requirement already satisfied: idna>=2.0.0 in ./nlp-insights/lib/python3.9/site-packages (from email-validator>=1.0.3->pydantic[email]>=1.7.2->fhir.resources==6.1.0) (3.3) Requirement already satisfied: jpype1==1.3.0 in ./nlp-insights/lib/python3.9/site-packages (1.3.0) import requests import base64 import json import urllib3 import os import base64 import pandas as pd import numpy as np pd.set_option(\"display.max_colwidth\", None)","title":"Third party libraries"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#wrapper-code-to-evaluate-fhirpath-expression","text":"This code is used to call into the Java FHIRPath evaluation code. The details of how it works are outside the scope of nlp-insights examples. If you need more details jpype is well documented and the Java code and documentation is available here . This seemed to be the easiest way to evaluate an expression from Python, although not all expressions are supported. If you would like to try a different implementation of FHIRPath, there are a few listed on the HL7 wiki . ### # CHANGE THIS TO THE DIRECTORY WHERE YOU DOWNLOADED THE FHIRPath JARS!!!!! ### FHIR_PATH_JARS = \"/home/ntl/fhir/fhir-path/*\" import jpype import jpype.imports from jpype.types import * print(f\"looking for FHIRPath jars in {FHIR_PATH_JARS}\") if not jpype.isJVMStarted(): jpype.startJVM(classpath=[FHIR_PATH_JARS]) looking for FHIRPath jars in /home/ntl/fhir/fhir-path/* from java.io import ByteArrayInputStream import java.util.Collection import java.lang.String import java.lang.Integer import java.math.BigDecimal from com.ibm.fhir.path.evaluator import FHIRPathEvaluator from com.ibm.fhir.model.parser import FHIRParser from com.ibm.fhir.model.format import Format import com.ibm.fhir.path.FHIRPathElementNode import com.ibm.fhir.path.FHIRPathResourceNode import com.ibm.fhir.path.exception.FHIRPathException as FHIRPathException from json import JSONDecodeError def convert_obj(java_obj): \"\"\"Converts a FHIRPath Java Object to a python object\"\"\" if java_obj is None: return None if isinstance(java_obj, com.ibm.fhir.path.FHIRPathResourceNode): return str(java_obj.resource().toString()) if isinstance(java_obj, com.ibm.fhir.path.FHIRPathElementNode): node = java_obj.element() if node.hasValue(): node = node.getValue() if isinstance(node, java.lang.String): return str(node) if isinstance(node, java.lang.Integer): return int(node) if isinstance(node, java.math.BigDecimal): return int(node) if isinstance(node, JArray): return str(node) try: return json.loads(str(node.toString())) except JSONDecodeError: return str(node.toString()) elif isinstance(java_obj, java.util.Collection): return [convert_obj(obj) for obj in java_obj] else: try: return json.loads(str(java_obj.toString())) except JSONDecodeError: return str(java_obj.toString()) raise IllegalArgumentError(str((type(node), str(node)))) def evaluate_fhir_path(json_str, expr_str): \"\"\"Evaluates an expression agains a FHIR Resource Args: json_str - FHIR resource as a json string expr_str - FHIRPath expression to evaluate Returns: Results of the evaluation, usually a list of String values. May return None if no results were found \"\"\" resource = FHIRParser.parser(Format.JSON).parse( ByteArrayInputStream(json_str.encode(\"utf-8\")) ) try: nodes = FHIRPathEvaluator.evaluator().evaluate(resource, expr_str) except FHIRPathException as ex: raise RuntimeError(str(ex) + \"\\nWith expression:\\n\" + expr_str) return convert_obj(nodes)","title":"Wrapper code to Evaluate FHIRPath expression"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#local-server-urls-and-ports","text":"# We can be trusting of certificates for a local container urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning) fhir_server = \"https://fhiruser:change-password@localhost:9443/fhir-server/api/v4\" nlp_insights_server = \"http://localhost:5000\"","title":"Local Server URLs and Ports"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#health-checks","text":"fhir_health_check = requests.get(f\"{fhir_server}/$healthcheck\", verify=False) fhir_health_check.raise_for_status() insights_health_check = requests.get(f\"{nlp_insights_server}/config\") insights_health_check.raise_for_status()","title":"Health Checks"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#post-bundle-with-insights-into-fhir-server","text":"The input bundle is in a json file that can be viewed here . The bundle is loaded, sent to the nlp-insights service for enrichment, and then posted to the FHIR server.","title":"POST Bundle with insights into FHIR Server"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#load-bundle-without-insights","text":"with open(\"./input_bundle.json\", \"r\") as f: bundle_json = json.load(f)","title":"Load Bundle (without insights)"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#input-bundle-summary","text":"We can get a rough idea of what is our input bundle using json_normalize to build a data frame. Using dataframes will make it easier to view the insights. Deeply nested JSON documents that represent FHIR resources are hard to look at; rows and columns are more familiar for human readers. Another reason for using rows and columns is that Ground Truth, or the insights that humans expect to be discovered, is often stored as rows and columns. The nlp-insights service does not include ground truth, nor is accuracy discussed in the documentation or tutorials - but accuracy must be measured for real use cases. Working with rows and columns here makes it easier to transition to other these types of analysis. Using the data frame, it's easy to see which resources and text are in the initial bundle. Also be aware that there are no code values for in the Condition and AllergyIntolerance resources. df = pd.json_normalize(bundle_json, record_path=[\"entry\"]) df[\"report_text\"] = df[\"resource.presentedForm\"].apply( lambda f: base64.b64decode(f[0][\"data\"]).decode(\"utf-8\") if not pd.isnull(f) else np.NaN ) # assert that columns for codes do not exist assert \"resource.medicationCodeableConcept.coding\" not in df.columns assert \"resource.code.coding\" not in df.columns # print resource types and code text df.loc[:, [\"resource.resourceType\", \"resource.code.text\", \"report_text\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } resource.resourceType resource.code.text report_text 0 Patient NaN NaN 1 DiagnosticReport Chief complaint Narrative - Reported The patient had a myocardial infarction in 2015 and was prescribed Losartan.The patient is taking Losartan exactly as prescribed and has had no side effects. 2 Condition diabetes NaN 3 AllergyIntolerance peanut NaN 4 AllergyIntolerance amoxicillin NaN","title":"Input bundle Summary"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#discover-insights","text":"The nlp-insights service is used to discover insights. nlp_insights_response = requests.post( f\"http://localhost:5000/discoverInsights\", headers={\"Content-Type\": \"application/fhir+json\"}, json=bundle_json, ) nlp_insights_response.raise_for_status() enriched_bundle_json = json.loads(nlp_insights_response.text)","title":"Discover insights"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#enriched-bundle-summary","text":"A quick summary of the updated bundle that was returned from the nlp-insights service verifies that a few new resources have been derived, and the prior condition and AllergyIntolerance resources have been enriched with additional codes. df = pd.json_normalize(enriched_bundle_json, record_path=[\"entry\"]) df[\"report_text\"] = df[\"resource.presentedForm\"].apply( lambda f: base64.b64decode(f[0][\"data\"]).decode(\"utf-8\") if not pd.isnull(f) else np.NaN ) df.loc[df[\"resource.resourceType\"] != \"MedicationStatement\", \"codes\"] = df.loc[ df[\"resource.resourceType\"] != \"MedicationStatement\", \"resource.code.coding\" ].apply( lambda codes: [(code[\"system\"], code[\"code\"]) for code in codes] if isinstance(codes, list) else np.NaN ) df.loc[df[\"resource.resourceType\"] == \"MedicationStatement\", \"codes\"] = df.loc[ df[\"resource.resourceType\"] == \"MedicationStatement\", \"resource.medicationCodeableConcept.coding\", ].apply( lambda codes: [(code[\"system\"], code[\"code\"]) for code in codes] if isinstance(codes, list) else np.NaN ) df[\"code_text\"] = df.loc[:, \"resource.code.text\"].combine_first( df.loc[:, \"resource.medicationCodeableConcept.text\"] ) df.loc[ :, [ \"resource.resourceType\", \"code_text\", \"codes\", ], ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } resource.resourceType code_text codes 0 Patient NaN NaN 1 DiagnosticReport Chief complaint Narrative - Reported NaN 2 Condition diabetes [(http://terminology.hl7.org/CodeSystem/umls, C0011849), (http://snomed.info/sct, 73211009), (http://hl7.org/fhir/sid/icd-9-cm, 250.00), (http://hl7.org/fhir/sid/icd-10-cm, E14.9)] 3 AllergyIntolerance peanut [(http://terminology.hl7.org/CodeSystem/umls, C0559470), (http://snomed.info/sct, 91935009), (http://hl7.org/fhir/sid/icd-9-cm, 995.3), (http://hl7.org/fhir/sid/icd-10-cm, Z91.010), (http://hl7.org/fhir/sid/icd-10-cm, Z91.0)] 4 AllergyIntolerance amoxicillin [(http://terminology.hl7.org/CodeSystem/umls, C0571417), (http://snomed.info/sct, 294505008), (http://hl7.org/fhir/sid/icd-9-cm, E930.0), (http://hl7.org/fhir/sid/icd-9-cm, 995.27), (http://hl7.org/fhir/sid/icd-10-cm, Z88.0)] 5 Condition myocardial infarction [(http://terminology.hl7.org/CodeSystem/umls, C0027051), (http://snomed.info/sct, 22298006), (http://hl7.org/fhir/sid/icd-9-cm, 410.90), (http://hl7.org/fhir/sid/icd-10-cm, I21.9)] 6 MedicationStatement Losartan [(http://terminology.hl7.org/CodeSystem/umls, C0126174), (http://www.nlm.nih.gov/research/umls/rxnorm, 52175)]","title":"Enriched Bundle Summary"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#post-resources-with-insights-to-the-fhir-server","text":"Posting the updated bundle creates the resources on the FHIR server. This also assigns identifier values to the resources. We will retrieve the patient location from the response, so that we can retrieve the resources from the server. fhir_server_response = requests.post( f\"{fhir_server}/\", headers={\"Content-Type\": \"application/fhir+json\"}, json=enriched_bundle_json, verify=False, ) fhir_server_response.raise_for_status() patient_loc = evaluate_fhir_path( fhir_server_response.text, \"Bundle.entry.response.location.where(startsWith('Patient')).getValue()\", )[0] print(f\"The patient's location in the FHIR Server is: {patient_loc}\") The patient's location in the FHIR Server is: Patient/17e9d5ddf75-824e1c98-1484-4079-8330-63141202c23b/_history/1","title":"Post resources with insights to the FHIR server"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#search-for-all-the-patients-resources","text":"In the real world, there will be many resources. The sever may respond with a page at a time, and we might be interested in only a subset of resources. For this example, we'll retrieve everything for the patient; the number of resources is small enough that paging and performance cost is not a consideration. all_resources_response = requests.get( f\"{fhir_server}/{patient_loc}/$everything\", headers={\"Accept\": \"application/fhir+json\"}, verify=False, ) all_resources_response.raise_for_status()","title":"Search for all the patient's resources"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#convert-the-search-bundle-into-a-dataframe","text":"The bundle is split into rows, where each row represents a resource in the bundle. from fhir.resources.bundle import Bundle resources_df = pd.DataFrame( [ { \"resource_id\": entry.resource.id, \"resource_type\": type(entry.resource).__name__, \"resource_json\": entry.resource.json(), } for entry in Bundle.parse_raw(all_resources_response.text).entry ] ) pd.set_option(\"display.max_colwidth\", 75) display(resources_df) pd.set_option(\"display.max_colwidth\", None) original_resources_df = resources_df # save for later .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } resource_id resource_type resource_json 0 17e9d5ddf75-824e1c98-1484-4079-8330-63141202c23b Patient {\"id\": \"17e9d5ddf75-824e1c98-1484-4079-8330-63141202c23b\", \"meta\": {\"la... 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance {\"id\": \"17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720\", \"meta\": {\"ex... 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance {\"id\": \"17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be\", \"meta\": {\"ex... 3 17e9d5ddf76-2a1b470e-3808-442d-a1af-857b7532b740 MedicationStatement {\"id\": \"17e9d5ddf76-2a1b470e-3808-442d-a1af-857b7532b740\", \"meta\": {\"ex... 4 17e9d5ddf75-b3eb69d7-fd03-4caf-8fe6-d8e4f2a73b2c DiagnosticReport {\"id\": \"17e9d5ddf75-b3eb69d7-fd03-4caf-8fe6-d8e4f2a73b2c\", \"meta\": {\"la... 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition {\"id\": \"17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119\", \"meta\": {\"ex... 6 17e9d5ddf76-f5a481e8-1c92-4179-bb4d-2c668cc9bd66 Condition {\"id\": \"17e9d5ddf76-f5a481e8-1c92-4179-bb4d-2c668cc9bd66\", \"meta\": {\"ex...","title":"Convert the search bundle into a DataFrame"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#retrieve-evidence-for-derived-resources","text":"This section describes how to identify derived resources, and how to determine what information was used to derive the resource.","title":"Retrieve Evidence for Derived Resources"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#extension-urls","text":"All insight related data is stored in FHIR extensions. These extensions are defined in the Alvearie Implementation Guide . The type of extension is defined by the URL for the extension. summary_ext_url = \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" category_ext_url = \"http://ibm.com/fhir/cdm/StructureDefinition/category\" insight_id_ext_url = \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\" insight_ext_url = \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" insight_detail_ext = \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" insight_reference_ext = \"http://ibm.com/fhir/cdm/StructureDefinition/reference\" insight_reference_path = \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\" insight_result_ext = \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" insight_span_ext = \"http://ibm.com/fhir/cdm/StructureDefinition/span\" insight_offset_begin_ext = \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\" insight_offset_end_ext = \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\"","title":"Extension URLs"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#function-to-pretty-print-a-data-frame","text":"Some dataframes have muliple lines of text in a column. This function prints those nicer for human readers. from IPython.display import display, HTML def print_df(df): \"\"\"This function prints a dataframe that has newline characters in a column a little nicer in a notebook\"\"\" # https://stackoverflow.com/questions/50644066/pandas-dataframe-and-multi-line-values return display(HTML(df.to_html().replace(\"\\\\n\", \"<br>\")))","title":"Function to pretty print a data frame"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#function-to-get-the-code-text","text":"This function evaluates a FHIRPath expression against a resource to return the text associated with the code. We use this to provide a quick idea of what this resource is about. def get_code_text(resource) -> str: if txt := evaluate_fhir_path( resource, \"Condition.code.text | \" \"AllergyIntolerance.code.text | \" \"MedicationStatement.medication.text\", ): return txt[0] return np.NaN","title":"Function to get the code text"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#retrieve-derived-resources","text":"When nlp-insights creates a derived resource, it adds an insight summary extension to the resource. The summary extension contains the insight id for the insight that created the resource. We need this ID to locate the details of the insight (The details are stored in the resource's meta element). The insight identifier's system and value will be used together to uniquely identify the insight.","title":"Retrieve Derived Resources"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#function-retrieve-insight-identifier-from-summary-extension","text":"This function evaluates a FHIRPath exrpression to compute the insight id's system and value in the summary extension. def get_derived_resource_insight_id(resource): \"\"\"returns a string value with 'system, value' for the insight id.\"\"\" expr_str = ( f\"extension('{summary_ext_url}').where(\" f\" extension('{category_ext_url}').value.coding.code = 'natural-language-processing'\" f\")\" f\".extension('{insight_id_ext_url}').value.select(system + ',' + value)\" ) insights = evaluate_fhir_path(resource, expr_str) return insights if insights else np.NaN","title":"Function Retrieve Insight Identifier from summary extension"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#construct-data-frame","text":"This dataframe contains rows for derived resources. The insight identifier's system and value are included as columns. We'll use this information to reteive the evidence for the insight that caused the resource to be derived. In addition, the acd in the identifier's system URI tells us that these resources were derived using ACD. resources_df[\"text\"] = resources_df.loc[:, \"resource_json\"].apply(get_code_text) resources_df[\"derived_by_insight\"] = resources_df.loc[:, \"resource_json\"].apply( get_derived_resource_insight_id ) resources_df = resources_df.explode(\"derived_by_insight\") resources_df[[\"insight_id_system\", \"insight_id_value\"]] = resources_df[ \"derived_by_insight\" ].str.split(\",\", expand=True) resources_df = resources_df.drop(labels=[\"derived_by_insight\"], axis=\"columns\") resources_df.dropna(subset=[\"insight_id_system\"], inplace=True) print_df( resources_df.loc[ :, [ \"resource_id\", \"resource_type\", \"text\", \"insight_id_system\", \"insight_id_value\", ], ] ) resource_id resource_type text insight_id_system insight_id_value 3 17e9d5ddf76-2a1b470e-3808-442d-a1af-857b7532b740 MedicationStatement Losartan urn:alvearie.io/health_patterns/services/nlp_insights/acd 2c3514d1168072dcf3bb4a5992c76e7c37e6d7ea98cac9c169d29d12 6 17e9d5ddf76-f5a481e8-1c92-4179-bb4d-2c668cc9bd66 Condition myocardial infarction urn:alvearie.io/health_patterns/services/nlp_insights/acd dc5541f39215bb39dd3619539d2655e172978ce61da98b0fa2206fe9","title":"Construct Data Frame"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#retrieve-source-text-that-was-used-to-derive-resources","text":"In this section, we will use the insight extension in the meta of the Resource to determine what was used to derive the resource.","title":"Retrieve source text that was used to derive resources"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#function-to-retrieve-reference-and-path","text":"This function evaluates a FHIRPath expression to retrieve the resource containing the text that was used to derive this resource, and the path to that text. This information can be used to load the source text. These are refered to as the \"reference\" and \"reference path\" in alvearie. def get_derived_from(resource, insight_id_system, insight_id_value): \"\"\"Returns reference;path (separated by a semicolon)\"\"\" # Reference and path are in the insight detail extension of the insight # that we are interested in expr_str = ( f\"meta\" f\".extension('{insight_ext_url}').where(\" f\" extension('{insight_id_ext_url}').value.where(\" f\" system = '{insight_id_system}' and \" f\" value = '{insight_id_value}'\" f\" ).exists()\" f\")\" f\".extension('{insight_detail_ext}')\" f\".select(\" f\" extension('{insight_reference_ext}').value.reference + ';' \" f\" + extension('{insight_reference_path}').value \" f\")\" ) return evaluate_fhir_path(resource, expr_str)","title":"Function to Retrieve Reference and Path"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#construct-data-frame_1","text":"This builds a dataframe for each resource and includes the resource and path that the insight was derived from. resources_df[\"from\"] = resources_df.apply( lambda row: get_derived_from( row[\"resource_json\"], row[\"insight_id_system\"], row[\"insight_id_value\"] ), axis=1, ) resources_df = resources_df.explode(\"from\") resources_df[[\"derived_from_resource\", \"derived_from_path\"]] = resources_df[ \"from\" ].str.split(\";\", expand=True) resources_df.drop(labels=[\"from\"], axis=\"columns\", inplace=True) print_df( resources_df.loc[ :, [ \"resource_id\", \"resource_type\", \"text\", \"derived_from_resource\", \"derived_from_path\", ], ] ) resource_id resource_type text derived_from_resource derived_from_path 3 17e9d5ddf76-2a1b470e-3808-442d-a1af-857b7532b740 MedicationStatement Losartan DiagnosticReport/17e9d5ddf75-b3eb69d7-fd03-4caf-8fe6-d8e4f2a73b2c DiagnosticReport.presentedForm[0].data 6 17e9d5ddf76-f5a481e8-1c92-4179-bb4d-2c668cc9bd66 Condition myocardial infarction DiagnosticReport/17e9d5ddf75-b3eb69d7-fd03-4caf-8fe6-d8e4f2a73b2c DiagnosticReport.presentedForm[0].data","title":"Construct Data Frame"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#retrieve-source-text","text":"In this example, both resources were derived from the same source text in the diagnostic report. The source resource can be easily retrieved from the FHIR server, and the path expression evaluated to get the text. source_resource, source_path = ( resources_df.loc[:, [\"derived_from_resource\", \"derived_from_path\"]] .drop_duplicates() .iloc[0] ) def get_source_text(resource_loc, text_path): \"\"\"Retrieve the resource from the FHIR server and resolve the path to the text\"\"\" source_resource_fhir = requests.get( f\"{fhir_server}/{resource_loc}\", headers={\"Accept\": \"application/fhir+json\"}, verify=False, ) source_resource_fhir.raise_for_status() return evaluate_fhir_path(source_resource_fhir.text, source_path)[0] get_source_text(source_resource, source_path) 'The patient had a myocardial infarction in 2015 and was prescribed Losartan.The patient is taking Losartan exactly as prescribed and has had no side effects.'","title":"Retrieve source text"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#retrieve-spans","text":"Clinical notes are usually longer than a few sentences. It is helpful to know which words and phrases in the text caused an insight to be derived. This section shows how to retrieve the spans associated with the insight for a derived resource.","title":"Retrieve spans"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#function-to-retrieve-spans","text":"This function retrieves spans for a specific reference & path within an insight. The spans are returned as a list of (start-offset, end-offset) string values. def get_spans(resource, insight_id_system, insight_id_value, reference, path): # spans are within # -> Insight (must match expected system and id) # -> insight detail (must match reference & path) # -> insight result # -> span (may repeat) expr_str = ( f\"meta\" f\".extension('{insight_ext_url}').where(\" f\" extension('{insight_id_ext_url}').value.where(\" f\" system = '{insight_id_system}' and value = '{insight_id_value}'\" f\" ).exists()\" f\" )\" f\".extension('{insight_detail_ext}').where(\" f\" extension('{insight_reference_ext}').value.reference = '{reference}' and \" f\" extension('{insight_reference_path}').value = '{path}'\" f\")\" f\".extension('{insight_result_ext}')\" f\".extension('{insight_span_ext}')\" f\".select(\" f\" extension('{insight_offset_begin_ext}').value.toString() + ',' +\" f\" extension('{insight_offset_end_ext}').value.toString() \" f\" )\" ) return evaluate_fhir_path(resource, expr_str)","title":"Function to retrieve spans"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#construct-data-frame_2","text":"There will be multiple rows for some insights/resources in this data frame, because there are mutliple spans that caused the resource to be derived. resources_df[\"spans\"] = resources_df.apply( lambda row: get_spans( row[\"resource_json\"], row[\"insight_id_system\"], row[\"insight_id_value\"], row[\"derived_from_resource\"], row[\"derived_from_path\"], ), axis=1, ) resources_df = resources_df.explode(\"spans\") resources_df[[\"span_begin\", \"span_end\"]] = resources_df[\"spans\"].str.split( \",\", expand=True ) resources_df.drop(labels=[\"spans\"], axis=\"columns\", inplace=True) resources_df.loc[ :, [ \"resource_id\", \"resource_type\", \"text\", \"derived_from_resource\", \"derived_from_path\", \"span_begin\", \"span_end\", ], ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } resource_id resource_type text derived_from_resource derived_from_path span_begin span_end 3 17e9d5ddf76-2a1b470e-3808-442d-a1af-857b7532b740 MedicationStatement Losartan DiagnosticReport/17e9d5ddf75-b3eb69d7-fd03-4caf-8fe6-d8e4f2a73b2c DiagnosticReport.presentedForm[0].data 67 75 3 17e9d5ddf76-2a1b470e-3808-442d-a1af-857b7532b740 MedicationStatement Losartan DiagnosticReport/17e9d5ddf75-b3eb69d7-fd03-4caf-8fe6-d8e4f2a73b2c DiagnosticReport.presentedForm[0].data 98 106 6 17e9d5ddf76-f5a481e8-1c92-4179-bb4d-2c668cc9bd66 Condition myocardial infarction DiagnosticReport/17e9d5ddf75-b3eb69d7-fd03-4caf-8fe6-d8e4f2a73b2c DiagnosticReport.presentedForm[0].data 18 39","title":"Construct Data Frame"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#display-source-text-with-spans-highlighted","text":"Once the previous dataframe has been created, it's not hard to group by the source resource and path, and display the text from that location the spans highlighted. In this example, the spans related to medication statements are in bold, and spans related to conditions are in italics. This type of processing is important for an application that needs to present the information that was derived from some text to a user. def group_of_spans_to_html(group_rows): \"\"\"Custom aggregate of the a data frame with \"resource_type\", \"span_begin\" and \"span_end\" columns. The group name is a tuple of (derived_resource_location, derived_from_text_path) \"\"\" source_text = get_source_text(group_rows.name[0], group_rows.name[1]) markup_points = [] # Points is a series of (resource_type, begin or end, offset) tuples # sorted in offset ascending order points = ( resources_df.apply( lambda row: [ (row[\"resource_type\"], \"begin\", int(row[\"span_begin\"])), (row[\"resource_type\"], \"end\", int(row[\"span_end\"])), ], axis=1, ) .explode() .sort_values(key=lambda series: [e[2] for e in series], ascending=True) ) # tags is used to to figure out what type of HTML to insert at a given point tags = { \"Condition\": {\"begin\": '<I><span style=\"color: green\">', \"end\": \"</span></I>\"}, \"MedicationStatement\": { \"begin\": '<B><span style=\"color: blue\">', \"end\": \"</span></B>\", }, } # build the result string result = [] cur_end = 0 for pt in points: result.append(source_text[cur_end : pt[2]]) result.append(tags[pt[0]][pt[1]]) cur_end = pt[2] result.append(source_text[cur_end:]) return \"\".join(result) sources = resources_df.groupby(by=[\"derived_from_resource\", \"derived_from_path\"]).apply( group_of_spans_to_html ) sources = sources.to_frame().reset_index().rename(columns={0: \"text\"}) display(HTML(pd.DataFrame(sources).to_html(escape=False))) derived_from_resource derived_from_path text 0 DiagnosticReport/17e9d5ddf75-b3eb69d7-fd03-4caf-8fe6-d8e4f2a73b2c DiagnosticReport.presentedForm[0].data The patient had a myocardial infarction in 2015 and was prescribed Losartan .The patient is taking Losartan exactly as prescribed and has had no side effects.","title":"Display source text with spans highlighted"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#retrieve-evidence-for-enriched-resources","text":"When nlp-insights derives an additional code for a resource's codings, it adds a summary extension to the code element. We'll use this extension to find the derived codes, and the evidence for those codes # reset datafram to all resources for the patient resources_df = original_resources_df resources_df[\"text\"] = resources_df.loc[:, \"resource_json\"].apply(get_code_text)","title":"Retrieve Evidence for enriched resources"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#define-a-function-to-retrieve-codes","text":"This FHIRPath expression returns all the codes on a resource, derived or not. The result is a list of \"system,code\" strings. def get_all_codes(resource): # returns system,code for code expr_str = f\"Condition.code.coding.select(system + ',' + code) | AllergyIntolerance.code.coding.select(system + ',' + code)\" return evaluate_fhir_path(resource, expr_str)","title":"Define a function to retrieve codes"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#define-a-function-to-retrieve-the-summary-extension-for-a-code","text":"This uses a FHIRPath expression to look for the insight summary extension on a code, and retrieve a string \"insight-id-system,insight-id-value\" def get_summary_extension_for_code(resource, code_system, code_value): expr_str = ( f\"(Condition | AllergyIntolerance).code.coding.where(\" f\" system = '{code_system}' and code = '{code_value}'\" f\")\" f\".extension('{summary_ext_url}').where(\" f\" extension('{category_ext_url}').value.coding.code = 'natural-language-processing'\" f\" )\" f\".extension('{insight_id_ext_url}').value.select(system + ',' + value)\" ) return evaluate_fhir_path(resource, expr_str)","title":"Define a function to retrieve the summary extension for a code"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#construct-a-data-frame-of-derived-codes","text":"This code constructs a dataframe that contains columns with the insight id system and insight id value...we can use this information to determine where the code was derived from. The acd in the insight id system tells us that ACD was used to derive the code. # Dataframe for All codes resources_df[\"code\"] = resources_df.apply( lambda row: get_all_codes(row[\"resource_json\"]), axis=1 ) resources_df = resources_df.explode(\"code\") resources_df.dropna(subset=[\"code\"], inplace=True) resources_df[[\"code_system\", \"code_value\"]] = resources_df[\"code\"].str.split( \",\", expand=True ) resources_df.drop(labels=[\"code\"], axis=\"columns\", inplace=True) # Filter to only include codes with associated insights resources_df[\"summary\"] = resources_df.apply( lambda row: get_summary_extension_for_code( row[\"resource_json\"], row[\"code_system\"], row[\"code_value\"] ), axis=1, ) resources_df = resources_df.explode(\"summary\") resources_df.dropna(subset=[\"summary\"], inplace=True) resources_df[[\"insight_id_system\", \"insight_id_value\"]] = resources_df[ \"summary\" ].str.split(\",\", expand=True) resources_df.loc[ :, [ \"resource_id\", \"resource_type\", \"text\", \"code_system\", \"code_value\", \"insight_id_system\", \"insight_id_value\", ], ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } resource_id resource_type text code_system code_value insight_id_system insight_id_value 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://terminology.hl7.org/CodeSystem/umls C0559470 urn:alvearie.io/health_patterns/services/nlp_insights/acd 31d8f5eaf30190bba2cab9a18c95306901c197f3e14a6fc68f9dc276 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://snomed.info/sct 91935009 urn:alvearie.io/health_patterns/services/nlp_insights/acd 31d8f5eaf30190bba2cab9a18c95306901c197f3e14a6fc68f9dc276 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-9-cm 995.3 urn:alvearie.io/health_patterns/services/nlp_insights/acd 31d8f5eaf30190bba2cab9a18c95306901c197f3e14a6fc68f9dc276 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-10-cm Z91.010 urn:alvearie.io/health_patterns/services/nlp_insights/acd 31d8f5eaf30190bba2cab9a18c95306901c197f3e14a6fc68f9dc276 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-10-cm Z91.0 urn:alvearie.io/health_patterns/services/nlp_insights/acd 31d8f5eaf30190bba2cab9a18c95306901c197f3e14a6fc68f9dc276 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://terminology.hl7.org/CodeSystem/umls C0571417 urn:alvearie.io/health_patterns/services/nlp_insights/acd 6134e9e926a775975004b69d42e225f467b50690aa4992d98922715e 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://snomed.info/sct 294505008 urn:alvearie.io/health_patterns/services/nlp_insights/acd 6134e9e926a775975004b69d42e225f467b50690aa4992d98922715e 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-9-cm E930.0 urn:alvearie.io/health_patterns/services/nlp_insights/acd 6134e9e926a775975004b69d42e225f467b50690aa4992d98922715e 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-9-cm 995.27 urn:alvearie.io/health_patterns/services/nlp_insights/acd 6134e9e926a775975004b69d42e225f467b50690aa4992d98922715e 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-10-cm Z88.0 urn:alvearie.io/health_patterns/services/nlp_insights/acd 6134e9e926a775975004b69d42e225f467b50690aa4992d98922715e 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://terminology.hl7.org/CodeSystem/umls C0011849 urn:alvearie.io/health_patterns/services/nlp_insights/acd ba6da20b9ef2b1b4ed2eb1b064fb96a00126b1aacc8e9a5519df1050 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://snomed.info/sct 73211009 urn:alvearie.io/health_patterns/services/nlp_insights/acd ba6da20b9ef2b1b4ed2eb1b064fb96a00126b1aacc8e9a5519df1050 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://hl7.org/fhir/sid/icd-9-cm 250.00 urn:alvearie.io/health_patterns/services/nlp_insights/acd ba6da20b9ef2b1b4ed2eb1b064fb96a00126b1aacc8e9a5519df1050 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://hl7.org/fhir/sid/icd-10-cm E14.9 urn:alvearie.io/health_patterns/services/nlp_insights/acd ba6da20b9ef2b1b4ed2eb1b064fb96a00126b1aacc8e9a5519df1050","title":"Construct a data frame of Derived codes"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#determine-how-the-code-was-derived","text":"The insight extension in the meta contains the information about where the code was derived from. In the case of enrichment, this information is pretty simple. The code is always derived from the text associated with the enclosing code structure. The reference resource is always the same resource as the one being enriched. However these facts are explicitly stated in the insight extension. We can verify this with the get_derived_from method that we created earlier for the derived resources example.","title":"Determine how the code was derived"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#construct-a-data-frame-with-reference-resource-and-path","text":"resources_df[\"from\"] = resources_df.apply( lambda row: get_derived_from( row[\"resource_json\"], row[\"insight_id_system\"], row[\"insight_id_value\"] ), axis=1, ) resources_df = resources_df.explode(\"from\") resources_df[[\"derived_from_resource\", \"derived_from_path\"]] = resources_df[ \"from\" ].str.split(\";\", expand=True) resources_df.drop(labels=[\"from\"], axis=\"columns\", inplace=True) resources_df.loc[ :, [ \"resource_id\", \"resource_type\", \"text\", \"code_system\", \"code_value\", \"derived_from_resource\", \"derived_from_path\", ], ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } resource_id resource_type text code_system code_value derived_from_resource derived_from_path 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://terminology.hl7.org/CodeSystem/umls C0559470 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://snomed.info/sct 91935009 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-9-cm 995.3 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-10-cm Z91.010 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-10-cm Z91.0 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://terminology.hl7.org/CodeSystem/umls C0571417 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://snomed.info/sct 294505008 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-9-cm E930.0 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-9-cm 995.27 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-10-cm Z88.0 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://terminology.hl7.org/CodeSystem/umls C0011849 Condition/17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition.code.text 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://snomed.info/sct 73211009 Condition/17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition.code.text 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://hl7.org/fhir/sid/icd-9-cm 250.00 Condition/17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition.code.text 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://hl7.org/fhir/sid/icd-10-cm E14.9 Condition/17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition.code.text","title":"Construct a Data Frame with reference resource and path"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#retrieve-source-text_1","text":"We can use the path from the previous data frame to retrieve the source text. While we could use the source resource's id to retrieve the source resource from the FHIR server, we know that this is always going to be the same resource as the enriched one, so for simplicity and performance we won't retrieve the resource (although we could if we wanted to). Finding the source text is then a simple matter of evaluating the derived_from_path in the previous data frame against the enriched resource. resources_df[\"source_text\"] = resources_df.apply( lambda row: evaluate_fhir_path(row[\"resource_json\"], row[\"derived_from_path\"]), axis=1, ) resources_df = resources_df.explode(\"source_text\") resources_df.loc[ :, [ \"resource_id\", \"resource_type\", \"text\", \"code_system\", \"code_value\", \"derived_from_resource\", \"derived_from_path\", \"source_text\", ], ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } resource_id resource_type text code_system code_value derived_from_resource derived_from_path source_text 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://terminology.hl7.org/CodeSystem/umls C0559470 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text peanut 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://snomed.info/sct 91935009 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text peanut 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-9-cm 995.3 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text peanut 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-10-cm Z91.010 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text peanut 1 17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance peanut http://hl7.org/fhir/sid/icd-10-cm Z91.0 AllergyIntolerance/17e9d5ddf75-bc72c640-739c-4c48-b26f-774fa5446720 AllergyIntolerance.code.text peanut 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://terminology.hl7.org/CodeSystem/umls C0571417 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text amoxicillin 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://snomed.info/sct 294505008 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text amoxicillin 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-9-cm E930.0 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text amoxicillin 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-9-cm 995.27 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text amoxicillin 2 17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance amoxicillin http://hl7.org/fhir/sid/icd-10-cm Z88.0 AllergyIntolerance/17e9d5ddf76-7293ecc8-8b6a-497a-881c-b6eeed1250be AllergyIntolerance.code.text amoxicillin 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://terminology.hl7.org/CodeSystem/umls C0011849 Condition/17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition.code.text diabetes 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://snomed.info/sct 73211009 Condition/17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition.code.text diabetes 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://hl7.org/fhir/sid/icd-9-cm 250.00 Condition/17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition.code.text diabetes 5 17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition diabetes http://hl7.org/fhir/sid/icd-10-cm E14.9 Condition/17e9d5ddf75-51cfac33-b53e-4b65-95e3-781549aab119 Condition.code.text diabetes","title":"Retrieve source text"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#spans","text":"For enrichment, there are no span extensions stored in the insight detail extensions. That's because the entire text is used for the insight, along with the context of the text. (For example 'peanut' in an AllergyIntolerance should result in peanut allergy codes, not a code for a plant or food.) These text fragments contain only information related to the derived codes and the context is defined by the resource. As a result span and confidence values are not interesting.","title":"Spans"},{"location":"examples/fhir_integration/fhir_integration_tutorial/#summary","text":"In this tutorial we: Created a bundle Enriched the bundle using the nlp-insights service Posted the resources to a FHIR Server Retrieved resources derived by NLP and determined what caused them to be derived Retrieved derived codes for enriched resources and determined what caused them to be derived","title":"Summary"},{"location":"examples/quickumls/configure_quickumls/","text":"Configure nlp-insights to use QuickUMLS for NLP Once nlp-insights has been configured to use QuickUMLS, it will use the QuickUMLS service for it's NLP operations by default. Start the nlp-insights service If the nlp-insights service has not been started, follow the directions here to start the server in a local container. Create a configuration for QuickUMLS The first step is to create the definition for the QuickUMLS service. Replace <service_url_here> with your endpoint. curl -w \"%{http_code}\\n\" -o - -XPOST localhost:5000/config/definition -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"name\": \"quickconfig1\", \"nlpServiceType\": \"quickumls\", \"config\": { \"endpoint\": \"https://<service_url_here>/match\" } } EOF output 200 Set QuickUmls as the default configuration Now the definition of the QuickUMLS service exists, we can set it as the default service. You should be aware that this operation affects all users of the nlp-insights service. curl -w \"\\n%{http_code}\\n\" -o - -XPOST localhost:5000/config/setDefault?name=quickconfig1 output Default config set to: quickconfig1 200 Configuring at deploy time In some environments (such as k8s), it may be necessary to configure the server at deploy time, rather than with a REST API. Instructions for how to do that is located here .","title":"Configuration"},{"location":"examples/quickumls/configure_quickumls/#configure-nlp-insights-to-use-quickumls-for-nlp","text":"Once nlp-insights has been configured to use QuickUMLS, it will use the QuickUMLS service for it's NLP operations by default.","title":"Configure nlp-insights to use QuickUMLS for NLP"},{"location":"examples/quickumls/configure_quickumls/#start-the-nlp-insights-service","text":"If the nlp-insights service has not been started, follow the directions here to start the server in a local container.","title":"Start the nlp-insights service"},{"location":"examples/quickumls/configure_quickumls/#create-a-configuration-for-quickumls","text":"The first step is to create the definition for the QuickUMLS service. Replace <service_url_here> with your endpoint. curl -w \"%{http_code}\\n\" -o - -XPOST localhost:5000/config/definition -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"name\": \"quickconfig1\", \"nlpServiceType\": \"quickumls\", \"config\": { \"endpoint\": \"https://<service_url_here>/match\" } } EOF output 200","title":"Create a configuration for QuickUMLS"},{"location":"examples/quickumls/configure_quickumls/#set-quickumls-as-the-default-configuration","text":"Now the definition of the QuickUMLS service exists, we can set it as the default service. You should be aware that this operation affects all users of the nlp-insights service. curl -w \"\\n%{http_code}\\n\" -o - -XPOST localhost:5000/config/setDefault?name=quickconfig1 output Default config set to: quickconfig1 200","title":"Set QuickUmls as the default configuration"},{"location":"examples/quickumls/configure_quickumls/#configuring-at-deploy-time","text":"In some environments (such as k8s), it may be necessary to configure the server at deploy time, rather than with a REST API. Instructions for how to do that is located here .","title":"Configuring at deploy time"},{"location":"examples/quickumls/derive_new_resources/","text":"Derive New Resources with nlp-insights and QuickUMLS Some resources such as DiagnosticReports and DocumentReferences contain clinical notes or other unstructured text. When the nlp-insights service receives one of these resources, it can derive new FHIR resources for detected concepts. nlp-insights can derive new resources from: DiagnosticReport (from the text at the path DiagnosticReport.presentedForm[].data ) DocumentReference (from the text at the path DocumentReference.content[].attachment.data ) Two types of FHIR resources can be derived by the service: Condition MedicationStatement Configure nlp-insights to use QuickUMLS for NLP If the nlp-insights service has not been configured to use QuickUMLS by default, follow the steps here . Derive New Resources from a Diagnostic Report This example creates a diagnostic report where the text mentions a condition ( myocardial infarction ) and a medication ( Losartan ). The Text data in a diagnostic report must be base64 encoded, which can be done with the base64 command in bash. B64_REPORT_TEXT=$(echo 'The patient had a myocardial infarction in 2015 and was prescribed Losartan.' | base64 -w 0) The text can now be included in a diagnostic report and sent to the nlp-insights service. The curl command stores the response json in a file /tmp/output.json for future analysis. curl -w \"\\n%{http_code}\\n\" -s -o /tmp/output.json -XPOST localhost:5000/discoverInsights -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"resourceType\": \"Bundle\", \"id\": \"abc\", \"type\": \"transaction\", \"entry\": [ { \"resource\": { \"id\": \"abcefg-1234567890\", \"status\": \"final\", \"code\": { \"text\": \"Chief complaint Narrative - Reported\" }, \"presentedForm\": [ { \"contentType\": \"text\", \"language\": \"en\", \"data\": \"$B64_REPORT_TEXT\", \"title\": \"ER VISIT\", \"creation\": \"2020-08-02T12:44:55+08:00\" } ], \"resourceType\": \"DiagnosticReport\" }, \"request\": { \"method\": \"POST\", \"url\": \"DiagnosticReport\" } } ] } EOF output 200 cat /tmp/output.json | jq Returned Bundle { \"id\": \"abc\", \"entry\": [ { \"fullUrl\": \"urn:uuid:894fc0f0-c6cb-4464-83eb-e42a6c92f9f6\", \"request\": { \"method\": \"POST\", \"url\": \"DiagnosticReport\" }, \"resource\": { \"id\": \"abcefg-1234567890\", \"code\": { \"text\": \"Chief complaint Narrative - Reported\" }, \"presentedForm\": [ { \"contentType\": \"text\", \"creation\": \"2020-08-02T12:44:55+08:00\", \"data\": \"VGhlIHBhdGllbnQgaGFkIGEgbXlvY2FyZGlhbCBpbmZhcmN0aW9uIGluIDIwMTUgYW5kIHdhcyBwcmVzY3JpYmVkIExvc2FydGFuLgo=\", \"language\": \"en\", \"title\": \"ER VISIT\" } ], \"status\": \"final\", \"resourceType\": \"DiagnosticReport\" } }, { \"request\": { \"method\": \"POST\", \"url\": \"Condition\" }, \"resource\": { \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"f2c75a905c5371833f3498356b4c4a5241be3b36c4d9ea85dd0545df\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"Condition\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:894fc0f0-c6cb-4464-83eb-e42a6c92f9f6\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"DiagnosticReport.presentedForm[0].data\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"\" } }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/covered-text\", \"valueString\": \"myocardial infarction\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\", \"valueInteger\": 18 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\", \"valueInteger\": 39 } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/span\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"f2c75a905c5371833f3498356b4c4a5241be3b36c4d9ea85dd0545df\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": { \"coding\": [ { \"code\": \"C0027051\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } ], \"text\": \"myocardial infarction\" }, \"resourceType\": \"Condition\" } }, { \"request\": { \"method\": \"POST\", \"url\": \"MedicationStatement\" }, \"resource\": { \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"16f3982942687e142241c6145467accf85c314d47b4698edbe210b83\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"MedicationStatement\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:894fc0f0-c6cb-4464-83eb-e42a6c92f9f6\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"DiagnosticReport.presentedForm[0].data\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"\" } }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/covered-text\", \"valueString\": \"Losartan\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\", \"valueInteger\": 67 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\", \"valueInteger\": 75 } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/span\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"16f3982942687e142241c6145467accf85c314d47b4698edbe210b83\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"medicationCodeableConcept\": { \"coding\": [ { \"code\": \"C0126174\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } ], \"text\": \"losartan\" }, \"status\": \"unknown\", \"resourceType\": \"MedicationStatement\" } } ], \"type\": \"transaction\", \"resourceType\": \"Bundle\" } The returned bundle has two new entries for derived resources. We'll look at the codes associated with these resources independently. Resource Type Description DiagnosticReport Chief complaint Narrative - Reported Condition myocardial infarction MedicationStatement losartan Derived condition codes Included in the condition is the UMLS code that was detected by QuickUMLS. System Code Display http://terminology.hl7.org/CodeSystem/umls C0027051 Derived MedicationStatement codes The derived MedicationStatement also contains the UMLS code that was detected by QuickUMLS System Code Display http://terminology.hl7.org/CodeSystem/umls C0126174 Evidence The structure of derived resources is based on the Alvearie FHIR IG . The nlp-insights service adds detailed information to the derived resource to explain what caused the resource to be created. Insight Summary Each derived resource has an insight summary extension. The summary extension for the derived Condition looks like this: { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"f2c75a905c5371833f3498356b4c4a5241be3b36c4d9ea85dd0545df\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } The insight id has a system and identifier that together identify the insight. In this example, the system tells us that the insight was discovered using QuickUMLS. The identifier value is unique (within the system) to this insight. The category tells us that the resource was created using Natural Language Processing. Insight Extension in Resource Meta The insight identified by the summary extension has an insight extension in the resource's meta. The insight extension contains lots of details about what the insight applies to and why it was created. Although the alvearie FHIR IG supports multiple insights, nlp-insights will create a single insight in the meta when a resource is derived. Other services are able to additional insights if they choose to. Insight extension for the derived Condition { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"f2c75a905c5371833f3498356b4c4a5241be3b36c4d9ea85dd0545df\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"Condition\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:894fc0f0-c6cb-4464-83eb-e42a6c92f9f6\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"DiagnosticReport.presentedForm[0].data\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"\" } }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/covered-text\", \"valueString\": \"myocardial infarction\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\", \"valueInteger\": 18 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\", \"valueInteger\": 39 } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/span\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } The extensions of interest within the insight extension are: extension purpose insight-id identifier for the insight. path HL7 FHIR Path to the part of this resource that the insight applies to. In this case this will be the root of the derived object. insight-detail Detailed supporting evidence for the insight. Insight detail The insight detail extension provides information about why the insight got created: Extension Purpose reference The resource that contained the text that was used to create the insight reference-path HL7 FHIR Path that describes the location of the text used to create the insight (within reference) evaluated-output base64 response from the QuickUMLS Service insight-result value specific results for the insight. This structure contains one or more spans within the text at reference-path that support the insight. Spans The insight-result contains one or more span extensions. Each span contains Extension Purpose covered text text that the span covers begin offset in the original text that begins the span end offset in the original text that ends the span","title":"Derive New Resources"},{"location":"examples/quickumls/derive_new_resources/#derive-new-resources-with-nlp-insights-and-quickumls","text":"Some resources such as DiagnosticReports and DocumentReferences contain clinical notes or other unstructured text. When the nlp-insights service receives one of these resources, it can derive new FHIR resources for detected concepts. nlp-insights can derive new resources from: DiagnosticReport (from the text at the path DiagnosticReport.presentedForm[].data ) DocumentReference (from the text at the path DocumentReference.content[].attachment.data ) Two types of FHIR resources can be derived by the service: Condition MedicationStatement","title":"Derive New Resources with nlp-insights and QuickUMLS"},{"location":"examples/quickumls/derive_new_resources/#configure-nlp-insights-to-use-quickumls-for-nlp","text":"If the nlp-insights service has not been configured to use QuickUMLS by default, follow the steps here .","title":"Configure nlp-insights to use QuickUMLS for NLP"},{"location":"examples/quickumls/derive_new_resources/#derive-new-resources-from-a-diagnostic-report","text":"This example creates a diagnostic report where the text mentions a condition ( myocardial infarction ) and a medication ( Losartan ). The Text data in a diagnostic report must be base64 encoded, which can be done with the base64 command in bash. B64_REPORT_TEXT=$(echo 'The patient had a myocardial infarction in 2015 and was prescribed Losartan.' | base64 -w 0) The text can now be included in a diagnostic report and sent to the nlp-insights service. The curl command stores the response json in a file /tmp/output.json for future analysis. curl -w \"\\n%{http_code}\\n\" -s -o /tmp/output.json -XPOST localhost:5000/discoverInsights -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"resourceType\": \"Bundle\", \"id\": \"abc\", \"type\": \"transaction\", \"entry\": [ { \"resource\": { \"id\": \"abcefg-1234567890\", \"status\": \"final\", \"code\": { \"text\": \"Chief complaint Narrative - Reported\" }, \"presentedForm\": [ { \"contentType\": \"text\", \"language\": \"en\", \"data\": \"$B64_REPORT_TEXT\", \"title\": \"ER VISIT\", \"creation\": \"2020-08-02T12:44:55+08:00\" } ], \"resourceType\": \"DiagnosticReport\" }, \"request\": { \"method\": \"POST\", \"url\": \"DiagnosticReport\" } } ] } EOF output 200 cat /tmp/output.json | jq Returned Bundle { \"id\": \"abc\", \"entry\": [ { \"fullUrl\": \"urn:uuid:894fc0f0-c6cb-4464-83eb-e42a6c92f9f6\", \"request\": { \"method\": \"POST\", \"url\": \"DiagnosticReport\" }, \"resource\": { \"id\": \"abcefg-1234567890\", \"code\": { \"text\": \"Chief complaint Narrative - Reported\" }, \"presentedForm\": [ { \"contentType\": \"text\", \"creation\": \"2020-08-02T12:44:55+08:00\", \"data\": \"VGhlIHBhdGllbnQgaGFkIGEgbXlvY2FyZGlhbCBpbmZhcmN0aW9uIGluIDIwMTUgYW5kIHdhcyBwcmVzY3JpYmVkIExvc2FydGFuLgo=\", \"language\": \"en\", \"title\": \"ER VISIT\" } ], \"status\": \"final\", \"resourceType\": \"DiagnosticReport\" } }, { \"request\": { \"method\": \"POST\", \"url\": \"Condition\" }, \"resource\": { \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"f2c75a905c5371833f3498356b4c4a5241be3b36c4d9ea85dd0545df\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"Condition\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:894fc0f0-c6cb-4464-83eb-e42a6c92f9f6\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"DiagnosticReport.presentedForm[0].data\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"\" } }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/covered-text\", \"valueString\": \"myocardial infarction\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\", \"valueInteger\": 18 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\", \"valueInteger\": 39 } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/span\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"f2c75a905c5371833f3498356b4c4a5241be3b36c4d9ea85dd0545df\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": { \"coding\": [ { \"code\": \"C0027051\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } ], \"text\": \"myocardial infarction\" }, \"resourceType\": \"Condition\" } }, { \"request\": { \"method\": \"POST\", \"url\": \"MedicationStatement\" }, \"resource\": { \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"16f3982942687e142241c6145467accf85c314d47b4698edbe210b83\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"MedicationStatement\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:894fc0f0-c6cb-4464-83eb-e42a6c92f9f6\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"DiagnosticReport.presentedForm[0].data\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"\" } }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/covered-text\", \"valueString\": \"Losartan\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\", \"valueInteger\": 67 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\", \"valueInteger\": 75 } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/span\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"16f3982942687e142241c6145467accf85c314d47b4698edbe210b83\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"medicationCodeableConcept\": { \"coding\": [ { \"code\": \"C0126174\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } ], \"text\": \"losartan\" }, \"status\": \"unknown\", \"resourceType\": \"MedicationStatement\" } } ], \"type\": \"transaction\", \"resourceType\": \"Bundle\" } The returned bundle has two new entries for derived resources. We'll look at the codes associated with these resources independently. Resource Type Description DiagnosticReport Chief complaint Narrative - Reported Condition myocardial infarction MedicationStatement losartan","title":"Derive New Resources from a Diagnostic Report"},{"location":"examples/quickumls/derive_new_resources/#derived-condition-codes","text":"Included in the condition is the UMLS code that was detected by QuickUMLS. System Code Display http://terminology.hl7.org/CodeSystem/umls C0027051","title":"Derived condition codes"},{"location":"examples/quickumls/derive_new_resources/#derived-medicationstatement-codes","text":"The derived MedicationStatement also contains the UMLS code that was detected by QuickUMLS System Code Display http://terminology.hl7.org/CodeSystem/umls C0126174","title":"Derived MedicationStatement codes"},{"location":"examples/quickumls/derive_new_resources/#evidence","text":"The structure of derived resources is based on the Alvearie FHIR IG . The nlp-insights service adds detailed information to the derived resource to explain what caused the resource to be created.","title":"Evidence"},{"location":"examples/quickumls/derive_new_resources/#insight-summary","text":"Each derived resource has an insight summary extension. The summary extension for the derived Condition looks like this: { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"f2c75a905c5371833f3498356b4c4a5241be3b36c4d9ea85dd0545df\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } The insight id has a system and identifier that together identify the insight. In this example, the system tells us that the insight was discovered using QuickUMLS. The identifier value is unique (within the system) to this insight. The category tells us that the resource was created using Natural Language Processing.","title":"Insight Summary"},{"location":"examples/quickumls/derive_new_resources/#insight-extension-in-resource-meta","text":"The insight identified by the summary extension has an insight extension in the resource's meta. The insight extension contains lots of details about what the insight applies to and why it was created. Although the alvearie FHIR IG supports multiple insights, nlp-insights will create a single insight in the meta when a resource is derived. Other services are able to additional insights if they choose to. Insight extension for the derived Condition { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"f2c75a905c5371833f3498356b4c4a5241be3b36c4d9ea85dd0545df\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"Condition\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:894fc0f0-c6cb-4464-83eb-e42a6c92f9f6\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"DiagnosticReport.presentedForm[0].data\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"\" } }, { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/covered-text\", \"valueString\": \"myocardial infarction\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-begin\", \"valueInteger\": 18 }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/offset-end\", \"valueInteger\": 39 } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/span\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-result\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } The extensions of interest within the insight extension are: extension purpose insight-id identifier for the insight. path HL7 FHIR Path to the part of this resource that the insight applies to. In this case this will be the root of the derived object. insight-detail Detailed supporting evidence for the insight.","title":"Insight Extension in Resource Meta"},{"location":"examples/quickumls/derive_new_resources/#insight-detail","text":"The insight detail extension provides information about why the insight got created: Extension Purpose reference The resource that contained the text that was used to create the insight reference-path HL7 FHIR Path that describes the location of the text used to create the insight (within reference) evaluated-output base64 response from the QuickUMLS Service insight-result value specific results for the insight. This structure contains one or more spans within the text at reference-path that support the insight.","title":"Insight detail"},{"location":"examples/quickumls/derive_new_resources/#spans","text":"The insight-result contains one or more span extensions. Each span contains Extension Purpose covered text text that the span covers begin offset in the original text that begins the span end offset in the original text that ends the span","title":"Spans"},{"location":"examples/quickumls/enrich/","text":"Enrich FHIR resources with nlp-insights and QuickUMLS The nlp-insights service supports enrichment of the following types of FHIR resources: Condition AllergyIntolerance A resource is enriched by adding UMLS codes for detected concepts. This tutorial provides examples of enrichment. Configure nlp-insights to use QuickUMLS for NLP If the nlp-insights service has not been configured to use QuickUMLS by default, follow the steps here . Enrich a Condition In this example, the nlp-insights service is sent a bundle that contains a single condition. The condition has a code with text \"myocardial infarction\", but no coding values. The service will add coding values to the code. This curl command is written to store the response in a file /tmp/output.json for later analysis. curl -w \"\\n%{http_code}\\n\" -s -o /tmp/output.json -XPOST localhost:5000/discoverInsights -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"resourceType\": \"Bundle\", \"id\": \"abc\", \"type\": \"transaction\", \"entry\": [ { \"resource\": { \"id\": \"abcefg-1234567890\", \"code\": { \"text\": \"myocardial infarction\" }, \"subject\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"Condition\" }, \"request\": { \"method\": \"POST\", \"url\": \"Condition\" } } ] } EOF output 200 Enriched condition A bundle with the enriched condition is returned from the service. cat /tmp/output.json | jq Returned Bundle { \"id\": \"abc\", \"entry\": [ { \"fullUrl\": \"urn:uuid:cac05d72-a746-4e99-83a1-5f026e18d28b\", \"request\": { \"method\": \"POST\", \"url\": \"Condition\" }, \"resource\": { \"id\": \"abcefg-1234567890\", \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"ba52d4828c166df6edbf4e53d029d7d6eaeace98cf50a434a6541147\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"Condition.code.coding\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:cac05d72-a746-4e99-83a1-5f026e18d28b\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"Condition.code.text\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"code\": { \"coding\": [ { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"ba52d4828c166df6edbf4e53d029d7d6eaeace98cf50a434a6541147\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"C0027051\", \"display\": \"myocardial infarction\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } ], \"text\": \"myocardial infarction\" }, \"subject\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"Condition\" } } ], \"type\": \"transaction\", \"resourceType\": \"Bundle\" } Condition derived codes Quick UMLS understands UMLS concept codes. As a result a code has been added to the resource. System Code Display http://terminology.hl7.org/CodeSystem/umls C0027051 myocardial infarction Enrich an allergy intolerance In this example, a bundle with two allergy intolreance resources is sent to the nlp insights server. The first has a code with text \"peanut\", and the second resource has a code with text \"amoxicillin\". Both resources contain only text and do not contain any codes for the allergy. The nlp-insights service will enrich the resources with a UMLS code for the provided text. As in the prior example, the returned bundle is saved in a file /tmp/output.json for later analysis. curl -w \"\\n%{http_code}\\n\" -s -o /tmp/output.json -XPOST localhost:5000/discoverInsights -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"resourceType\": \"Bundle\", \"id\": \"abc\", \"type\": \"transaction\", \"entry\": [ { \"resource\": { \"id\": \"wxyz-123\", \"code\": { \"text\": \"peanut\" }, \"patient\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"AllergyIntolerance\" }, \"request\": { \"method\": \"POST\", \"url\": \"Condition\" } }, { \"resource\": { \"id\": \"qrstuv-123\", \"code\": { \"text\": \"amoxicillin\" }, \"patient\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"AllergyIntolerance\" }, \"request\": { \"method\": \"POST\", \"url\": \"Condition\" } } ] } EOF output 200 Enriched Allergy Intolerance resources A bundle is returned that contains the enriched allergy intolerance resources. Each resource now contains the additional derived code values. cat /tmp/output.json | jq Returned Bundle { \"id\": \"abc\", \"entry\": [ { \"fullUrl\": \"urn:uuid:001610dd-2d6d-4e18-8784-4de72ddde238\", \"request\": { \"method\": \"POST\", \"url\": \"Condition\" }, \"resource\": { \"id\": \"wxyz-123\", \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"4f6cfb8db4b6452a76cf7bcf373ef612c5b80f7dd2daeafdf07408cf\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"AllergyIntolerance.code.coding\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:001610dd-2d6d-4e18-8784-4de72ddde238\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"AllergyIntolerance.code.text\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"W3siY3VpIjogIkMwNTU5NDcwIiwgImVuZCI6IDE0LCAibmdyYW0iOiAicGVhbnV0IGFsbGVyZ3kiLCAicHJlZmVycmVkIjogMSwgInNlbXR5cGVzIjogWyJUMDQ3Il0sICJzaW1pbGFyaXR5IjogMS4wLCAic25vbWVkX2N0IjogWyIxNTIzMDYwMTgiLCAiNTk4OTIwMDEyIiwgIjMyNDc3ODAxNyIsICI4MzUzNTMwMTQiXSwgInN0YXJ0IjogMCwgInRlcm0iOiAicGVhbnV0IGFsbGVyZ3kifSwgeyJjdWkiOiAiQzA5MTc5MTgiLCAiZW5kIjogMTQsICJuZ3JhbSI6ICJwZWFudXQgYWxsZXJneSIsICJwcmVmZXJyZWQiOiAxLCAic2VtdHlwZXMiOiBbIlQwMzMiXSwgInNpbWlsYXJpdHkiOiAwLjgsICJzbm9tZWRfY3QiOiBbXSwgInN0YXJ0IjogMCwgInRlcm0iOiAiaHgtcGVhbnV0IGFsbGVyZ3kifSwgeyJjdWkiOiAiQzA1Nzc2MjAiLCAiZW5kIjogMTQsICJuZ3JhbSI6ICJwZWFudXQgYWxsZXJneSIsICJwcmVmZXJyZWQiOiAxLCAic2VtdHlwZXMiOiBbIlQwNDciXSwgInNpbWlsYXJpdHkiOiAwLjc1LCAic25vbWVkX2N0IjogWyIxNDg5MzExMDE4IiwgIjE0Njk1OTQwMTkiLCAiMTIzNTcxNDAxOSIsICIxNTIzMDUwMTkiLCAiMzI4NjEwNTAxMyIsICIzMjg2MDc0MDEwIiwgIjMwODQ1MzAwMTciLCAiODM1MzUyMDE2Il0sICJzdGFydCI6IDAsICJ0ZXJtIjogIm51dCBhbGxlcmd5In1d\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"code\": { \"coding\": [ { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"4f6cfb8db4b6452a76cf7bcf373ef612c5b80f7dd2daeafdf07408cf\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"C0559470\", \"display\": \"peanut allergy\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } ], \"text\": \"peanut\" }, \"patient\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"AllergyIntolerance\" } }, { \"fullUrl\": \"urn:uuid:52044e2f-7878-4d36-a949-717599c08f3c\", \"request\": { \"method\": \"POST\", \"url\": \"Condition\" }, \"resource\": { \"id\": \"qrstuv-123\", \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"dfc3ecbd910316a17364ce77f4e959ec627dbaa7251d051eabcfe3f6\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"AllergyIntolerance.code.coding\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:52044e2f-7878-4d36-a949-717599c08f3c\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"AllergyIntolerance.code.text\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"W3siY3VpIjogIkMwNTcxNDE3IiwgImVuZCI6IDE5LCAibmdyYW0iOiAiYW1veGljaWxsaW4gYWxsZXJneSIsICJwcmVmZXJyZWQiOiAxLCAic2VtdHlwZXMiOiBbIlQwNDciXSwgInNpbWlsYXJpdHkiOiAxLjAsICJzbm9tZWRfY3QiOiBbIjI0NzYzMDkwMTYiLCAiNDM0NzgyMDEwIiwgIjI5NTk3NTgwMTQiLCAiNjg5NTEzMDE2Il0sICJzdGFydCI6IDAsICJ0ZXJtIjogImFtb3hpY2lsbGluIGFsbGVyZ3kifV0=\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"code\": { \"coding\": [ { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"dfc3ecbd910316a17364ce77f4e959ec627dbaa7251d051eabcfe3f6\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"C0571417\", \"display\": \"amoxicillin allergy\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } ], \"text\": \"amoxicillin\" }, \"patient\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"AllergyIntolerance\" } } ], \"type\": \"transaction\", \"resourceType\": \"Bundle\" } Allergy Intolerance derived codes The food allergy resource has been enriched with a new code. System Code Display http://terminology.hl7.org/CodeSystem/umls C0559470 peanut allergy In a similar way, the medication allergy resource has been enriched with a new code. System Code Display http://terminology.hl7.org/CodeSystem/umls C0571417 amoxicillin allergy Evidence nlp-insights enriches resources according to the Alvearie FHIR IG . The nlp-insights service adds detailed information to the enriched resource to explain what caused the additional codes to be added. Insight Summary Each coding that has been derived by NLP contains an insight summary extension that can be examined to determine which insight derived the code. For example consider the UMLS code C0559470 that was added to the allergy intolerance resource wxyz-123. C0559470 coding in AllergyIntolerance wxyz-123 { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"4f6cfb8db4b6452a76cf7bcf373ef612c5b80f7dd2daeafdf07408cf\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"C0559470\", \"display\": \"peanut allergy\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } The summary extension has been added to the coding. The summary has an insight id and category. The insight id has a system and identifier that together identify the insight. In this example, the system tells us that the insight was discovered using QuickUMLS. The identifier value is unique (within the system) to this insight, and may be used to find the insight extension for the insight in the resource meta. When nlp-insights derives codes, it will create one insight for all derived codes that are created from the same text. It is common for all summary extensions to refer to the same insight id. The category tells us that the coding was derived using Natural Language Processing. Insight Extension in Resource Meta The insight identified by the summary extension has an insight extension in the resource's meta. The insight extension contains lots of details about what the insight applies to and why it was created. Insight extension in the meta for AllergyIntolerance wxyz-123 { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"4f6cfb8db4b6452a76cf7bcf373ef612c5b80f7dd2daeafdf07408cf\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"AllergyIntolerance.code.coding\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:001610dd-2d6d-4e18-8784-4de72ddde238\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"AllergyIntolerance.code.text\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"W3siY3VpIjogIkMwNTU5NDcwIiwgImVuZCI6IDE0LCAibmdyYW0iOiAicGVhbnV0IGFsbGVyZ3kiLCAicHJlZmVycmVkIjogMSwgInNlbXR5cGVzIjogWyJUMDQ3Il0sICJzaW1pbGFyaXR5IjogMS4wLCAic25vbWVkX2N0IjogWyIxNTIzMDYwMTgiLCAiNTk4OTIwMDEyIiwgIjMyNDc3ODAxNyIsICI4MzUzNTMwMTQiXSwgInN0YXJ0IjogMCwgInRlcm0iOiAicGVhbnV0IGFsbGVyZ3kifSwgeyJjdWkiOiAiQzA5MTc5MTgiLCAiZW5kIjogMTQsICJuZ3JhbSI6ICJwZWFudXQgYWxsZXJneSIsICJwcmVmZXJyZWQiOiAxLCAic2VtdHlwZXMiOiBbIlQwMzMiXSwgInNpbWlsYXJpdHkiOiAwLjgsICJzbm9tZWRfY3QiOiBbXSwgInN0YXJ0IjogMCwgInRlcm0iOiAiaHgtcGVhbnV0IGFsbGVyZ3kifSwgeyJjdWkiOiAiQzA1Nzc2MjAiLCAiZW5kIjogMTQsICJuZ3JhbSI6ICJwZWFudXQgYWxsZXJneSIsICJwcmVmZXJyZWQiOiAxLCAic2VtdHlwZXMiOiBbIlQwNDciXSwgInNpbWlsYXJpdHkiOiAwLjc1LCAic25vbWVkX2N0IjogWyIxNDg5MzExMDE4IiwgIjE0Njk1OTQwMTkiLCAiMTIzNTcxNDAxOSIsICIxNTIzMDUwMTkiLCAiMzI4NjEwNTAxMyIsICIzMjg2MDc0MDEwIiwgIjMwODQ1MzAwMTciLCAiODM1MzUyMDE2Il0sICJzdGFydCI6IDAsICJ0ZXJtIjogIm51dCBhbGxlcmd5In1d\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } The extensions of interest within the insight extension are: extension purpose insight-id identifier for the insight. path HL7 FHIR Path to the part of this resource that the insight applies to. This is the location where derived codes have been added. insight-detail Detailed supporting evidence for the insight. Insight detail The insight detail extension provides information about why the insight got created: Extension Purpose reference The resource that contained the text that was used to create the insight. For enrichment, this will always be the enriched resource, the insight is derived from the same resource that the insight pertains to. reference-path HL7 FHIR Path that describes the location of the text used to create the insight (within reference) evaluated-output base64 response from the ACD Service","title":"Enrich Resources"},{"location":"examples/quickumls/enrich/#enrich-fhir-resources-with-nlp-insights-and-quickumls","text":"The nlp-insights service supports enrichment of the following types of FHIR resources: Condition AllergyIntolerance A resource is enriched by adding UMLS codes for detected concepts. This tutorial provides examples of enrichment.","title":"Enrich FHIR resources with nlp-insights and QuickUMLS"},{"location":"examples/quickumls/enrich/#configure-nlp-insights-to-use-quickumls-for-nlp","text":"If the nlp-insights service has not been configured to use QuickUMLS by default, follow the steps here .","title":"Configure nlp-insights to use QuickUMLS for NLP"},{"location":"examples/quickumls/enrich/#enrich-a-condition","text":"In this example, the nlp-insights service is sent a bundle that contains a single condition. The condition has a code with text \"myocardial infarction\", but no coding values. The service will add coding values to the code. This curl command is written to store the response in a file /tmp/output.json for later analysis. curl -w \"\\n%{http_code}\\n\" -s -o /tmp/output.json -XPOST localhost:5000/discoverInsights -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"resourceType\": \"Bundle\", \"id\": \"abc\", \"type\": \"transaction\", \"entry\": [ { \"resource\": { \"id\": \"abcefg-1234567890\", \"code\": { \"text\": \"myocardial infarction\" }, \"subject\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"Condition\" }, \"request\": { \"method\": \"POST\", \"url\": \"Condition\" } } ] } EOF output 200","title":"Enrich a Condition"},{"location":"examples/quickumls/enrich/#enriched-condition","text":"A bundle with the enriched condition is returned from the service. cat /tmp/output.json | jq Returned Bundle { \"id\": \"abc\", \"entry\": [ { \"fullUrl\": \"urn:uuid:cac05d72-a746-4e99-83a1-5f026e18d28b\", \"request\": { \"method\": \"POST\", \"url\": \"Condition\" }, \"resource\": { \"id\": \"abcefg-1234567890\", \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"ba52d4828c166df6edbf4e53d029d7d6eaeace98cf50a434a6541147\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"Condition.code.coding\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:cac05d72-a746-4e99-83a1-5f026e18d28b\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"Condition.code.text\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"code\": { \"coding\": [ { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"ba52d4828c166df6edbf4e53d029d7d6eaeace98cf50a434a6541147\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"C0027051\", \"display\": \"myocardial infarction\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } ], \"text\": \"myocardial infarction\" }, \"subject\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"Condition\" } } ], \"type\": \"transaction\", \"resourceType\": \"Bundle\" }","title":"Enriched condition"},{"location":"examples/quickumls/enrich/#condition-derived-codes","text":"Quick UMLS understands UMLS concept codes. As a result a code has been added to the resource. System Code Display http://terminology.hl7.org/CodeSystem/umls C0027051 myocardial infarction","title":"Condition derived codes"},{"location":"examples/quickumls/enrich/#enrich-an-allergy-intolerance","text":"In this example, a bundle with two allergy intolreance resources is sent to the nlp insights server. The first has a code with text \"peanut\", and the second resource has a code with text \"amoxicillin\". Both resources contain only text and do not contain any codes for the allergy. The nlp-insights service will enrich the resources with a UMLS code for the provided text. As in the prior example, the returned bundle is saved in a file /tmp/output.json for later analysis. curl -w \"\\n%{http_code}\\n\" -s -o /tmp/output.json -XPOST localhost:5000/discoverInsights -H 'Content-Type: application/json; charset=utf-8' --data-binary @- << EOF { \"resourceType\": \"Bundle\", \"id\": \"abc\", \"type\": \"transaction\", \"entry\": [ { \"resource\": { \"id\": \"wxyz-123\", \"code\": { \"text\": \"peanut\" }, \"patient\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"AllergyIntolerance\" }, \"request\": { \"method\": \"POST\", \"url\": \"Condition\" } }, { \"resource\": { \"id\": \"qrstuv-123\", \"code\": { \"text\": \"amoxicillin\" }, \"patient\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"AllergyIntolerance\" }, \"request\": { \"method\": \"POST\", \"url\": \"Condition\" } } ] } EOF output 200","title":"Enrich an allergy intolerance"},{"location":"examples/quickumls/enrich/#enriched-allergy-intolerance-resources","text":"A bundle is returned that contains the enriched allergy intolerance resources. Each resource now contains the additional derived code values. cat /tmp/output.json | jq Returned Bundle { \"id\": \"abc\", \"entry\": [ { \"fullUrl\": \"urn:uuid:001610dd-2d6d-4e18-8784-4de72ddde238\", \"request\": { \"method\": \"POST\", \"url\": \"Condition\" }, \"resource\": { \"id\": \"wxyz-123\", \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"4f6cfb8db4b6452a76cf7bcf373ef612c5b80f7dd2daeafdf07408cf\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"AllergyIntolerance.code.coding\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:001610dd-2d6d-4e18-8784-4de72ddde238\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"AllergyIntolerance.code.text\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"W3siY3VpIjogIkMwNTU5NDcwIiwgImVuZCI6IDE0LCAibmdyYW0iOiAicGVhbnV0IGFsbGVyZ3kiLCAicHJlZmVycmVkIjogMSwgInNlbXR5cGVzIjogWyJUMDQ3Il0sICJzaW1pbGFyaXR5IjogMS4wLCAic25vbWVkX2N0IjogWyIxNTIzMDYwMTgiLCAiNTk4OTIwMDEyIiwgIjMyNDc3ODAxNyIsICI4MzUzNTMwMTQiXSwgInN0YXJ0IjogMCwgInRlcm0iOiAicGVhbnV0IGFsbGVyZ3kifSwgeyJjdWkiOiAiQzA5MTc5MTgiLCAiZW5kIjogMTQsICJuZ3JhbSI6ICJwZWFudXQgYWxsZXJneSIsICJwcmVmZXJyZWQiOiAxLCAic2VtdHlwZXMiOiBbIlQwMzMiXSwgInNpbWlsYXJpdHkiOiAwLjgsICJzbm9tZWRfY3QiOiBbXSwgInN0YXJ0IjogMCwgInRlcm0iOiAiaHgtcGVhbnV0IGFsbGVyZ3kifSwgeyJjdWkiOiAiQzA1Nzc2MjAiLCAiZW5kIjogMTQsICJuZ3JhbSI6ICJwZWFudXQgYWxsZXJneSIsICJwcmVmZXJyZWQiOiAxLCAic2VtdHlwZXMiOiBbIlQwNDciXSwgInNpbWlsYXJpdHkiOiAwLjc1LCAic25vbWVkX2N0IjogWyIxNDg5MzExMDE4IiwgIjE0Njk1OTQwMTkiLCAiMTIzNTcxNDAxOSIsICIxNTIzMDUwMTkiLCAiMzI4NjEwNTAxMyIsICIzMjg2MDc0MDEwIiwgIjMwODQ1MzAwMTciLCAiODM1MzUyMDE2Il0sICJzdGFydCI6IDAsICJ0ZXJtIjogIm51dCBhbGxlcmd5In1d\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"code\": { \"coding\": [ { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"4f6cfb8db4b6452a76cf7bcf373ef612c5b80f7dd2daeafdf07408cf\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"C0559470\", \"display\": \"peanut allergy\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } ], \"text\": \"peanut\" }, \"patient\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"AllergyIntolerance\" } }, { \"fullUrl\": \"urn:uuid:52044e2f-7878-4d36-a949-717599c08f3c\", \"request\": { \"method\": \"POST\", \"url\": \"Condition\" }, \"resource\": { \"id\": \"qrstuv-123\", \"meta\": { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"dfc3ecbd910316a17364ce77f4e959ec627dbaa7251d051eabcfe3f6\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"AllergyIntolerance.code.coding\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:52044e2f-7878-4d36-a949-717599c08f3c\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"AllergyIntolerance.code.text\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"W3siY3VpIjogIkMwNTcxNDE3IiwgImVuZCI6IDE5LCAibmdyYW0iOiAiYW1veGljaWxsaW4gYWxsZXJneSIsICJwcmVmZXJyZWQiOiAxLCAic2VtdHlwZXMiOiBbIlQwNDciXSwgInNpbWlsYXJpdHkiOiAxLjAsICJzbm9tZWRfY3QiOiBbIjI0NzYzMDkwMTYiLCAiNDM0NzgyMDEwIiwgIjI5NTk3NTgwMTQiLCAiNjg5NTEzMDE2Il0sICJzdGFydCI6IDAsICJ0ZXJtIjogImFtb3hpY2lsbGluIGFsbGVyZ3kifV0=\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } ] }, \"code\": { \"coding\": [ { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"dfc3ecbd910316a17364ce77f4e959ec627dbaa7251d051eabcfe3f6\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"C0571417\", \"display\": \"amoxicillin allergy\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } ], \"text\": \"amoxicillin\" }, \"patient\": { \"reference\": \"Patient/97b51b8d-1d1b-497f-866c-8df5d6cc05a7\" }, \"resourceType\": \"AllergyIntolerance\" } } ], \"type\": \"transaction\", \"resourceType\": \"Bundle\" }","title":"Enriched Allergy Intolerance resources"},{"location":"examples/quickumls/enrich/#allergy-intolerance-derived-codes","text":"The food allergy resource has been enriched with a new code. System Code Display http://terminology.hl7.org/CodeSystem/umls C0559470 peanut allergy In a similar way, the medication allergy resource has been enriched with a new code. System Code Display http://terminology.hl7.org/CodeSystem/umls C0571417 amoxicillin allergy","title":"Allergy Intolerance derived codes"},{"location":"examples/quickumls/enrich/#evidence","text":"nlp-insights enriches resources according to the Alvearie FHIR IG . The nlp-insights service adds detailed information to the enriched resource to explain what caused the additional codes to be added.","title":"Evidence"},{"location":"examples/quickumls/enrich/#insight-summary","text":"Each coding that has been derived by NLP contains an insight summary extension that can be examined to determine which insight derived the code. For example consider the UMLS code C0559470 that was added to the allergy intolerance resource wxyz-123. C0559470 coding in AllergyIntolerance wxyz-123 { \"extension\": [ { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"4f6cfb8db4b6452a76cf7bcf373ef612c5b80f7dd2daeafdf07408cf\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/category\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"natural-language-processing\", \"display\": \"NLP\", \"system\": \"http://ibm.com/fhir/cdm/CodeSystem/insight-category-code-system\" } ], \"text\": \"NLP\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-summary\" } ], \"code\": \"C0559470\", \"display\": \"peanut allergy\", \"system\": \"http://terminology.hl7.org/CodeSystem/umls\" } The summary extension has been added to the coding. The summary has an insight id and category. The insight id has a system and identifier that together identify the insight. In this example, the system tells us that the insight was discovered using QuickUMLS. The identifier value is unique (within the system) to this insight, and may be used to find the insight extension for the insight in the resource meta. When nlp-insights derives codes, it will create one insight for all derived codes that are created from the same text. It is common for all summary extensions to refer to the same insight id. The category tells us that the coding was derived using Natural Language Processing.","title":"Insight Summary"},{"location":"examples/quickumls/enrich/#insight-extension-in-resource-meta","text":"The insight identified by the summary extension has an insight extension in the resource's meta. The insight extension contains lots of details about what the insight applies to and why it was created. Insight extension in the meta for AllergyIntolerance wxyz-123 { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-id\", \"valueIdentifier\": { \"system\": \"urn:alvearie.io/health_patterns/services/nlp_insights/quickumls\", \"value\": \"4f6cfb8db4b6452a76cf7bcf373ef612c5b80f7dd2daeafdf07408cf\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/path\", \"valueString\": \"AllergyIntolerance.code.coding\" }, { \"extension\": [ { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference\", \"valueReference\": { \"reference\": \"urn:uuid:001610dd-2d6d-4e18-8784-4de72ddde238\" } }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/reference-path\", \"valueString\": \"AllergyIntolerance.code.text\" }, { \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/evaluated-output\", \"valueAttachment\": { \"contentType\": \"application/json\", \"data\": \"W3siY3VpIjogIkMwNTU5NDcwIiwgImVuZCI6IDE0LCAibmdyYW0iOiAicGVhbnV0IGFsbGVyZ3kiLCAicHJlZmVycmVkIjogMSwgInNlbXR5cGVzIjogWyJUMDQ3Il0sICJzaW1pbGFyaXR5IjogMS4wLCAic25vbWVkX2N0IjogWyIxNTIzMDYwMTgiLCAiNTk4OTIwMDEyIiwgIjMyNDc3ODAxNyIsICI4MzUzNTMwMTQiXSwgInN0YXJ0IjogMCwgInRlcm0iOiAicGVhbnV0IGFsbGVyZ3kifSwgeyJjdWkiOiAiQzA5MTc5MTgiLCAiZW5kIjogMTQsICJuZ3JhbSI6ICJwZWFudXQgYWxsZXJneSIsICJwcmVmZXJyZWQiOiAxLCAic2VtdHlwZXMiOiBbIlQwMzMiXSwgInNpbWlsYXJpdHkiOiAwLjgsICJzbm9tZWRfY3QiOiBbXSwgInN0YXJ0IjogMCwgInRlcm0iOiAiaHgtcGVhbnV0IGFsbGVyZ3kifSwgeyJjdWkiOiAiQzA1Nzc2MjAiLCAiZW5kIjogMTQsICJuZ3JhbSI6ICJwZWFudXQgYWxsZXJneSIsICJwcmVmZXJyZWQiOiAxLCAic2VtdHlwZXMiOiBbIlQwNDciXSwgInNpbWlsYXJpdHkiOiAwLjc1LCAic25vbWVkX2N0IjogWyIxNDg5MzExMDE4IiwgIjE0Njk1OTQwMTkiLCAiMTIzNTcxNDAxOSIsICIxNTIzMDUwMTkiLCAiMzI4NjEwNTAxMyIsICIzMjg2MDc0MDEwIiwgIjMwODQ1MzAwMTciLCAiODM1MzUyMDE2Il0sICJzdGFydCI6IDAsICJ0ZXJtIjogIm51dCBhbGxlcmd5In1d\" } } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight-detail\" } ], \"url\": \"http://ibm.com/fhir/cdm/StructureDefinition/insight\" } The extensions of interest within the insight extension are: extension purpose insight-id identifier for the insight. path HL7 FHIR Path to the part of this resource that the insight applies to. This is the location where derived codes have been added. insight-detail Detailed supporting evidence for the insight.","title":"Insight Extension in Resource Meta"},{"location":"examples/quickumls/enrich/#insight-detail","text":"The insight detail extension provides information about why the insight got created: Extension Purpose reference The resource that contained the text that was used to create the insight. For enrichment, this will always be the enriched resource, the insight is derived from the same resource that the insight pertains to. reference-path HL7 FHIR Path that describes the location of the text used to create the insight (within reference) evaluated-output base64 response from the ACD Service","title":"Insight detail"},{"location":"examples/quickumls/quickumls_tutorial/","text":"Using nlp-insights with QuickUMLS QuickUMLS is a service designed for fast, unsupervised concept extraction from medical text. The code base and documentation is located here . Another great article on the technology can be found here . The nlp-insights service has been designed to interact with QuickUMLS for detecting medical concepts within FHIR resources. Prereqs You must have access to a deployed QuickUMLS service to complete this tutorial. Instructions to start a server on your local machine are described here: You must have a container runtime installed on your machine You must have a python 3.9 and pip distribution This tutorial uses curl to submit REST requests to the service Start the nlp-insights service If the nlp-insights service has not been started, start the service in a local container by following the instructions here . Configure nlp-insights to use quickumls for NLP The nlp-insights service must be configured to use QuickUMLS prior to using the service to obtain insights. The steps to configure the service are described here . Enrich FHIR resources with additional codings The nlp-insights service can use QuickUMLS to derive additional coding values in FHIR resources. Learn how here Derive new FHIR resources from unstructured content The nlp-insights service can use QuickUMLS to derive new FHIR resources from clinical notes embedded in other FHIR resources. Learn how here FHIR Integration The nlp-insights service is designed to enrich a bundle prior to posting that bundle to a FHIR server. Learn how to to work with derived data that is stored in a FHIR server here You will need a viewer for jupyter-notebooks to view the tutorial.","title":"Overview"},{"location":"examples/quickumls/quickumls_tutorial/#using-nlp-insights-with-quickumls","text":"QuickUMLS is a service designed for fast, unsupervised concept extraction from medical text. The code base and documentation is located here . Another great article on the technology can be found here . The nlp-insights service has been designed to interact with QuickUMLS for detecting medical concepts within FHIR resources.","title":"Using nlp-insights with QuickUMLS"},{"location":"examples/quickumls/quickumls_tutorial/#prereqs","text":"You must have access to a deployed QuickUMLS service to complete this tutorial. Instructions to start a server on your local machine are described here: You must have a container runtime installed on your machine You must have a python 3.9 and pip distribution This tutorial uses curl to submit REST requests to the service","title":"Prereqs"},{"location":"examples/quickumls/quickumls_tutorial/#start-the-nlp-insights-service","text":"If the nlp-insights service has not been started, start the service in a local container by following the instructions here .","title":"Start the nlp-insights service"},{"location":"examples/quickumls/quickumls_tutorial/#configure-nlp-insights-to-use-quickumls-for-nlp","text":"The nlp-insights service must be configured to use QuickUMLS prior to using the service to obtain insights. The steps to configure the service are described here .","title":"Configure nlp-insights to use quickumls for NLP"},{"location":"examples/quickumls/quickumls_tutorial/#enrich-fhir-resources-with-additional-codings","text":"The nlp-insights service can use QuickUMLS to derive additional coding values in FHIR resources. Learn how here","title":"Enrich FHIR resources with additional codings"},{"location":"examples/quickumls/quickumls_tutorial/#derive-new-fhir-resources-from-unstructured-content","text":"The nlp-insights service can use QuickUMLS to derive new FHIR resources from clinical notes embedded in other FHIR resources. Learn how here","title":"Derive new FHIR resources from unstructured content"},{"location":"examples/quickumls/quickumls_tutorial/#fhir-integration","text":"The nlp-insights service is designed to enrich a bundle prior to posting that bundle to a FHIR server. Learn how to to work with derived data that is stored in a FHIR server here You will need a viewer for jupyter-notebooks to view the tutorial.","title":"FHIR Integration"},{"location":"examples/setup/start_nlp_insights/","text":"Starting the nlp-insights service by pulling a container from our repository If you have no need to modify source code, you can run the nlp-insights service by pulling the container image. The tag of the container image is always associated with the release tag for the git repo. In other words, to run the service for release v0.0.6 on local port 8998, you could execute: docker login quay.io docker run -p 8998:5000 quay.io/alvearie/nlp-insights:0.0.6 The container's tag does not include a leading \"v\". We currently use quay.io as our container registry, and the available tags can be accessed here . We recommend loading images with tags that are associated with GitHub releases. Starting the nlp-insights service using source code Another option is to run the service by building the container from the source. This is the best way to test changes to the source. The nlp-insights service uses a gradle build to validate the source code, build the docker image, and start the service in a docker container. Prereqs You must have a container runtime installed on your machine (such as podman or docker) You must have a python 3.9 and pip distribution The tutorials use curl to submit REST requests to the service The tutorials use jq version 1.5 for formatting and processing the json The tutorials were run in a bash shell. Start the nlp-insights service Set the current working directory to the root of a clone of our GitHub repo. Use gradle to start the service in a docker container on port 5000. <user-id> should be the user id for your local repository. Windows users should use ./gradlew.bat instead of ./gradlew . ./gradlew checkSource dockerStop dockerRemoveContainer dockerRun -PdockerUser=<user-id> -PdockerLocalPort=5000 The tasks run in left to right order: checkSource performs unit tests and static source code checks on the source. It is optional when not making changes. dockerStop stops the container if it is running. This is necessary if the service is already started. dockerRemoveContainer removes the container from your container registry. This is necessary if container has been previously registered. dockerRun starts the container The dockerUser property should be your docker user id. The dockerLocalPort is the port the service runs on. The default is 5000, but you can change this if you have other local services already running on port 5000. output > Task :dockerRunStatus Docker container 'nlp-insights' is RUNNING. BUILD SUCCESSFUL in 1m 16s The service will now be running on port 5000. docker container ls output CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 592aeac44fca localhost/ntl/nlp-insights:0.0.2 python3 -m flask ... 2 minutes ago Up 2 minutes ago 0.0.0.0:5000->5000/tcp nlp-insights","title":"Start service locally"},{"location":"examples/setup/start_nlp_insights/#starting-the-nlp-insights-service-by-pulling-a-container-from-our-repository","text":"If you have no need to modify source code, you can run the nlp-insights service by pulling the container image. The tag of the container image is always associated with the release tag for the git repo. In other words, to run the service for release v0.0.6 on local port 8998, you could execute: docker login quay.io docker run -p 8998:5000 quay.io/alvearie/nlp-insights:0.0.6 The container's tag does not include a leading \"v\". We currently use quay.io as our container registry, and the available tags can be accessed here . We recommend loading images with tags that are associated with GitHub releases.","title":"Starting the nlp-insights service by pulling a container from our repository"},{"location":"examples/setup/start_nlp_insights/#starting-the-nlp-insights-service-using-source-code","text":"Another option is to run the service by building the container from the source. This is the best way to test changes to the source. The nlp-insights service uses a gradle build to validate the source code, build the docker image, and start the service in a docker container.","title":"Starting the nlp-insights service using source code"},{"location":"examples/setup/start_nlp_insights/#prereqs","text":"You must have a container runtime installed on your machine (such as podman or docker) You must have a python 3.9 and pip distribution The tutorials use curl to submit REST requests to the service The tutorials use jq version 1.5 for formatting and processing the json The tutorials were run in a bash shell.","title":"Prereqs"},{"location":"examples/setup/start_nlp_insights/#start-the-nlp-insights-service","text":"Set the current working directory to the root of a clone of our GitHub repo. Use gradle to start the service in a docker container on port 5000. <user-id> should be the user id for your local repository. Windows users should use ./gradlew.bat instead of ./gradlew . ./gradlew checkSource dockerStop dockerRemoveContainer dockerRun -PdockerUser=<user-id> -PdockerLocalPort=5000 The tasks run in left to right order: checkSource performs unit tests and static source code checks on the source. It is optional when not making changes. dockerStop stops the container if it is running. This is necessary if the service is already started. dockerRemoveContainer removes the container from your container registry. This is necessary if container has been previously registered. dockerRun starts the container The dockerUser property should be your docker user id. The dockerLocalPort is the port the service runs on. The default is 5000, but you can change this if you have other local services already running on port 5000. output > Task :dockerRunStatus Docker container 'nlp-insights' is RUNNING. BUILD SUCCESSFUL in 1m 16s The service will now be running on port 5000. docker container ls output CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 592aeac44fca localhost/ntl/nlp-insights:0.0.2 python3 -m flask ... 2 minutes ago Up 2 minutes ago 0.0.0.0:5000->5000/tcp nlp-insights","title":"Start the nlp-insights service"},{"location":"user/http_endpoints/","text":"HTTP Endpoints Discover Insights The discoverInsights API accepts an input bundle and returns an updated bundle with: Resources that have been enriched with additional codes Resources that have been derived from unstructured text (such as clinical notes) contained within the bundle's resources. Action Method Endpoint Body Returns on Success Add insights POST /discoverInsights FHIR bundle Enriched FHIR Bundle Derived and Enriched types are described in the tutorials. Derive new resources with ACD Enrich resources with ACD Derive new resources with QuickUMLS Enrich resources with QuickUmls Discover Insights and non-bundle resources If the discoverInsights API is called with a FHIR resource that is not a bundle, then the returned data depends on the input type: Body Type Returns DiagnosticReport or Document Reference A bundle of derived resources, or an empty bundle if no resources were derived. Condition or AllergyIntolerance The resource is returned with additional codes, or with no additional codes if no codes were derived. Other resource types may return an error. This is an experimental feature that requires resources to have a valid identifier. When posting a resource that is not a bundle, the resource must have a valid identifier. The identifier allows references to the resource to be created. These references are critical for defining the source of an insight, and/or the subject (patient) that resource is associated with. The identifier is assigned to a unique value by the FHIR server when the resource is created on the server. If a pipeline such as health-patterns invokes the discoverInsights API before creating the resources in thie FHIR server, then the resource's identifier has not been set yet. This problem can be avoided by posting a bundle of resources. When a bundle is posted, the bundle contains a list of bundeEntry objects, with each object containing an optional fullUrl and a resource. nlp-insights uses the fullUrl property in the bundleEntry to indentify the resource when a reference is needed. The FHIR server will update the references to the fullUrl with the actual ID when it assigns IDs for the resource. If the fullUrl property is not set, then nlp-insights assigns a UUID to the property. This allows nlp-insights to process bundles before the FHIR server has assigned IDs for resources. The health-patterns ingestion pipline seeks to enrich the bundle with insights before creating resources on the FHIR server. For this reason, posting individual resources is not possible. Because health-patterns is the primary use of the service, posting individual resources is an experimential feature. Configuration The app currently supports running two different NLP engine types: IBM's Annotator for Clinical Data (ACD) and open-source QuickUMLS It is possible to configure as many different instances of these two engines as needed with different configuration details. Configuration Definition The configuration definition jsons that are used by the APIs require a name , an nlpServiceType (either acd or quickumls ), and config details specific to that type. QuickUmls For QuickUmls, an endpoint is required. Sample configuration json: { \"name\": \"quickconfig1\", \"nlpServiceType\": \"quickumls\", \"config\": { \"endpoint\": \"https://quickumls.wh-health-patterns.dev.watson-health.ibm.com/match\" } } ACD For ACD, an endpoint , an apikey , and a flow are required. The nlp-insights service is desgined to work with the flow wh_acd.ibm_clinical_insights_v1.0_standard_flow , other flows may require code modifications. Sample Configuration json: { \"name\": \"acdconfig1\", \"nlpServiceType\": \"acd\", \"config\": { \"apikey\": \"***api key***\", \"endpoint\": \"https://<endpoint-url>/wh-acd/api\", \"flow\": \"wh_acd.ibm_clinical_insights_v1.0_standard_flow\" } } Configuration endpoints These APIs are used for configuring the NLP engine that will be used to discover insights. Successful requests will return a 2xx status code. Requests using the GET method will also respond with a json object in the response body. Method & Endpoint Body Response Body on Success Config Definition Get All Configs GET /all_configs Config definition names: { \"all_configs\": [ \"acdconfig1\", \"quickconfig1\" ] } Add Named Config PUT/POST /config/definition json config see: Configuration Definition Status: 204 NO CONTENT Delete Config DELETE /config/{configName} Status: 204 NO CONTENT Get Config Details GET /config/{configName} Configuration json (sensitive data will be masked): QuickUmls Example: { \"name\": \"quickconfig1\", \"nlpServiceType\": \"quickumls\", \"config\": { \"endpoint\": \"http://endpoint/match\" } } ACD Example: { \"name\": \"acdconfig1\", \"nlpServiceType\": \"acd\", \"config\": { \"apikey\": \"********************************************\", \"endpoint\": \"https://endpoint/api\", \"flow\": \"wh_acd.ibm_clinical_insights_v1.0_standard_flow\" } } Default NLP Make Config default POST/PUT /config/setDefault?name={configName} Status: 204 NO CONTENT Get Current Default Config GET /config Current default configName: { \"config\": \"acdconfig1\" } Clear default config POST/PUT /config/clearDefault Status: 204 NO CONTENT Override NLP Engine for a resource Get all active overrides GET /config/resource Dictionary of overrides: { \"AllergyIntolerance\": \"acdconfig1\", \"Condition\": \"acdconfig1\" } If no overrides are defined: {} Get the active override for a resource GET /config/resource/{resource} Dictionary of override: { \"Condition\": \"acdconfig1\" } If no override is defined: { \"AllergyIntolerance\": null } Add resource override POST/PUT /config/resource/{resourcetype}/{configName} Status: 204 NO CONTENT Delete a resource override DELETE /config/resource/{resourcetype} Status: 204 NO CONTENT Delete all resource overrides DELETE /config/resource Status: 204 NO CONTENT Error Responses Responses with status codes in the 4xx range usually have a json body with a \"message\" property with a human readable description. Other details about the error may also be included in the structure. Example response when an invalid json is sent to the discoverInsights API: Status Code = 400 { \"message\": \"Resource was not valid json: Expecting property name enclosed in double quotes: line 29 column 10 (char 676)\" } Example response when an invalid FHIR resource is sent to the discoverInsights API Status Code = 400 { \"message\": \"Resource was not valid\", \"details\": [ { \"loc\": [ \"reaction\", 0, \"manifestation\", 0, \"text2\" ], \"msg\": \"extra fields not permitted\", \"type\": \"value_error.extra\" } ] }","title":"HTTP Endpoints"},{"location":"user/http_endpoints/#http-endpoints","text":"","title":"HTTP Endpoints"},{"location":"user/http_endpoints/#discover-insights","text":"The discoverInsights API accepts an input bundle and returns an updated bundle with: Resources that have been enriched with additional codes Resources that have been derived from unstructured text (such as clinical notes) contained within the bundle's resources. Action Method Endpoint Body Returns on Success Add insights POST /discoverInsights FHIR bundle Enriched FHIR Bundle Derived and Enriched types are described in the tutorials. Derive new resources with ACD Enrich resources with ACD Derive new resources with QuickUMLS Enrich resources with QuickUmls","title":"Discover Insights"},{"location":"user/http_endpoints/#discover-insights-and-non-bundle-resources","text":"If the discoverInsights API is called with a FHIR resource that is not a bundle, then the returned data depends on the input type: Body Type Returns DiagnosticReport or Document Reference A bundle of derived resources, or an empty bundle if no resources were derived. Condition or AllergyIntolerance The resource is returned with additional codes, or with no additional codes if no codes were derived. Other resource types may return an error. This is an experimental feature that requires resources to have a valid identifier. When posting a resource that is not a bundle, the resource must have a valid identifier. The identifier allows references to the resource to be created. These references are critical for defining the source of an insight, and/or the subject (patient) that resource is associated with. The identifier is assigned to a unique value by the FHIR server when the resource is created on the server. If a pipeline such as health-patterns invokes the discoverInsights API before creating the resources in thie FHIR server, then the resource's identifier has not been set yet. This problem can be avoided by posting a bundle of resources. When a bundle is posted, the bundle contains a list of bundeEntry objects, with each object containing an optional fullUrl and a resource. nlp-insights uses the fullUrl property in the bundleEntry to indentify the resource when a reference is needed. The FHIR server will update the references to the fullUrl with the actual ID when it assigns IDs for the resource. If the fullUrl property is not set, then nlp-insights assigns a UUID to the property. This allows nlp-insights to process bundles before the FHIR server has assigned IDs for resources. The health-patterns ingestion pipline seeks to enrich the bundle with insights before creating resources on the FHIR server. For this reason, posting individual resources is not possible. Because health-patterns is the primary use of the service, posting individual resources is an experimential feature.","title":"Discover Insights and non-bundle resources"},{"location":"user/http_endpoints/#configuration","text":"The app currently supports running two different NLP engine types: IBM's Annotator for Clinical Data (ACD) and open-source QuickUMLS It is possible to configure as many different instances of these two engines as needed with different configuration details.","title":"Configuration"},{"location":"user/http_endpoints/#configuration-definition","text":"The configuration definition jsons that are used by the APIs require a name , an nlpServiceType (either acd or quickumls ), and config details specific to that type.","title":"Configuration Definition"},{"location":"user/http_endpoints/#quickumls","text":"For QuickUmls, an endpoint is required. Sample configuration json: { \"name\": \"quickconfig1\", \"nlpServiceType\": \"quickumls\", \"config\": { \"endpoint\": \"https://quickumls.wh-health-patterns.dev.watson-health.ibm.com/match\" } }","title":"QuickUmls"},{"location":"user/http_endpoints/#acd","text":"For ACD, an endpoint , an apikey , and a flow are required. The nlp-insights service is desgined to work with the flow wh_acd.ibm_clinical_insights_v1.0_standard_flow , other flows may require code modifications. Sample Configuration json: { \"name\": \"acdconfig1\", \"nlpServiceType\": \"acd\", \"config\": { \"apikey\": \"***api key***\", \"endpoint\": \"https://<endpoint-url>/wh-acd/api\", \"flow\": \"wh_acd.ibm_clinical_insights_v1.0_standard_flow\" } }","title":"ACD"},{"location":"user/http_endpoints/#configuration-endpoints","text":"These APIs are used for configuring the NLP engine that will be used to discover insights. Successful requests will return a 2xx status code. Requests using the GET method will also respond with a json object in the response body. Method & Endpoint Body Response Body on Success Config Definition Get All Configs GET /all_configs Config definition names: { \"all_configs\": [ \"acdconfig1\", \"quickconfig1\" ] } Add Named Config PUT/POST /config/definition json config see: Configuration Definition Status: 204 NO CONTENT Delete Config DELETE /config/{configName} Status: 204 NO CONTENT Get Config Details GET /config/{configName} Configuration json (sensitive data will be masked): QuickUmls Example: { \"name\": \"quickconfig1\", \"nlpServiceType\": \"quickumls\", \"config\": { \"endpoint\": \"http://endpoint/match\" } } ACD Example: { \"name\": \"acdconfig1\", \"nlpServiceType\": \"acd\", \"config\": { \"apikey\": \"********************************************\", \"endpoint\": \"https://endpoint/api\", \"flow\": \"wh_acd.ibm_clinical_insights_v1.0_standard_flow\" } } Default NLP Make Config default POST/PUT /config/setDefault?name={configName} Status: 204 NO CONTENT Get Current Default Config GET /config Current default configName: { \"config\": \"acdconfig1\" } Clear default config POST/PUT /config/clearDefault Status: 204 NO CONTENT Override NLP Engine for a resource Get all active overrides GET /config/resource Dictionary of overrides: { \"AllergyIntolerance\": \"acdconfig1\", \"Condition\": \"acdconfig1\" } If no overrides are defined: {} Get the active override for a resource GET /config/resource/{resource} Dictionary of override: { \"Condition\": \"acdconfig1\" } If no override is defined: { \"AllergyIntolerance\": null } Add resource override POST/PUT /config/resource/{resourcetype}/{configName} Status: 204 NO CONTENT Delete a resource override DELETE /config/resource/{resourcetype} Status: 204 NO CONTENT Delete all resource overrides DELETE /config/resource Status: 204 NO CONTENT","title":"Configuration endpoints"},{"location":"user/http_endpoints/#error-responses","text":"Responses with status codes in the 4xx range usually have a json body with a \"message\" property with a human readable description. Other details about the error may also be included in the structure.","title":"Error Responses"},{"location":"user/http_endpoints/#example-response-when-an-invalid-json-is-sent-to-the-discoverinsights-api","text":"Status Code = 400 { \"message\": \"Resource was not valid json: Expecting property name enclosed in double quotes: line 29 column 10 (char 676)\" }","title":"Example response when an invalid json is sent to the discoverInsights API:"},{"location":"user/http_endpoints/#example-response-when-an-invalid-fhir-resource-is-sent-to-the-discoverinsights-api","text":"Status Code = 400 { \"message\": \"Resource was not valid\", \"details\": [ { \"loc\": [ \"reaction\", 0, \"manifestation\", 0, \"text2\" ], \"msg\": \"extra fields not permitted\", \"type\": \"value_error.extra\" } ] }","title":"Example response when an invalid FHIR resource is sent to the discoverInsights API"},{"location":"user/kubernetes/","text":"Kubernetes The nlp-insights service comes with helm charts so that it can be deployed to a k8s environment. Deploy the docker image to a kubernetes cluster These instructions assume that the developer has built a new image and wants to deploy it. However you can also use an image already published, and then it would not be necessary to push a new image to the cloud's container registry. Log into your cloud provider and container registry. The commands to do this depend on your cloud provider. Push the docker image to the remote repository ./gradlew dockerPush -PdockerUser=<docker_user_id> Install the helm charts (The version that was used to tag the docker image is defined in gradle.properties) helm install nlp-insights chart --set image.repository=<docker_user_id>/nlp-insights --set image.tag=<version> Wait for the pod to start running kubectl get pods (look for \"nlp-insights-*\") Connect to the pod's port 5000 kubectl port-forward nlp-insights-xxxxxx-xxxx <local-port>:5000 You can now connect to the service via localhost: Be aware that some cloud providers may require additional configuration in order for the deployment to work. For example you may need to create a pull secret. Consult your provider's documentation for details. Additonal information Additional information can be found in the README.md in the source tree's chart folder. Configuring the server at deploy time It is possible to provide an initial (deploy time) named configuration for quickulms and/or acd. This is especially important in a k8s environment, as the service may scale up or down transparently to the user. This is done by modifying the values.yaml file before deployment. In the nlp-insights chart, the following configuration values are defined: nlpservice: quickumls: enableconfig: false name: endpoint: acd: enableconfig: false name: endpoint: apikey: flow: default: By setting the appropriate enableconfig flag to true and providing the name of the config as well as the details (dependent on the type of the nlp engine), an initial named configuration will be created. In addition, the configuration can be made the default by setting the default value to one of the previously defined names. Example config jsons: { \"name\": \"quickconfig1\", \"nlpServiceType\": \"quickumls\", \"config\": { \"endpoint\": \"https://quickumlsEndpointURL/match\" } } { \"name\": \"acdconfig1\", \"nlpServiceType\": \"acd\", \"config\": { \"apikey\": \"apikeyxxxxxxxxx\", \"endpoint\": \"https://acdEndpointURL/api\", \"flow\": \"acd_standard_flow\" } }","title":"Kubernetes"},{"location":"user/kubernetes/#kubernetes","text":"The nlp-insights service comes with helm charts so that it can be deployed to a k8s environment.","title":"Kubernetes"},{"location":"user/kubernetes/#deploy-the-docker-image-to-a-kubernetes-cluster","text":"These instructions assume that the developer has built a new image and wants to deploy it. However you can also use an image already published, and then it would not be necessary to push a new image to the cloud's container registry. Log into your cloud provider and container registry. The commands to do this depend on your cloud provider. Push the docker image to the remote repository ./gradlew dockerPush -PdockerUser=<docker_user_id> Install the helm charts (The version that was used to tag the docker image is defined in gradle.properties) helm install nlp-insights chart --set image.repository=<docker_user_id>/nlp-insights --set image.tag=<version> Wait for the pod to start running kubectl get pods (look for \"nlp-insights-*\") Connect to the pod's port 5000 kubectl port-forward nlp-insights-xxxxxx-xxxx <local-port>:5000 You can now connect to the service via localhost: Be aware that some cloud providers may require additional configuration in order for the deployment to work. For example you may need to create a pull secret. Consult your provider's documentation for details.","title":"Deploy the docker image to a kubernetes cluster"},{"location":"user/kubernetes/#additonal-information","text":"Additional information can be found in the README.md in the source tree's chart folder.","title":"Additonal information"},{"location":"user/kubernetes/#configuring-the-server-at-deploy-time","text":"It is possible to provide an initial (deploy time) named configuration for quickulms and/or acd. This is especially important in a k8s environment, as the service may scale up or down transparently to the user. This is done by modifying the values.yaml file before deployment. In the nlp-insights chart, the following configuration values are defined: nlpservice: quickumls: enableconfig: false name: endpoint: acd: enableconfig: false name: endpoint: apikey: flow: default: By setting the appropriate enableconfig flag to true and providing the name of the config as well as the details (dependent on the type of the nlp engine), an initial named configuration will be created. In addition, the configuration can be made the default by setting the default value to one of the previously defined names.","title":"Configuring the server at deploy time"},{"location":"user/kubernetes/#example-config-jsons","text":"{ \"name\": \"quickconfig1\", \"nlpServiceType\": \"quickumls\", \"config\": { \"endpoint\": \"https://quickumlsEndpointURL/match\" } } { \"name\": \"acdconfig1\", \"nlpServiceType\": \"acd\", \"config\": { \"apikey\": \"apikeyxxxxxxxxx\", \"endpoint\": \"https://acdEndpointURL/api\", \"flow\": \"acd_standard_flow\" } }","title":"Example config jsons:"}]}