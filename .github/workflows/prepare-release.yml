# This workflow performs the container image build as part of prepare release
# It runs if any files other than markdown files are changed.
#
# This uses the same name and job name as prepare-doc-release.yml.
# There is a branch protection status check that requires a workflow
# with this name to pass. Since thes both only run under certain conditions,
# they both have to share the same name so that at least one of them runs.
#
# Othewise the pull can never be merged because no status check runs.
# This is described here: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/troubleshooting-required-status-checks#handling-skipped-but-required-checks
name: Prepare to release nlp-insights 
on:
  pull_request:
    types: [opened, synchronize, labeled, reopened]
    branches:
      - main
    paths-ignore:
      - 'docs/**.md'

jobs:
  prepare-release:
    # Don't change this name, must match prepare-doc-release.yml,
    # must match status check name
    name: Prepare release
    runs-on: ubuntu-20.04 

    env:
      docker_server: quay.io
      docker_org: alvearie
      docker_repo: nlp-insights

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Checkout branch
        run: |
             git fetch
             git checkout ${{ github.event.pull_request.head.ref }}
      - name: Install python 3.9
        run: |
             .github/workflows/scripts/install-python-39.sh
             npm install -g dockerlint
      - name: Docker login
        run: echo ${{ secrets.docker_password }} | docker login --username ${{ secrets.docker_username }} --password-stdin ${{ env.docker_server }}
      - name: Determine release tag
        run: |
             set -ex
             source .github/workflows/scripts/utils.sh
             if [[ "${{ github.event.label.name }}" =~ '^(release-major|release-minor|release-patch)$' ]]; then
               RELEASE="${{ github.event.label.name }}"
             elif [ -z "${{ github.event.label.name }}" ]; then
               >&2 echo "There was no label (valid values are release-major, release-minor, or release-patch), using release-patch"
               RELEASE=release-patch
             else
               >&2 echo "The pull request must have a label in (release-major, release-minor, or release-patch)."
               exit 1
             fi

             echo "VERSION=$(calculate_tag ${{ env.docker_repo }} ${{ env.docker_server }} ${{ env.docker_org }} ${RELEASE} )" >> $GITHUB_ENV
             >&2 echo "${{ env.version }} was assigned as a release tag"
      - name: Update release files
        run: |
             set -ex
             UPDATES=$(.github/workflows/scripts/update_files_with_version.sh \
              --project_dir=. \
              --version=${{ env.VERSION }} \
              --docker_org=${{ env.docker_org }} \
              --docker_repo=${{ env.docker_repo}})

             >&2 echo "${UPDATES} changes were made to update the release to ${{ env.VERSION }}"

      - name: Unit Test
        run:  ./gradlew test

      - name: Static Code Analysis
        run: |
             if [[ "${{ github.event.pull_request.title }}" =~ '.*\[noFailForSourceProblems\].*' ]]; then
               CHECK_SOURCE_NO_FAIL="-PnoFailForSourceProblems"
             fi
             ./gradlew checkSource $CHECK_SOURCE_NO_FAIL

      - name: Docker Lint
        run:  dockerlint
      # We don't want to continue this build and indicate success if something
      # is wrong with the docs. This is usually a quick operation so doing it
      # even if no documentation changed is not a problem, we'll always publish the
      # docs, because that is where the charts get archived.
      - name: Validate Documentation
        run: |
             pip install --upgrade pip && pip install mkdocs mkdocs-gen-files pymdown-extensions
             mkdocs build -s      
      - name: Push Docker Image
        run: |
             ./gradlew dockerPush -PdockerUser=${{ env.docker_server }}/${{ env.docker_org }}
      - name: Commit release updates to git
        run: |
             git config user.name ${{ github.actor }}
             git config user.email "${{ github.actor }}@users.noreply.github.com"
             git add -A
             git commit --signoff -m "Update to version ${{ env.VERSION }}" || true
             git push || true #Ignore errors in case no files have changed

             # The commit that we just pushed will not trigger the prepare release action (avoids recursion)
             # So we need to explicitly tag the action complete for the commit that we
             # just pushed. This is the last step in the flow.
             # See: https://docs.github.com/en/rest/reference/commits#create-a-commit-status
      - name: Signal Completion
        run: |
             set -x
             BUILD_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
             sha=$(git rev-parse HEAD)
             obj="{\"state\" : \"success\", \"context\" : \"Prepare release\", \"target_url\": \"${BUILD_URL}\" }"
 
             curl -X POST "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/statuses/${sha}"  \
                  -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -d "${obj}"
